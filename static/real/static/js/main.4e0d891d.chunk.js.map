{"version":3,"sources":["context/globals.js","context/reducers/generalReducer.js","context/reducers/viewReducer.js","context/state/initialStates.js","context/reducers/reducers.js","utils/navjs.js","utils/nanoit/auth.js","utils/nanoit/meta.js","utils/nanoit/msg.js","context/actions/parser/ctrl/index.js","context/actions/parser/auth/index.js","context/actions/dispatchs.js","context/localStorageActions.js","context/actions/parser/meta/index.js","utils/nanoit/notify.js","context/actions/parser/msg/index.js","utils/errorlog.js","context/actions/parser/notify/index.js","context/actions/generalActions.js","context/store/storeContext.js","context/actions/index.js","context/actions/viewActions.js","components/view/layout/Header.js","components/view/layout/Wrapper.js","components/view/layout/Contents.js","components/view/layout/Navigation.js","components/view/list/MyList.js","components/view/list/AllList.js","utils/nanoit/ctrl.js","utils/fileUtil.js","components/view/list/UserList.js","components/view/list/ListNavi.js","components/view/list/CreateTopic.js","components/view/list/List.js","components/view/chat/ChatHeader.js","components/view/chat/PopupMessage.js","components/view/chat/ChatReciever.js","components/view/chat/Emoji.js","utils/nanoit/file.js","components/view/chat/SearchUsers.js","components/view/chat/ItemReply.js","components/view/chat/ItemRelay.js","components/view/chat/ChatSender.js","components/view/chat/PopupInvite.js","components/view/chat/PopupUsers.js","components/view/chat/EmptyCover.js","components/view/chat/Chat.js","components/view/member/Signup.js","components/view/Cat.js","components/view/member/Login.js","components/view/notify/Notify.js","components/view/ViewApp.js","utils/deviceDivider.js","utils/Toastify.js","app.js","ws/index.js","index.js"],"names":["TYPE_INSERT_USER_BY_TOPIC_ID","TYPE_INSERT_ALL_FRIENDS","TYPE_INSERT_MESSAGE_BY_TOPIC_ID","TYPE_UPDATE_MESSAGE_BY_TOPIC_ID","TYPE_INSERT_MESSAGES_BY_TOPIC_ID","TYPE_INSERT_MY_TOPIC","TYPE_INSERT_ALL_TOPIC","TYPE_INSERT_USER_CHANGE_INFO","TYPE_ADD_SEND_MESSAGE_IN_TRACE","TYPE_UPDATE_SEND_MESSAGE_IN_TRACE","TYPE_DELETE_MY_TOPIC_BY_TOPIC_ID","TYPE_DELETE_USER_BY_TOPIC_ID","TYPE_DROP_MY_TOPICS","TYPE_DROP_ALL_FRIENDS","TYPE_RESET","TYPE_UPDATE_PROFILE","TYPE_UPDATE_IS_WRITE_LOG","TYPE_UPDATE_WEBSOCKET_STATUS","TYPE_UPDATE_SESSION_LOGIN","TYPE_UPDATE_SESSION_JWT","TYPE_UPDATE_SESSION_USER","TYPE_LOGGING_RAW","TYPE_LOGGING_STATUS","REQUEST_WHAT_TOPIC","REQUEST_WHAT_USER","REQUEST_WHAT_MESSAGE","REQUEST_WHAT_SESSION","REQUEST_HOW_INVITE","REQUEST_HOW_JOIN","REQUEST_HOW_CREATE","REQUEST_HOW_LEAVE","REQUEST_HOW_LOGIN","REQUEST_HOW_LOGOUT","REQUEST_HOW_SELECT","REQUEST_HOW_SEND","REQUEST_HOW_CTRL","REQUEST_HOW_REGISTER","REQUEST_USING_TOKEN","TRACE_RESULT_FAIL","TRACE_RESULT_DONE","TRACE_STATUS_SEND","TRACE_STATUS_DONE","STRING_CTRL_CREATE_CONTENT","TYPE_SELECT_TOPIC_ID","TYPE_INSERT_NEW_USER_BY_TOPIC_ID","TYPE_UPDATE_MESSAGE_ADD_FILE","TYPE_ADD_REPLY","TYPE_ADD_MENTION","HIDE_LOGIN","HIDE_SIGNUP","GET_PROFILE_IMG","GET_REPLY_CONTENT","TYPE_ADD_PROFILE_IMG","IS_SHOW_POPUP_MSG_ITEMS","IS_SHOW_CHATBOX_LOADING","GET_IMAGE_BLOB","GET_TOPIC_USERS","GET_ALL_TOPICS","IS_SHOW_CHAT_MEBMER","IS_SHOW_INVITE","IS_SHOW_CHAT_MOBILE","IS_SHOW_CREATE_TOPIC","IS_SHOW_POPUP_NOTIFY","TEMP_SAVE_MENTION_USERS","TEMP_SAVE_MSG_FOR_REALY","TEMP_SAVE_MSG_FOR_MENTION","GET_TOAST_MSG","ws","document","location","host","split","generalStates","DEFAULT_USE_LOGGER","DEFAULT_CHAT_SERVER_URL","DEFAULT_WEBSOCKET_SERVER_URL","DEFAULT_NEXT_RAW_LOG_ID","DEFAULT_NEXT_STATUS_LOG_ID","DEFAULT_RAW_LOG","DEFAULT_STATUS_LOG","WEBSOCKET_STATUS","SESSION_JWT_TOKEN","SESSION_IS_LOGIN","SESSION_LOGIN_COUNT","SESSION_USER_INFO","id","name","SEND_MESSAGE_TRACE","FRIENDS_ALL","TOPICS_ALL","TOPICS_MY","REPLY","MENTION","generalReducer","state","action","type","map","trace","uuid","message","result","status","text","log","isLogin","token","user","undefined","find","friend","concat","isWriteLog","filter","topic","users","topicId","e","topic_id","messages","clint_uuid","t","sequence_id","file","userid","profile","file_id","fileid","img","r","notify_id","from_user_id","from_user_name","JSON","stringify","viewReducer","selectopicid","isShowCreateTopic","isShow","isShowChatMobile","isShowInvite","isShowChatUser","isShowNotify","getToastMsg","msg","topicsAll","topicUsers","sendImage","isChatboxLoading","hideSignup","hideLogin","profileImg","replyContent","data","item","popupMessageItems","reply","relay","delete","mentionUsers","u","auth","msgForRelay","msgForMention","initialState","viewStates","content","reducer","navJS","toJSON","json","userAgent","this","os","browser","version","mobile","isMobile","desktop","isDesktop","screen","hd","isHD","pixelRatio","landscape","isLandscape","portrait","isPortrait","touch","isTouch","isIOS","ios","getIOSVersion","device","isIPhone","isIPad","isAndroid","isWindows","isUnix","isMac","isLinux","isBlackBerry","isSafari","isChrome","isIE","isEdge","isFirefox","isOpera","navigator","browserName","tem","ua","M","match","test","exec","appName","appVersion","splice","join","innerWidth","window","innerHeight","width","height","indexOf","vendor","toLowerCase","Object","prototype","toString","call","operamini","isMobileChrome","isMobileSafari","isMobileIE","isMobileOpera","isMobileFirefox","devicePixelRatio","platform","OSVersion","replace","isStandAlone","standalone","maxTouchPoints","documentElement","browser_id","navigator_info","screen_info","uid","mimeTypes","length","plugins","pixelDepth","uuidv4","c","Math","random","device_info","user_agent","device_id","operation_system","device_info_create","AuthLoginIdPw","email","password","request","what","how","using","AuthLoginTokenSelect","AuthLogoutNormal","MetaRequestTopicList","meta","MetaRequestTopicListMe","MetaRequestAllUser","MetaRequestUserTopicId","MetaRequestTopicMessage","MsgSend","msgType","mentionUsersId","replyUserId","custom","notify","to_user_id","mention","to_users_id","MsgReceiveAck","MsgSendCtrlMessage","ParserCtrl","props","root","ctrl","from","me","who","response","is_owner","dispatch","CtrlTopicCreate","console","forEach","user_id","CtrlTopicInvite","CtrlTopicJoin","CtrlTopicLeave","Login","trueFalse","Logout","ParserAuth","jwt","localStorage","setItem","Jwt","Register","setLocalItem","key","value","getLocalItem","getItem","parse","makeLocalUserTopicName","getLocalUserTopic","localTopic","getTopic","MetaSelectTopic","topics","updateLocalUserTopics","owner","MetaSelectUser","GET_LOCAL_FRIENDS_ALL","user_id_all","push","f","isExistUser","setLocalUpdateUser","proflie","setLocalAddNewUser","MetaSelectMessage","setLocalTopicMessages","writer","replyReceiveAck","ParserMessage","created_at","Date","message_type","Writer","notifyRequestMentionCreate","web","WebClient","process","sendMessageToSlack","error_message","a","chat","postMessage","channel","ts","GetUUID","ReceiveData","Logger","ack","status_code","SendMessageTraceUpdate","UpdateSessionLogin","cause","getToastPopup","ParserMeta","ParserNotify","SendMessageTrace","UpdateSessionJwtToken","UpdateSessionUser","userId","userName","InsertAllFriends","InsertMyTopic","DropMyTopics","DeleteMyTopicByTopicId","InsertUserByTopicId","InsertUserChangeInfo","DeleteUserByTopicId","InsertMessageByTopicId","InsertMessagesByTopicId","SelecTopicById","updateProfileId","addReplyMessage","user_name","addMentionMessage","generalActions","UpdateIsWriteLog","UpdateLogin","UpdateJwt","UpdateUser","ResetAllStates","DeleteAllTopics","DeleteTopicByTopicId","InsertUserById","InsertNewUserById","delIdx","idx","InsertUserChange","DeleteUserById","InsertMessageById","InsertMessagesById","updateMessageAddFile","WebsocketUpdateStatus","webSocketStatus","WebsocketUpdateWriter","sendMessage","WebsocketReceiveData","WebsocketSendData","WebsocketSendChatMessage","UpdateProfile","addProfileImg","AddReply","AddMention","StoreContext","createContext","StoreProvider","children","useReducer","actions","viewActions","selecTopic","getToast","getAllTopics","topicsArr","getTopicUsers","usersArr","getImageBlob","isShowChatboxLoading","isHideSignup","isHideLogin","getProfileImg","getReplyContent","isShowPopupMessageItems","isShowPopupNotify","tempSaveMentionUsers","tempSaveMsgForRelay","tempSaveMsgForMention","setReplyInfo","replies","setMentionInfo","mentions","useActions","useEffect","Provider","Header","isShowNavi","setIsShowNavi","useContext","className","src","alt","isshow","onClick","React","memo","Wrapper","Contents","Navigation","confirm","removeItem","MyList","isactive","AllList","setViewType","useState","topicRemainder","setTopicRemainder","Topics","useCallback","clickJoin","i","topicid","all","setTimeout","fileUrlCreater","getFile","URL","createObjectURL","Blob","chkarr","ProfileDownload","server_url","callback","url","axios","method","responseType","headers","then","res","fileReader","FileReader","readAsDataURL","onload","catch","UserList","localUserImg","imgBlob","setLocalAddUserProfile","ListNavi","viewType","changeClassName","typeName","title","CreateTopic","topicName","setTopicName","usePrivate","setUsePrivate","inputRef","useRef","onChange","target","valuecheck","ref","checked","private","alert","current","List","chatRef","scrollTop","isoverflow","ChatHeader","PopupMessage","setIsShowPopupMessage","getClickMessage","whoIsClickMsg","closePopup","copyRef","select","execCommand","readOnly","ChatReciever","timer","msgAll","setMsgAll","isShowPopupMessage","setGetClickMessage","setWhoIsClickMsg","localUserTopic","openTopic","actionForPopup","changeBlobToFile","fileId","fileType","error","showMesssagePopup","event","clearTimeout","actionToFindMessage","reply_id","getMessageDOM","getElementById","classList","add","remove","getReplyInformation","is_reply","reply_message","m","updateFileByMessage","roomMessages","getImage","reader","onloadend","moveScrollToBottom","scrollHeight","clientHeight","MsgFile","href","download","MsgMention","MsgLeft","onMouseUp","onMouseDown","reply_content","MsgCenter","MsgRight","Emoji","viewEmoji","setViewEmoji","setHaveEmoji","EmojiList","EmojiData","emoji","FileSendAfterUpload","mime","SearchUsers","msgRef","setShowSearchUsers","Users","focus","clickGetUser","ItemReply","ItemRelay","activeTab","setActiveTab","elem","relay_to_topicid","Number","input","String","sendToTopic","ChatSender","haveEmoji","setMessage","showSearchUsers","newMessage","choice_user","add_msg","validateMentionUsers","result_users","onChangeMessage","onSend","sequenceId","getMention","isMention","usersId","getUser","filename","files","formData","FormData","append","statusText","config","placeholder","onKeyDown","PopupInvite","setUser","chkUser","clickUser","topicUserArr","newUser","slice","PopupUsers","EmptyCover","Chat","Signup","setProfile","clickGoToLogin","useForm","register","handleSubmit","errors","watch","formState","fileUrl","createElement","onSubmit","required","autoComplete","Cat","xmlns","xmlnsXlink","viewBox","cx","cy","d","fill","transform","xlinkHref","points","stroke","strokeLinecap","strokeLinejoin","strokeWidth","strokeDasharray","style","mixBlendMode","Notify","goToTopicMessage","MsgReply","BtnViewNotify","ViewApp","agent","some","browserid","UID","completeID","deviceDivider","newUserIndex","GET_LOCAL_USER_TOPIC","replySet","Set","mentionSet","size","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","WebsocketContext","handleWebsocketClose","App","useWebSocket","shouldReconnect","closeEvent","reconnectAttempts","reconnectInterval","lastMessage","readyState","getWebSocket","connectionStatus","ReadyState","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","close","InitializeWebsocket","useMemo","ReactDOM","render","fallback","errorHandler","errorInfo"],"mappings":"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","file":"static/js/main.4e0d891d.chunk.js","sourcesContent":["export const TYPE_INSERT_USER_BY_TOPIC_ID = \"TYPE_INSERT_USER_BY_TOPIC_ID\"\r\nexport const TYPE_INSERT_ALL_FRIENDS = \"TYPE_INSERT_ALL_FRIENDS\"\r\nexport const TYPE_INSERT_MESSAGE_BY_TOPIC_ID = \"TYPE_INSERT_MESSAGE_BY_TOPIC_ID\"\r\nexport const TYPE_UPDATE_MESSAGE_BY_TOPIC_ID = \"TYPE_UPDATE_MESSAGE_BY_TOPIC_ID\"\r\nexport const TYPE_INSERT_MESSAGES_BY_TOPIC_ID = \"TYPE_INSERT_MESSAGES_BY_TOPIC_ID\"\r\n\r\nexport const TYPE_INSERT_MY_TOPIC = \"TYPE_INSERT_MY_TOPIC\"\r\nexport const TYPE_INSERT_ALL_TOPIC = \"TYPE_INSERT_ALL_TOPIC\"\r\nexport const TYPE_INSERT_USER_CHANGE_INFO = \"TYPE_INSERT_USER_CHANGE_INFO\"\r\n\r\nexport const TYPE_ADD_SEND_MESSAGE_IN_TRACE = \"TYPE_ADD_SEND_MESSAGE_IN_TRACE\"\r\nexport const TYPE_UPDATE_SEND_MESSAGE_IN_TRACE = \"TYPE_UPDATE_SEND_MESSAGE_IN_TRACE\"\r\n\r\nexport const TYPE_DELETE_MY_TOPIC_BY_TOPIC_ID = \"TYPE_DELETE_MY_TOPIC_BY_TOPIC_ID\"\r\nexport const TYPE_DELETE_USER_BY_TOPIC_ID = \"TYPE_DELETE_USER_BY_TOPIC_ID\"\r\nexport const TYPE_DROP_MY_TOPICS = \"TYPE_DROP_MY_TOPICS\"\r\nexport const TYPE_DROP_ALL_FRIENDS = \"TYPE_DELETE_ALL_FRIENDS\"\r\n\r\nexport const TYPE_RESET = \"TYPE_RESET\"\r\n\r\nexport const TYPE_UPDATE_PROFILE = \"TYPE_UPDATE_PROFILE\";\r\n\r\n// export const TYPE_WEBSOCKET_INITIALIZE = \"TYPE_WEBSOCKET_INITIALIZE\"\r\nexport const TYPE_UPDATE_IS_WRITE_LOG = \"TYPE_UPDATE_IS_WRITE_LOG\"\r\nexport const TYPE_UPDATE_WEBSOCKET_STATUS = \"TYPE_UPDATE_WEBSOCKET_STATUS\"\r\nexport const TYPE_UPDATE_SESSION_LOGIN = \"TYPE_SESSION_UPDATE_LOGIN\"\r\nexport const TYPE_UPDATE_SESSION_JWT = \"TYPE_SESSION_UPDATE_JWT\"\r\nexport const TYPE_UPDATE_SESSION_USER = \"TYPE_SESSION_UPDATE_USER\"\r\n\r\n\r\nexport const TYPE_LOGGING_RAW = \"TYPE_LOGGING_RAW\"\r\nexport const TYPE_LOGGING_STATUS = \"TYPE_LOGGING_STATUS\"\r\n\r\nexport const REQUEST_WHO_ALONE = \"alone\"\r\nexport const REQUEST_WHO_INVITE = \"invite\"\r\n\r\nexport const REQUEST_WHAT_TOPIC = \"topic\"\r\nexport const REQUEST_WHAT_USER = \"user\"\r\nexport const REQUEST_WHAT_MESSAGE = \"message\"\r\nexport const REQUEST_WHAT_SESSION = \"session\"\r\nexport const REQUEST_WHAT_REPLY = \"reply\"\r\nexport const REQUEST_WHAT_MENTION = \"mention\"\r\nexport const REQUEST_WHAT_JWT = \"jwt\"\r\n\r\nexport const REQUEST_HOW_INVITE = \"invite\"\r\nexport const REQUEST_HOW_JOIN = \"join\"\r\nexport const REQUEST_HOW_CREATE = \"create\"\r\nexport const REQUEST_HOW_LEAVE = \"leave\"\r\nexport const REQUEST_HOW_LOGIN = \"login\"\r\nexport const REQUEST_HOW_LOGOUT = \"logout\"\r\nexport const REQUEST_HOW_SELECT = \"select\"\r\nexport const REQUEST_HOW_SEND = \"send\"\r\nexport const REQUEST_HOW_ACK = \"ack\"\r\nexport const REQUEST_HOW_CTRL = \"ctrl\"\r\nexport const REQUEST_HOW_READ = \"read\"\r\nexport const REQUEST_HOW_REGISTER = \"register\"\r\n\r\nexport const REQUEST_USING_ID = \"id\"\r\nexport const REQUEST_USING_ME = \"me\"\r\nexport const REQUEST_USING_TOKEN = \"token\"\r\n\r\nexport const REQUEST_CUSTOM_NOTIFY_REPLY = \"reply\"\r\nexport const REQUEST_CUSTOM_NOTIFY_MENTION = \"mention\"\r\nexport const REQUEST_CUSTOM_NOTIFY_REPLY_MENTION = \"reply-mention\"\r\n\r\n\r\nexport const TRACE_RESULT_SEND = \"send\"\r\nexport const TRACE_RESULT_PROC = \"proc\"\r\nexport const TRACE_RESULT_FAIL = \"fail\"\r\nexport const TRACE_RESULT_DONE = \"done\"\r\n\r\nexport const TRACE_STATUS_SEND = \"send\"\r\nexport const TRACE_STATUS_ACK = \"ack\"\r\nexport const TRACE_STATUS_DONE = \"done\"\r\n\r\nexport const STRING_CTRL_CREATE_CONTENT = \"채팅방이 생성되었습니다.\"\r\n\r\nexport const TYPE_SELECT_TOPIC_ID = \"TYPE_SELECT_TOPIC_ID\"\r\nexport const TYPE_INSERT_NEW_USER_BY_TOPIC_ID = \"TYPE_INSERT_NEW_USER_BY_TOPIC_ID\"\r\nexport const TYPE_UPDATE_MESSAGE_ADD_FILE = \"TYPE_UPDATE_MESSAGE_ADD_FILE\"\r\nexport const TYPE_CHANGE_MSG_BY_FILE = \"TYPE_CHANGE_MSG_BY_FILE\"\r\n\r\nexport const TYPE_ADD_REPLY = \"TYPE_ADD_REPLY\"\r\nexport const TYPE_ADD_MENTION = \"TYPE_ADD_MENTION\"\r\n\r\n/* viewActions types */\r\nexport const HIDE_LOGIN = \"HIDE_LOGIN\"\r\nexport const HIDE_SIGNUP = \"HIDE_SIGNUP\"\r\nexport const GET_PROFILE_IMG = \"GET_PROFILE_IMG\"\r\nexport const GET_REPLY_CONTENT = \"GET_REPLY_CONTENT\"\r\nexport const TYPE_ADD_PROFILE_IMG = \"TYPE_ADD_PROFILE_IMG\"\r\nexport const IS_SHOW_POPUP_MSG_ITEMS = \"IS_SHOW_POPUP_MSG_ITEMS\"\r\nexport const IS_SHOW_CHATBOX_LOADING = \"IS_SHOW_CHATBOX_LOADING\"\r\nexport const GET_IMAGE_BLOB = \"GET_IMAGE_BLOB\"\r\nexport const GET_TOPIC_USERS = \"GET_TOPIC_USERS\"\r\nexport const GET_ALL_TOPICS = \"GET_ALL_TOPICS\"\r\nexport const IS_SHOW_CHAT_MEBMER = \"IS_SHOW_CHAT_MEBMER\"\r\nexport const IS_SHOW_INVITE = \"IS_SHOW_INVITE\"\r\nexport const IS_SHOW_CHAT_MOBILE = \"IS_SHOW_CHAT_MOBILE\"\r\nexport const IS_SHOW_CREATE_TOPIC = \"IS_SHOW_CREATE_TOPIC\"\r\nexport const IS_SHOW_POPUP_NOTIFY = \"IS_SHOW_POPUP_NOTIFY\"\r\nexport const TEMP_SAVE_MENTION_USERS = \"TEMP_SAVE_MENTION_USERS\"\r\nexport const UPDATE_TEMP_SAVE_MENTION_USERS = \"UPDATE_TEMP_SAVE_MENTION_USERS\"\r\nexport const TEMP_SAVE_MSG_FOR_REALY = \"TEMP_SAVE_MSG_FOR_REALY\"\r\nexport const TEMP_SAVE_MSG_FOR_MENTION = \"TEMP_SAVE_MSG_FOR_MENTION\"\r\nexport const GET_TOAST_MSG = \"GET_TOAST_MSG\"\r\nexport const SET_REPLY_INFO = \"SET_REPLY_INFO\"\r\nexport const SET_MENTION_INFO = \"SET_MENTION_INFO\"\r\n","import {\r\n    TYPE_ADD_SEND_MESSAGE_IN_TRACE,\r\n    TYPE_DELETE_MY_TOPIC_BY_TOPIC_ID,\r\n    TYPE_DELETE_USER_BY_TOPIC_ID,\r\n    TYPE_DROP_ALL_FRIENDS,\r\n    TYPE_DROP_MY_TOPICS,\r\n    TYPE_INSERT_ALL_FRIENDS,\r\n    TYPE_INSERT_ALL_TOPIC,\r\n    TYPE_INSERT_MESSAGE_BY_TOPIC_ID,\r\n    TYPE_INSERT_MESSAGES_BY_TOPIC_ID,\r\n    TYPE_INSERT_MY_TOPIC,\r\n    TYPE_INSERT_USER_BY_TOPIC_ID,\r\n    TYPE_LOGGING_RAW,\r\n    TYPE_LOGGING_STATUS,\r\n    TYPE_RESET,\r\n    TYPE_UPDATE_IS_WRITE_LOG,\r\n    TYPE_UPDATE_MESSAGE_BY_TOPIC_ID,\r\n    TYPE_UPDATE_SEND_MESSAGE_IN_TRACE,\r\n    TYPE_UPDATE_SESSION_JWT,\r\n    TYPE_UPDATE_SESSION_LOGIN,\r\n    TYPE_UPDATE_SESSION_USER,\r\n    TYPE_UPDATE_WEBSOCKET_STATUS,\r\n    TYPE_UPDATE_PROFILE,\r\n    TYPE_ADD_PROFILE_IMG,\r\n    TYPE_INSERT_USER_CHANGE_INFO,\r\n    TYPE_INSERT_NEW_USER_BY_TOPIC_ID,\r\n    TYPE_UPDATE_MESSAGE_ADD_FILE,\r\n    TYPE_ADD_REPLY,\r\n    TYPE_ADD_MENTION\r\n} from \"../globals\";\r\n\r\nconst ws = document.location.host.split(':')[0]==='localhost' ? \"ws://\" : \"wss://\";\r\n\r\n// link.nanoit.kr\r\nexport const generalStates = {\r\n    DEFAULT_USE_LOGGER: true,\r\n    DEFAULT_CHAT_SERVER_URL: \"https://\" + document.location.host,\r\n    DEFAULT_WEBSOCKET_SERVER_URL: ws + document.location.host + \"/ws\",\r\n    DEFAULT_NEXT_RAW_LOG_ID: 1,\r\n    DEFAULT_NEXT_STATUS_LOG_ID: 1,\r\n    DEFAULT_RAW_LOG: [],\r\n    DEFAULT_STATUS_LOG: [],\r\n\r\n    // WS\r\n    WEBSOCKET_STATUS: \"NOT CONNECTED\",\r\n\r\n    // INFO\r\n    SESSION_JWT_TOKEN: null,\r\n    SESSION_IS_LOGIN: false,\r\n    SESSION_LOGIN_COUNT: 0,\r\n    SESSION_USER_INFO: {\r\n        id: null,\r\n        name: null\r\n    },\r\n\r\n    SEND_MESSAGE_TRACE: [],\r\n    FRIENDS_ALL: [],\r\n    TOPICS_ALL: [],\r\n    TOPICS_MY: [],\r\n    REPLY:[],\r\n    MENTION:[]\r\n}\r\n\r\nexport const generalReducer = (state, action) => {\r\n    switch (action.type) {\r\n        /**\r\n         * 기록된 MSG, CTRL, AUTH, META, FILE 타입의 메시지 상태 업데이트\r\n         */\r\n        case TYPE_UPDATE_SEND_MESSAGE_IN_TRACE:\r\n            return {\r\n                ...state,\r\n                SEND_MESSAGE_TRACE: [\r\n                    ...(state.SEND_MESSAGE_TRACE.map(trace => {\r\n                        if (trace.uuid === action.message.uuid) {\r\n                            trace.result = action.message.result\r\n                            trace.status = action.message.status\r\n                            return trace\r\n                        } else {\r\n                            return trace\r\n                        }\r\n                    }))\r\n                ]\r\n            }\r\n        /**\r\n         * MSG, CTRL, AUTH, META, FILE 타입의 메시지 추적용 LOW 추가\r\n         */\r\n        case TYPE_ADD_SEND_MESSAGE_IN_TRACE:\r\n            return {\r\n                ...state,\r\n                SEND_MESSAGE_TRACE: [\r\n                    ...state.SEND_MESSAGE_TRACE,\r\n                    action.message\r\n                ]\r\n            }\r\n        /**\r\n         * 모든 정보 리셋\r\n         */\r\n        case TYPE_RESET:\r\n            return {\r\n                ...state,\r\n                SESSION_JWT_TOKEN: null,\r\n                SESSION_IS_LOGIN: false,\r\n                SESSION_USER_INFO: {\r\n                    id: null,\r\n                    name: null\r\n                },\r\n                FRIENDS_ALL: [],\r\n                TOPICS_ALL: [],\r\n                TOPICS_MY: [],\r\n            }\r\n        /**\r\n         * 상태 로그 로깅\r\n         */\r\n        case TYPE_LOGGING_STATUS:\r\n            return {\r\n                ...state,\r\n                DEFAULT_NEXT_STATUS_LOG_ID: state.DEFAULT_NEXT_STATUS_LOG_ID + 1,\r\n                DEFAULT_STATUS_LOG: [\r\n                    ...state.DEFAULT_STATUS_LOG,\r\n                    {\r\n                        id: state.DEFAULT_NEXT_STATUS_LOG_ID,\r\n                        text: action.log\r\n                    }\r\n                ]\r\n            }\r\n        /**\r\n         * RAW 로그 로깅\r\n         */\r\n        case TYPE_LOGGING_RAW:\r\n            return {\r\n                ...state,\r\n                DEFAULT_NEXT_RAW_LOG_ID: state.DEFAULT_NEXT_RAW_LOG_ID + 1,\r\n                DEFAULT_RAW_LOG: [\r\n                    ...state.DEFAULT_RAW_LOG, {id: state.DEFAULT_NEXT_RAW_LOG_ID, text: action.log}\r\n                ]\r\n            }\r\n        /**\r\n         * CLIENT WEBSOCKET SESSION이 로그인 된건지 여부 UPDATE\r\n         */\r\n        case TYPE_UPDATE_SESSION_LOGIN:\r\n            return {\r\n                ...state,\r\n                SESSION_IS_LOGIN: action.isLogin,\r\n                SESSION_LOGIN_COUNT: state.SESSION_LOGIN_COUNT + 1\r\n            }\r\n        /**\r\n         * JWT TOKEN 업데이트\r\n         */\r\n        case TYPE_UPDATE_SESSION_JWT:\r\n            return {\r\n                ...state,\r\n                SESSION_JWT_TOKEN: action.token\r\n            }\r\n        /**\r\n         * LOGIN USER 정보 업데이트\r\n         */\r\n        case TYPE_UPDATE_SESSION_USER:\r\n            return {\r\n                ...state,\r\n                SESSION_USER_INFO: action.user\r\n            }\r\n        /**\r\n         * 모든 친구 리스트 UPDATE\r\n         */\r\n        case TYPE_INSERT_ALL_FRIENDS:\r\n            return {\r\n                ...state,\r\n                FRIENDS_ALL: [\r\n                    ...(state.FRIENDS_ALL.find(friend => friend.id === action.user.id) !== undefined ? state.FRIENDS_ALL : state.FRIENDS_ALL.concat(action.user))\r\n                ]\r\n            }\r\n        /**\r\n         * 로그 기록 출력 여부\r\n         */\r\n        case TYPE_UPDATE_IS_WRITE_LOG:\r\n            return {\r\n                ...state,\r\n                DEFAULT_USE_LOGGER: action.isWriteLog\r\n            }\r\n        /**\r\n         *\r\n         */\r\n        case TYPE_UPDATE_WEBSOCKET_STATUS:\r\n            return {\r\n                ...state,\r\n                WEBSOCKET_STATUS: action.status\r\n            }\r\n        /**\r\n         * CREATE TOPIC\r\n         * - 중복 TOPIC 존재시 기존 TOPIC을 대체함\r\n         */\r\n        case TYPE_INSERT_ALL_TOPIC:\r\n            return {\r\n                ...state,\r\n                TOPICS_ALL: [\r\n                    ...(state.TOPICS_ALL.filter(topic => topic.id !== action.topic.id).concat(action.topic))\r\n                ]\r\n            }\r\n        /**\r\n         * CREATE TOPIC\r\n         * - 중복 TOPIC 존재시 기존 TOPIC을 대체함\r\n         */\r\n        case TYPE_INSERT_MY_TOPIC:\r\n            return {\r\n                ...state,\r\n                TOPICS_MY: [\r\n                    ...(state.TOPICS_MY.filter(topic => topic.id !== action.topic.id).concat(action.topic))\r\n                ]\r\n            }\r\n        case TYPE_DROP_ALL_FRIENDS:\r\n            return {\r\n                ...state,\r\n                FRIENDS_ALL: []\r\n            }\r\n        case TYPE_DROP_MY_TOPICS:\r\n            return {\r\n                ...state,\r\n                TOPICS_MY: []\r\n            }\r\n        case TYPE_DELETE_MY_TOPIC_BY_TOPIC_ID:\r\n            return {\r\n                ...state,\r\n                TOPICS_MY: [\r\n                    ...(state.TOPICS_MY.filter(topic => topic.id !== action.topic.id))\r\n                ]\r\n            }\r\n        case TYPE_INSERT_USER_BY_TOPIC_ID:\r\n            return {\r\n                ...state,\r\n                TOPICS_MY: [\r\n                    ...(state.TOPICS_MY.map(topic => {\r\n                        if (topic.id === action.topic.id) {\r\n                            return {\r\n                                ...topic,\r\n                                users:action.topic.users\r\n                            }\r\n                        } else {\r\n                            return topic\r\n                        }\r\n                    }))\r\n                ]\r\n            }\r\n        case TYPE_INSERT_NEW_USER_BY_TOPIC_ID:\r\n            return {\r\n                ...state,\r\n                TOPICS_MY: [\r\n                    ...(state.TOPICS_MY.map(topic => {\r\n                        if (topic.id === action.topicId) {\r\n                            return {\r\n                                ...topic,\r\n                                users:[\r\n                                    ...(topic.users.map(user => {\r\n                                        return user!==undefined && user\r\n                                    })),\r\n                                    action.user\r\n                                ]\r\n                            }\r\n                        } else {\r\n                            return topic\r\n                        }\r\n                    }))\r\n                ]\r\n            }\r\n        case TYPE_INSERT_USER_CHANGE_INFO:\r\n            return {\r\n                ...state,\r\n                TOPICS_MY: [\r\n                    ...(state.TOPICS_MY.map(topic => {\r\n\r\n                        // 초대한 사용자가 아니라면 모두 return (중복제거)\r\n                        try{\r\n                            if( topic.users?.find(e => e.id === action.user.id) !== undefined ) return topic;\r\n                            if( topic.users === undefined ) return topic;\r\n                        }catch(e){\r\n                            return topic\r\n                        }\r\n\r\n                        if (topic.id === action.topic.id) {\r\n\r\n                            return {\r\n                                ...topic,\r\n                                users:[\r\n                                    ...topic.users,\r\n                                    state.FRIENDS_ALL.find(e=> e.id === action.user.id)\r\n                                ]\r\n                            }\r\n                        } else {\r\n                            return topic\r\n                        }\r\n                    }))\r\n                ]\r\n            }\r\n        case TYPE_DELETE_USER_BY_TOPIC_ID:\r\n            return {\r\n                ...state,\r\n                TOPICS_MY: [\r\n                    ...(state.TOPICS_MY.map(topic => {\r\n                        if (topic.id === action.topic.id) {\r\n                            return {...topic, users: topic.users.filter(user => user.id !== action.user.id)}\r\n                        } else {\r\n                            return topic\r\n                        }\r\n                    }))\r\n                ]\r\n            }\r\n        /**\r\n         * 채팅방에 새로운 메시지 INSERT 하기\r\n         * - 재전송을 위해 SEND_MESSAGE_TRACE에서 JSON을 그대로 재발송\r\n         * - 재발송시 INSERT MESSAGE가 실행되면 UUID로 확인 후 INSERT 메시지가 있으면 그대로 둠\r\n         * - UUID가 없으면 새로운 MESSAGE INSERT\r\n         * - 수정 완 210727\r\n         */\r\n        case TYPE_INSERT_MESSAGE_BY_TOPIC_ID:\r\n            return {\r\n                ...state,\r\n                TOPICS_MY: [\r\n                    // ...state.TOPICS_MY.map(topic => {\r\n                    //     topic.id !== action.topic_id ? topic : topi\r\n                    // })\r\n                    ...(state.TOPICS_MY.map(topic => {\r\n                                if (topic.id === action.topic_id && topic.messages !== undefined  ) {\r\n                                    if (topic.messages.find(message => message.clint_uuid === action.message.clint_uuid) === undefined ) {\r\n                                        return {\r\n                                            ...topic,\r\n                                            messages: [\r\n                                                ...topic.messages,\r\n                                                action.message\r\n                                            ]\r\n                                        }\r\n                                    } else {\r\n                                        return topic\r\n                                    }\r\n                                } else {\r\n                                    return topic\r\n                                }\r\n                            }\r\n                        )\r\n                    )\r\n                ]\r\n            }\r\n        /**\r\n         * 채팅방에 메세지 리스트 INSERT\r\n         * - META에서 사용\r\n         * - 수정 완 210727\r\n         */\r\n        case TYPE_INSERT_MESSAGES_BY_TOPIC_ID:\r\n            return {\r\n                ...state,\r\n                TOPICS_MY: [\r\n                    ...(state.TOPICS_MY.map(topic => {\r\n                                if (topic.id === action.topic.id) {\r\n                                    return {\r\n                                        ...topic,\r\n                                        messages: action.topic.messages\r\n                                    }\r\n                                } else {\r\n                                    return topic\r\n                                }\r\n                            }\r\n                        )\r\n                    )\r\n                ]\r\n            }\r\n        case TYPE_UPDATE_MESSAGE_ADD_FILE:\r\n            return {\r\n                ...state,\r\n                TOPICS_MY: [\r\n                    ...(state.TOPICS_MY.filter(t => t.id !== action.topic.id)),\r\n                    {\r\n                        ...action.topic,\r\n                        messages:[\r\n                            ...(action.topic.messages.filter(t => t.sequence_id < action.sequence_id)),\r\n                            {\r\n                                ...(action.topic.messages.filter(t => t.sequence_id === action.sequence_id))[0],\r\n                                file:action.file\r\n                            },\r\n                            ...(action.topic.messages.filter(t => t.sequence_id > action.sequence_id)),\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        case TYPE_UPDATE_PROFILE:\r\n            return {\r\n                ...state,\r\n                FRIENDS_ALL: [\r\n                    ...(state.FRIENDS_ALL.map(user => {\r\n                                if (user.id === action.userid) {\r\n                                    return {\r\n                                        ...user,\r\n                                        profile: {\r\n                                            file_id:action.fileid\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    return user\r\n                                }\r\n                            }\r\n                        )\r\n                    )\r\n                ]\r\n            }\r\n        case TYPE_ADD_PROFILE_IMG:\r\n            return {\r\n                ...state,\r\n                FRIENDS_ALL: [\r\n                    ...(state.FRIENDS_ALL.map(user => {\r\n                                if (user.id === action.userid) {\r\n                                    \r\n                                    return {\r\n                                        ...user,\r\n                                        profile:{\r\n                                            file_id:action.fileid,\r\n                                            img:action.img\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    return user\r\n                                }\r\n                            }\r\n                        )\r\n                    )\r\n                ]\r\n            }\r\n        /**\r\n         * 메시지 전송시 RESPONSE를 기다리는 응답 시간 때문에 UUID 기반으로 STATUS UPDATE용 REDUCER\r\n         * - 채팅방에서 채팅할때 메시지를 전송함\r\n         * - 전송된 메세지는 CLIENT의 채팅방 메시지에 바로 입력됨\r\n         * - 서버에서 처리된 메시지가 RESPONSE 응답으로 들어오면 UUID 기반으로 SEQUENCE ID와 STATUS를 업데이트 함\r\n         */\r\n        case TYPE_UPDATE_MESSAGE_BY_TOPIC_ID:\r\n            return {\r\n                ...state,\r\n                TOPICS_MY: [\r\n                    ...(state.TOPICS_MY.map(topic => {\r\n                                if (topic.id === action.topic_id) {\r\n                                    topic.messages.map(message => {\r\n                                        if (message.uuid === action.message.uuid) {\r\n                                            return {\r\n                                                ...message,\r\n                                                sequence_id: action.message.sequence_id,\r\n                                                status: action.message.status\r\n                                            }\r\n                                        } else {\r\n                                            return message\r\n                                        }\r\n                                    })\r\n                                    // return {\r\n                                    //     ...topic,\r\n                                    //     messages: [\r\n                                    //         ...(topic.messages.map(message => {\r\n                                    //             if (message.uuid === action.message.uuid) {\r\n                                    //                 message.sequence_id = action.message.sequence_id\r\n                                    //                 message.status = action.message.status\r\n                                    //                 return message\r\n                                    //             } else {\r\n                                    //                 return message\r\n                                    //             }\r\n                                    //         }))\r\n                                    //     ]\r\n                                    // }\r\n                                }\r\n                                return topic\r\n                            }\r\n                        )\r\n                    )\r\n                ]\r\n            }\r\n        // REPLY, MENTION\r\n        case TYPE_ADD_REPLY:\r\n            return {\r\n                ...state,\r\n                REPLY:[\r\n                    ...(state.REPLY.filter(r => r.notify_id !== action.notify_id)),\r\n                    {\r\n                        notify_id:action.notify_id,\r\n                        topic_id:action.topic_id,\r\n                        from_user_id:action.from_user_id,\r\n                        from_user_name:action.from_user_name,\r\n                        sequence_id:action.sequence_id,\r\n                    }\r\n                ]\r\n            }\r\n        case TYPE_ADD_MENTION:\r\n            return {\r\n                ...state,\r\n                MENTION:[\r\n                    ...(state.MENTION.filter(r => r.notify_id !== action.notify_id)),\r\n                    {\r\n                        notify_id:action.notify_id,\r\n                        topic_id:action.topic_id,\r\n                        from_user_id:action.from_user_id,\r\n                        from_user_name:action.from_user_name,\r\n                        sequence_id:action.sequence_id,\r\n                    }\r\n                ]\r\n            }\r\n        default:\r\n            return {\r\n                ...state,\r\n                DEFAULT_NEXT_RAW_LOG_ID: state.DEFAULT_NEXT_RAW_LOG_ID + 1,\r\n                DEFAULT_RAW_LOG: [\r\n                    ...state.DEFAULT_RAW_LOG,\r\n                    {\r\n                        id: state.DEFAULT_NEXT_RAW_LOG_ID,\r\n                        text: \"[REDUCER-GENERAL] ERROR PARSE \" + JSON.stringify(action)\r\n                    }\r\n                ]\r\n            }\r\n    }\r\n}","import { SignalCellularNullRounded } from \"@material-ui/icons\";\r\nimport {\r\n    TYPE_SELECT_TOPIC_ID,\r\n    HIDE_SIGNUP,\r\n    HIDE_LOGIN,\r\n    GET_PROFILE_IMG,\r\n    GET_REPLY_CONTENT,\r\n    IS_SHOW_POPUP_MSG_ITEMS,\r\n    IS_SHOW_CREATE_TOPIC,\r\n    IS_SHOW_CHAT_MOBILE,\r\n    IS_SHOW_INVITE,\r\n    IS_SHOW_CHAT_MEBMER,\r\n    GET_ALL_TOPICS,\r\n    GET_TOPIC_USERS,\r\n    GET_IMAGE_BLOB,\r\n    IS_SHOW_CHATBOX_LOADING,\r\n    IS_SHOW_POPUP_NOTIFY,\r\n    TEMP_SAVE_MENTION_USERS,\r\n    TEMP_SAVE_MSG_FOR_REALY,\r\n    TEMP_SAVE_MSG_FOR_MENTION,\r\n    GET_TOAST_MSG,\r\n    SET_REPLY_INFO,\r\n    SET_MENTION_INFO,\r\n} from \"../globals\";\r\n\r\n\r\nexport const viewStates = {\r\n    selectopicid:0,\r\n    isShowCreateTopic:false,\r\n    isShowChatMobile:false,\r\n    isShowInvite:false,\r\n    isShowChatUser:false,\r\n    isChatboxLoading:false,\r\n    isShowNotify:false,\r\n    topicsAll:[\r\n        /*\r\n            {\r\n                owner:number,\r\n                sequence_id:number,\r\n                topic_id:number,\r\n                topic_name:string\r\n            }\r\n        */\r\n    ],\r\n    topicUsers:[\r\n        /*\r\n            {\r\n                user_id:number,\r\n                user_name:string,\r\n            }\r\n        */\r\n    ],\r\n    sendImage:null,\r\n    hideSignup:false,\r\n    hideLogin:false,\r\n    profileImg:null,\r\n    replyContent:{\r\n        from_user_id:0,\r\n        from_user_name:'',\r\n        content:'',\r\n        sequence_id:0\r\n    },\r\n    popupMessageItems:{\r\n        reply:false,\r\n        relay:false,\r\n        delete:false,\r\n    },\r\n    mentionUsers:[],\r\n    msgForRelay:'',\r\n    msgForMention:[],\r\n    /* replies:[],\r\n    mentions:[], */\r\n    getToastMsg:null,\r\n};\r\n\r\nexport const viewReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case TYPE_SELECT_TOPIC_ID:\r\n            return {\r\n                ...state,\r\n                selectopicid:action.selectopicid,\r\n            }\r\n        case IS_SHOW_CREATE_TOPIC:\r\n            return {\r\n                ...state,\r\n                isShowCreateTopic:action.isShow,\r\n            }\r\n        case IS_SHOW_CHAT_MOBILE:\r\n            return {\r\n                ...state,\r\n                isShowChatMobile:action.isShow,\r\n            }\r\n        case IS_SHOW_INVITE:\r\n            return {\r\n                ...state,\r\n                isShowInvite:action.isShow,\r\n            }\r\n        case IS_SHOW_CHAT_MEBMER:\r\n            return {\r\n                ...state,\r\n                isShowChatUser:action.isShow,\r\n            }\r\n        case IS_SHOW_POPUP_NOTIFY:\r\n            return {\r\n                ...state,\r\n                isShowNotify:action.isShow,\r\n            }\r\n        case GET_TOAST_MSG:\r\n            return {\r\n                ...state,\r\n                getToastMsg:action.msg,\r\n            }\r\n        case GET_ALL_TOPICS:\r\n            return {\r\n                ...state,\r\n                topicsAll:action.topicsAll,\r\n            }\r\n        case GET_TOPIC_USERS:\r\n            return {\r\n                ...state,\r\n                topicUsers:action.topicUsers,\r\n            }\r\n        case GET_IMAGE_BLOB:\r\n            return {\r\n                ...state,\r\n                sendImage:action.sendImage,\r\n            }\r\n        case IS_SHOW_CHATBOX_LOADING:\r\n            return {\r\n                ...state,\r\n                isChatboxLoading:action.isShow,\r\n            }\r\n        case HIDE_SIGNUP:\r\n            return {\r\n                ...state,\r\n                hideSignup:action.isShow,\r\n            }\r\n        case HIDE_LOGIN:\r\n            return {\r\n                ...state,\r\n                hideLogin:action.isShow,\r\n            }\r\n        case GET_PROFILE_IMG:\r\n            return {\r\n                ...state,\r\n                profileImg:action.file,\r\n            }\r\n        case GET_REPLY_CONTENT:\r\n            return {\r\n                ...state,\r\n                replyContent:action.msg,\r\n            }\r\n        case IS_SHOW_POPUP_MSG_ITEMS:\r\n            let data;\r\n            if( action.item === 'reply' ) {\r\n                data = { ...state.popupMessageItems, reply:action.isShow }\r\n            }else if( action.item === 'relay' ){\r\n                data = { ...state.popupMessageItems, relay:action.isShow }\r\n            }else if( action.item === 'delete' ){\r\n                data = { ...state.popupMessageItems, delete:action.isShow }\r\n            }\r\n            return {\r\n                ...state,\r\n                popupMessageItems:data\r\n            }\r\n        case TEMP_SAVE_MENTION_USERS:\r\n            return {\r\n                ...state,\r\n                mentionUsers:(\r\n                    !!action.user\r\n                ) ? (\r\n                    [\r\n                        ...(state.mentionUsers.filter(u => u.id !== action.user.id)),\r\n                        {\r\n                            id:action.user.id,\r\n                            name:action.user.auth.name\r\n                        }\r\n                    ]\r\n                ) : ( \r\n                    []\r\n                )\r\n            }\r\n        case TEMP_SAVE_MSG_FOR_REALY:\r\n            return {\r\n                ...state,\r\n                msgForRelay:action.msg\r\n            }\r\n        case TEMP_SAVE_MSG_FOR_MENTION:\r\n            return {\r\n                ...state,\r\n                msgForMention:action.msg\r\n            }\r\n        default:\r\n            return state\r\n        \r\n      /*   case SET_REPLY_INFO:\r\n        return {\r\n            ...state,\r\n            replies:action.replies\r\n        }\r\n        case SET_MENTION_INFO:\r\n        return {\r\n            ...state,\r\n            mentions:action.mentions\r\n        } */\r\n    }\r\n}","import {generalStates} from \"../reducers/generalReducer\";\r\nimport {viewStates} from \"../reducers/viewReducer\";\r\n\r\nexport const initialState = {\r\n    generalStates,\r\n    viewStates\r\n};","import {initialState} from \"../state/initialStates\";\r\nimport {generalReducer} from \"./generalReducer\";\r\nimport {viewReducer} from \"./viewReducer\";\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    return {\r\n        generalStates: generalReducer(state.generalStates, action),\r\n        viewStates: viewReducer(state.viewStates, action),\r\n    }\r\n};\r\n\r\nexport {initialState, reducer};","/*\r\n\r\n    NavigatorJS 0.2\r\n    https://github.com/hicTech/navigatorJs\r\n    www.hictech.com\r\n */\r\n\r\nvar navJS = {\r\n\r\n    toJSON: function() {\r\n        var json =  {\r\n            userAgent: this.userAgent(),\r\n\r\n            os: this.os(),\r\n\r\n            browser: {\r\n                name: this.browser(),\r\n                version: this.version(),\r\n                mobile: this.isMobile(),\r\n                desktop: this.isDesktop(),\r\n            },\r\n\r\n\r\n            screen: {\r\n                hd: this.isHD(),\r\n                pixelRatio: this.pixelRatio(),\r\n                landscape: this.isLandscape(),\r\n                portrait: this.isPortrait(),\r\n                touch: this.isTouch()\r\n            }\r\n        }\r\n\r\n        if( this.isIOS() ) {\r\n            json.ios = {\r\n                version: this.getIOSVersion(),\r\n                device: this.isIPhone()? 'iphone' : this.isIPad()? 'ipad' : undefined\r\n            }\r\n        }\r\n\r\n        return json;\r\n    },\r\n\r\n    os: function() {\r\n        if( this.isIOS() ) { return 'ios'; }\r\n        if( this.isAndroid() ) { return 'android'; }\r\n        if( this.isWindows() ) { return 'windows'; }\r\n        if( this.isUnix() ) { return 'unix'; }\r\n        if( this.isMac() ) { return 'mac'; }\r\n        if( this.isLinux() ) { return 'linux'; }\r\n        if( this.isBlackBerry() ) { return 'blackberry'; }\r\n        else return undefined;\r\n    },\r\n\r\n    browser: function() {\r\n        if ( this.isSafari() ) { return 'safari'; }\r\n        if ( this.isChrome() ) { return 'chrome'; }\r\n        if ( this.isIE() ) { return 'ie'; }\r\n        if ( this.isEdge() ) { return 'edge'; }\r\n        if ( this.isFirefox() ) { return 'firefox'; }\r\n        if ( this.isOpera() ) { return 'opera'; }\r\n        else return undefined;\r\n    },\r\n\r\n    userAgent: function () {\r\n        return navigator.userAgent;\r\n    },\r\n    browserName: function () {\r\n        var ua = this.userAgent(), tem,\r\n            M = ua.match(/(fxios|opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\r\n        if (/trident/i.test(M[1])) {\r\n            tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];\r\n            return 'IE ' + (tem[1] || '');\r\n        }\r\n        if (M[1] === 'Chrome') {\r\n            /*\r\n             * IE Edge has \"chrome\" as user agent and\r\n             * this check is mandatory at this point.\r\n             * \r\n             * If the check is passed the M variabled\r\n             * is replaced and the code continue like\r\n             * other browers. \r\n             */ \r\n            tem = ua.match(/(edge(?=\\/))\\/?\\s*(\\d+)/i);\r\n            if( !!tem ) {\r\n                M = tem;\r\n            }\r\n\r\n            else {\r\n                tem = ua.match(/\\bOPR\\/(\\d+)/)\r\n                if (tem != null) return 'Opera ' + tem[1];\r\n            }\r\n        }\r\n        M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];\r\n        if ((tem = ua.match(/version\\/(\\d+)/i)) != null) M.splice(1, 1, tem[1]);\r\n        return M.join(' ');\r\n    },\r\n\r\n    innerWidth:function(){\r\n        return window.innerWidth;\r\n    },\r\n\r\n    innerHeight:function(){\r\n        return window.innerHeight;\r\n    },\r\n\r\n    width:function(){\r\n        return window.screen.width;\r\n    },\r\n\r\n    height:function(){\r\n        return window.screen.height;\r\n    },\r\n\r\n\r\n\r\n    /* mobile detection */\r\n\r\n\r\n    isMobile: function () {\r\n        return this.userAgent().match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile|CRiOS|OPiOS|Mobile|FxiOS/i) != null;\r\n    },\r\n    isDesktop: function () {\r\n        return !this.isMobile();\r\n    },\r\n\r\n\r\n\r\n    /* desktop detection */\r\n\r\n\r\n    isSafari: function () {\r\n        return (this.userAgent().indexOf(\"Safari\") != -1 && navigator.vendor.indexOf(\"Apple Computer\") != -1 && !this.isChrome()) && !this.isFirefox() && !this.isOpera();\r\n    },\r\n    isChrome: function () {\r\n        return ((this.userAgent().indexOf(\"Chrome\") != -1 && navigator.vendor.indexOf(\"Google Inc\") != -1) || this.userAgent().indexOf(\"CriOS\") != -1) && !this.isOpera();\r\n    },\r\n    isIE: function () {\r\n        return this.browserName().toLowerCase().match(/ie|msie|iemobile/i) != null;\r\n    },\r\n    isEdge: function () {\r\n        return this.browserName().toLowerCase().match(/edge/i) != null;\r\n    },\r\n    isFirefox: function () {\r\n        return this.browserName().toLowerCase().match(/firefox|fxios/i) != null;\r\n\r\n    },\r\n    isOpera: function () {\r\n        return this.userAgent().toLowerCase().match(/opera|opr|opera mini|opios/i) != null || Object.prototype.toString.call(window.operamini) === \"[object OperaMini]\";\r\n    },\r\n\r\n\r\n\r\n\r\n    /* mobile browsers detection */\r\n\r\n\r\n    isMobileChrome: function () {\r\n        return (this.userAgent().toLowerCase().match(\"crios\") != null) || (this.isChrome() && this.isMobile())\r\n    },\r\n    isMobileSafari: function () {\r\n        return this.isMobile() && this.isSafari();\r\n    },\r\n    isMobileIE: function () {\r\n        return this.isMobile() && this.isIE();\r\n    },\r\n\r\n    isMobileOpera: function () {\r\n        return this.isMobile() && this.isOpera();\r\n    },\r\n\r\n    isMobileFirefox: function () {\r\n        return this.isMobile() && this.isFirefox();\r\n    },\r\n\r\n\r\n\r\n\r\n    /* HD resolution detection */\r\n\r\n\r\n    isHD: function () {\r\n        if (!window.devicePixelRatio)\r\n            return false;\r\n        return window.devicePixelRatio && window.devicePixelRatio > 1;\r\n    },\r\n    pixelRatio: function () {\r\n        if (!window.devicePixelRatio)\r\n            return 1;\r\n        return window.devicePixelRatio;\r\n    },\r\n\r\n\r\n    isIOS: function () {\r\n        return this.userAgent().match(/iPhone|iPad|iPod/i) != null;\r\n    },\r\n    isAndroid: function () {\r\n        return this.userAgent().match(/Android/i) != null;\r\n    },\r\n    isWindows: function () {\r\n        return this.userAgent().match(/Windows/i) != null;\r\n    },\r\n    isUnix: function () {\r\n        return this.userAgent().match(/Unix/i) != null;\r\n    },\r\n    isMac: function () {\r\n        return this.userAgent().match(/Mac/i) != null && !this.isIOS();\r\n    },\r\n    isLinux: function () {\r\n        return this.userAgent().match(/Linux/i) != null && !this.isAndroid();\r\n    },\r\n    isBlackBerry: function () {\r\n        return this.userAgent().match(/BlackBerry/i) != null;\r\n    },\r\n\r\n\r\n\r\n\r\n    isIPad: function () {\r\n        const isIPad = (/ipad/gi).test(navigator.platform);\r\n        return isIPad;\r\n    },\r\n    isIPhone: function () {\r\n        const isIPad = (/iphone/gi).test(navigator.platform);\r\n        return isIPad;\r\n    },\r\n    isLandscape: function () {\r\n        if (window.innerHeight < window.innerWidth) {\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n    isPortrait: function () {\r\n        return !this.isLandscape();\r\n    },\r\n    getIOSVersion: function () {\r\n        if (this.isIOS()) {\r\n            var OSVersion = navigator.appVersion.match(/OS (\\d+_\\d+)/i);\r\n            OSVersion = OSVersion[1] ? +OSVersion[1].replace('_', '.') : 0;\r\n            return OSVersion;\r\n        }\r\n        else\r\n            return false;\r\n    },\r\n    isStandAlone: function () {\r\n        if (!!navigator.standalone)\r\n            return navigator.standalone;\r\n        return false;\r\n    },\r\n\r\n\r\n    version: function () {\r\n        return this.browserName().replace(/^\\D+/g, '');\r\n    },\r\n\r\n\r\n    maxTouchPoints: function () {\r\n        if (navigator.maxTouchPoints)\r\n            return navigator.maxTouchPoints;\r\n    },\r\n\r\n    isTouch: function () {\r\n        return 'ontouchstart' in document.documentElement;\r\n    }\r\n}\r\n\r\n\r\nexport const device_info_create = () => {\r\n    let device_info = {}\r\n    device_info.browser_id = browser_id()\r\n    device_info.user_agent = navJS.userAgent()\r\n\r\n    if (navJS.isMobile()) {\r\n        device_info.device_id = browser_id()\r\n        device_info.platform = \"mobile\"\r\n    } else {\r\n        device_info.device_id = \"-1\"\r\n        device_info.platform = \"desktop\"\r\n    }\r\n\r\n    if (navJS.isIOS()) {\r\n        device_info.operation_system = \"ios\"\r\n    } else if (navJS.isMac()) {\r\n        device_info.operation_system = \"mac\"\r\n    } else if (navJS.isWindows()) {\r\n        device_info.operation_system = \"windows\"\r\n    } else if (navJS.isUnix()) {\r\n        device_info.operation_system = \"unix\"\r\n    } else if (navJS.isLinux()) {\r\n        device_info.operation_system = \"linux\"\r\n    } else if (navJS.isAndroid()) {\r\n        device_info.operation_system = \"android\"\r\n    } else if (navJS.isBlackBerry()) {\r\n        device_info.operation_system = \"blackberry\"\r\n    } else {\r\n        device_info.operation_system = \"etc\"\r\n    }\r\n\r\n    return device_info\r\n}\r\n\r\n\r\nexport const browser_id = () => {\r\n    let navigator_info = window.navigator;\r\n    let screen_info = window.screen;\r\n    let uid = navigator_info.mimeTypes.length;\r\n    uid += navigator_info.userAgent.replace(/\\D+/g, '');\r\n    uid += navigator_info.plugins.length;\r\n    uid += screen_info.height || '';\r\n    uid += screen_info.width || '';\r\n    uid += screen_info.pixelDepth || '';\r\n    return uid\r\n}\r\n","import {device_info_create} from \"../navjs\"\r\n\r\n\r\nconst uuidv4 = () => {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n\r\n/* https://nanoit.notion.site/Multi-Device-ddd21a639b2141ef8ee2a9f14bd1e010\r\n    var navigator_info = window.navigator;\r\n    var screen_info = window.screen;\r\n    var uid = navigator_info.mimeTypes.length;\r\n    uid += navigator_info.userAgent.replace(/\\D+/g, '');\r\n    uid += navigator_info.plugins.length;\r\n    uid += screen_info.height || '';\r\n    uid += screen_info.width || '';\r\n    uid += screen_info.pixelDepth || '';\r\n    console.log(uid);\r\n    document.write(uid);\r\n */\r\n}\r\n\r\nconst device_info = () => {\r\n    const { browser_id, user_agent, device_id, platform, operation_system } = device_info_create();\r\n\r\n    return {\r\n        browser_id:browser_id,\r\n        user_agent:user_agent,\r\n        device_id:device_id,\r\n        platform:platform,\r\n        operation_system:operation_system,\r\n    }\r\n}\r\n\r\n\r\n\r\nconst AuthLoginIdPw = (email, password) => {\r\n\r\n    return {\r\n        auth: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"session\",\r\n                how: \"login\",\r\n                using: \"id\",\r\n                user: {\r\n                    auth: {\r\n                        email: email,\r\n                        password: password\r\n                    },\r\n                    device_info:device_info()\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst AuthLoginTokenSelect = () => {\r\n    return {\r\n        auth: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"token\",\r\n                how: \"select\"\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst AuthLoginToken = (token) => {\r\n\r\n    return {\r\n        auth: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"session\",\r\n                how: \"login\",\r\n                using: \"token\",\r\n                token: token,\r\n                user:{\r\n                    device_info:device_info()\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst AuthLoginJwt = (token) => {\r\n    if (token === undefined || token === \"\") {\r\n        return {\r\n            auth: {\r\n                uuid: uuidv4(),\r\n                request: {\r\n                    what: \"session\",\r\n                    how: \"login\",\r\n                    using: \"key\",\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        return {\r\n            auth: {\r\n                uuid: uuidv4(),\r\n                request: {\r\n                    what: \"session\",\r\n                    how: \"login\",\r\n                    using: \"key\",\r\n                    token: token\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst AuthLoginAnonymous = (userName) => {\r\n    \r\n    if (userName === undefined || userName === \"\") {\r\n        return {\r\n            auth: {\r\n                uuid: uuidv4(),\r\n                request: {\r\n                    what: \"session\",\r\n                    how: \"login\",\r\n                    using: \"anonymous\",\r\n                    user: {\r\n                        device_info:device_info()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        return {\r\n            auth: {\r\n                uuid: uuidv4(),\r\n                request: {\r\n                    what: \"session\",\r\n                    how: \"login\",\r\n                    using: \"anonymous\",\r\n                    user_name: userName\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst AuthLoginRotary = (userId) => {\r\n\r\n    return {\r\n        auth: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"session\",\r\n                how: \"login\",\r\n                using: \"rotary\",\r\n                user:{\r\n                    device_info:device_info()\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst AuthLogoutNormal = () => {\r\n    return {\r\n        auth: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"session\",\r\n                how: \"logout\"\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst AuthLogoutKeepTrue = () => {\r\n    return {\r\n        auth: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"session\",\r\n                how: \"logout\",\r\n                keep: true\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst AuthLogoutKeepFalse = () => {\r\n    return {\r\n        auth: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"session\",\r\n                how: \"logout\",\r\n                keep: false\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst AuthLogoutRotary = () => {\r\n    return {\r\n        auth: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"session\",\r\n                how: \"logout\",\r\n                using: \"rotary\"\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst AuthSignup = (name, email, password) => {\r\n\r\n    return {\r\n        auth: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"user\",\r\n                how: \"register\",\r\n                user: {\r\n                    auth: {\r\n                        name: name,\r\n                        email: email,\r\n                        password: password\r\n                    }\r\n                },\r\n                device_info:device_info()\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport {AuthLoginIdPw, AuthLoginRotary, AuthLogoutNormal, AuthLoginAnonymous, AuthLoginTokenSelect, AuthLoginJwt, AuthLogoutKeepTrue, AuthLogoutKeepFalse, AuthLogoutRotary, uuidv4, AuthSignup, AuthLoginToken}","import {uuidv4} from \"./auth\";\r\n\r\nconst MetaRequestTopicList = () => {\r\n    return {\r\n        meta: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"topic\",\r\n                how: \"select\"\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst MetaRequestTopicListMe = () => {\r\n    return {\r\n        meta: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"topic\",\r\n                how: \"select\",\r\n                using: \"me\"\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst MetaRequestAllUser = () => {\r\n    return {\r\n        meta: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"user\",\r\n                how: \"select\",\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst MetaRequestUserTopicId = (id) => {\r\n    return {\r\n        meta: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"user\",\r\n                how: \"select\",\r\n                using: \"topic\",\r\n                topic: {\r\n                    id:id\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst MetaRequestTopicMessage = (id) => {\r\n    return {\r\n        meta: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"message\",\r\n                how: \"select\",\r\n                topic: {\r\n                    id:id\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst MetaRequestPagingMessage = () => {\r\n    return{\r\n        meta: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"topic\",\r\n                how: \"select\",\r\n                paging: {\r\n                    created_at: new Date().toISOString() //RFC 3339 format\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport {MetaRequestTopicList, MetaRequestTopicMessage, MetaRequestTopicListMe, MetaRequestAllUser, MetaRequestUserTopicId, MetaRequestPagingMessage}","import {uuidv4} from \"./auth\";\r\n\r\nconst MsgSend = (id, message, msgType, mentionUsersId, replyUserId, sequence_id ) => {\r\n    // 일반 전송\r\n    let data = {\r\n        msg: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"message\",\r\n                how: \"send\",\r\n                topic: {\r\n                    id:id\r\n                },\r\n                message: message,\r\n            }\r\n        }\r\n    }\r\n\r\n    if( msgType === 'reply' ){ // 답장 추가\r\n        data.msg.request.custom = {\r\n            notify:{\r\n                reply:{\r\n                    sequence_id:sequence_id,\r\n                    to_user_id:replyUserId,\r\n                },\r\n            },\r\n        }\r\n    }\r\n\r\n    if( msgType === 'mention' ){ // 멘션 추가\r\n        data.msg.request.custom = {\r\n            notify:{\r\n                mention:{\r\n                    to_users_id:\r\n                        mentionUsersId.map(user => {\r\n                            return(\r\n                                {id:user.id}\r\n                            )\r\n                        })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if( msgType === 'reply-mention' ){ // 답장과 멘션 추가\r\n        data.msg.request.custom = {\r\n            notify:{\r\n                reply:{\r\n                    sequence_id:sequence_id,\r\n                    to_user_id:replyUserId,\r\n                },\r\n                mention:{\r\n                    to_users_id:\r\n                        mentionUsersId.map(user => {\r\n                            return(\r\n                                {id:user.id}\r\n                            )\r\n                        })\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return data;\r\n}\r\n\r\n\r\n\r\nconst MsgReceiveAck = (id, sequence_id) => {\r\n    return {\r\n        msg: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"message\",\r\n                how: \"ack\",\r\n                topic: {\r\n                    id:id\r\n                },\r\n                sequence_id: sequence_id\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst MsgSendCtrlMessage = (id, message) => {\r\n    return {\r\n        msg: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"message\",\r\n                how: \"ctrl\",\r\n                topic: {\r\n                    id:id\r\n                },\r\n                message: message\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport {MsgSend, MsgReceiveAck, MsgSendCtrlMessage}","import * as dispatch from \"../../dispatchs\";\r\nimport {\r\n    REQUEST_HOW_CREATE,\r\n    REQUEST_HOW_INVITE,\r\n    REQUEST_HOW_JOIN,\r\n    REQUEST_HOW_LEAVE,\r\n    REQUEST_WHAT_TOPIC,\r\n    REQUEST_WHO_ALONE, TYPE_LOGGING_RAW,\r\n    TYPE_LOGGING_STATUS,\r\n    STRING_CTRL_CREATE_CONTENT\r\n} from \"../../../globals\";\r\nimport {MetaRequestAllUser, MetaRequestTopicList, MetaRequestTopicMessage, MetaRequestUserTopicId} from \"../../../../utils/nanoit/meta\";\r\nimport { MsgSendCtrlMessage } from \"../../../../utils/nanoit/msg\";\r\n\r\n\r\nfunction CtrlTopicCreate(root, props) {\r\n    if (root.from.me !== true) {\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] 잘못된 방 생성 요청, 방생성 요청의 응답은 나한테만 와야됨\")\r\n        return\r\n    }\r\n\r\n    if (root.ctrl.request.who === REQUEST_WHO_ALONE && root.ctrl.response.topic !== undefined) {\r\n        root.ctrl.response.topic.is_owner = true;\r\n\r\n        dispatch.InsertMyTopic(props, root.ctrl.response.topic)\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] 방 생성 성공 \")\r\n\r\n        // 채팅방 내 메시지 요청\r\n        dispatch.SelecTopicById(props, root.ctrl.response.topic.id);\r\n        dispatch.Writer(props, MetaRequestTopicMessage(root.ctrl.response.topic.id))\r\n\r\n        // AFTER CTRL MESSAGE SEND\r\n        dispatch.Logger(props, TYPE_LOGGING_RAW, \"[SEND] \" + JSON.stringify(MsgSendCtrlMessage(root.ctrl.response.topic.id, STRING_CTRL_CREATE_CONTENT)))\r\n        dispatch.Writer(props, MsgSendCtrlMessage(root.ctrl.response.topic.id, STRING_CTRL_CREATE_CONTENT))\r\n    } else {\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] 방 실패 \")\r\n    }\r\n}\r\n\r\nfunction CtrlTopicInvite(root, props) {\r\n    console.log(\"🚀 ~ file: index.js ~ line 42 ~ CtrlTopicInvite ~ root, props\", root.ctrl.response.topic.users[root.ctrl.response.topic.users.length-1])\r\n    if (root.from.me === true) {\r\n        if (root.ctrl.response.topic !== undefined && root.ctrl.response.topic.users !== undefined) {\r\n\r\n            // 내 채팅 방에 사용자 초대 성공\r\n            dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] 내 채팅 방에 사용자 초대 성공\")\r\n\r\n            dispatch.getToastPopup(props, '사용자 초대를 성공했어요.');\r\n            \r\n            // STEP 1 : 내가 보낸 초대이므로 사용자만 추가, reducer에서 중복 걸러줌 \r\n            root.ctrl.response.topic.users.forEach((user) => {\r\n                dispatch.InsertUserChangeInfo(props, {id:root.ctrl.response.topic.id} , user)\r\n            })\r\n\r\n            // STEP 2 : 초대되었다는 메시지 읽어서 화면에 출력\r\n            dispatch.Writer(props, MetaRequestTopicMessage(root.ctrl.request.topic.id))\r\n        } else {\r\n            dispatch.getToastPopup(props, '사용자를 초대하지 못했어요.');\r\n            dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] 내 채팅 방에 사용자 초대 실패. response 없거나 response.topic 없음\")\r\n        }\r\n    } else {\r\n        if (root.ctrl.response.topic !== undefined && root.ctrl.response.topic.users !== undefined) {\r\n            if (root.ctrl.request.user_id === props.state.generalStates.SESSION_USER_INFO.id) {\r\n                // 내가 다른 사람의 채팅방에 초대 됨\r\n                dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] 내가 다른 사람의 채팅방에 초대 됨\")\r\n\r\n                // STEP 1 : 채팅방 생성\r\n                root.ctrl.response.topic.is_owner = false\r\n                dispatch.InsertMyTopic(props, root.ctrl.response.topic)\r\n\r\n                // STEP 2 : 초대 결과에 채팅방 사용자 까지는 담아서 나옴, 메시지만 요청\r\n                // dispatch.Logger(props, TYPE_LOGGING_RAW, \"[SEND] \" + JSON.stringify(MetaRequestTopicMessage(root.ctrl.request.topic_id)))\r\n                dispatch.Writer(props, MetaRequestTopicMessage(root.ctrl.request.topic.id))\r\n            } else {\r\n                // 내가 속해있는 채팅방에 다른사람이 초대됨\r\n                dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] 내가 속해있는 채팅방에 다른사람이 초대됨 \")\r\n\r\n                // STEP 1 : 내가 보낸 초대이므로 사용자만 추가, reducer에서 중복 걸러줌 \r\n                root.ctrl.response.topic.users.forEach((user) => {\r\n                    dispatch.InsertUserChangeInfo(props, {id:root.ctrl.response.topic.id} , user)\r\n                })\r\n            }\r\n        } else {\r\n            dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] 초대 실패. response 없거나 response.topic 없음\")\r\n        }\r\n    }\r\n}\r\n\r\nfunction CtrlTopicJoin(root, props) {\r\n\r\n    if (root.from.me === true) {\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] 내가 채팅방에 참가함\")\r\n\r\n        // STEP 1 : 내가 채팅방에 참가했으므로 TOPIC 생성\r\n        root.ctrl.response.topic.is_owner = false\r\n        dispatch.InsertMyTopic(props, root.ctrl.response.topic)\r\n\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[SEND] \" + JSON.stringify(MetaRequestUserTopicId(root.ctrl.response.topic.id)))\r\n        \r\n        // 채팅방 내 메시지 요청\r\n        dispatch.Writer(props, MetaRequestTopicMessage(root.ctrl.response.topic.id))\r\n\r\n        // 채팅방 내 사용자 요청\r\n        dispatch.Writer(props, MetaRequestUserTopicId(root.ctrl.response.topic.id))\r\n    } else {\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] 내 채팅방에 사용자가 참여함\")\r\n\r\n\r\n        // STEP 1 : 가져온 유저정보 삽입\r\n        root.ctrl.response.topic.users.forEach((user) => {\r\n            dispatch.InsertUserChangeInfo(props, {id:root.ctrl.response.topic.id} , user)\r\n        })\r\n\r\n        // STEP 2 : 입장했을 때 뜨는 메시지를 화면에 실시간 갱신하기 위해 추가\r\n        dispatch.Writer(props, MetaRequestTopicMessage(root.ctrl.response.topic.id))\r\n\r\n        // 회원가입한 회원이 즉시 채팅방 들어왔을 경우 대비해 전체 회원목록 갱신\r\n        dispatch.Writer(props, MetaRequestAllUser());\r\n    }\r\n}\r\n\r\nfunction CtrlTopicLeave(root, props) {\r\n    if (root.from.me === true) {\r\n        dispatch.DeleteMyTopicByTopicId(props, {id: root.ctrl.request.topic.id})\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] 채팅방에서 나가기 성공\")\r\n\r\n        // 로컬 삭제\r\n        // setLocalExitTopic(props.state.generalStates.SESSION_USER_INFO.id, props.state.viewStates.selectopicid);\r\n\r\n        // 퇴장했을 때 메시지 화면에 실시간 갱신하기 위해 추가\r\n        dispatch.Writer(props, MetaRequestTopicMessage(root.ctrl.request.topic.id))\r\n\r\n        // 내가 채팅방을 나가 사라진 경우를 대비해서, 전체 채팅방 목록 갱신\r\n    } else {\r\n        dispatch.DeleteUserByTopicId(props, {id: root.ctrl.request.topic.id}, root.from.user)\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] 채팅방에서 사용자가 나감\")\r\n        \r\n        // 퇴장했을 때 메시지 화면에 실시간 갱신하기 위해 추가\r\n        dispatch.Writer(props, MetaRequestTopicMessage(root.ctrl.request.topic.id))\r\n    }\r\n    \r\n    dispatch.Writer(props, MetaRequestTopicList())\r\n}\r\n\r\nexport const ParserCtrl = (props, root) => {\r\n    if (root.ctrl.request === undefined) {\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] request 오브젝트가 없음\");\r\n        return\r\n    }\r\n\r\n    if (root.ctrl.request.what === REQUEST_WHAT_TOPIC && root.ctrl.request.how === REQUEST_HOW_CREATE) {\r\n        CtrlTopicCreate(root, props);\r\n    } else if (root.ctrl.request.what === REQUEST_WHAT_TOPIC && root.ctrl.request.how === REQUEST_HOW_INVITE) {\r\n        CtrlTopicInvite(root, props);\r\n    } else if (root.ctrl.request.what === REQUEST_WHAT_TOPIC && root.ctrl.request.how === REQUEST_HOW_JOIN) {\r\n        CtrlTopicJoin(root, props);\r\n    } else if (root.ctrl.request.what === REQUEST_WHAT_TOPIC && root.ctrl.request.how === REQUEST_HOW_LEAVE) {\r\n        CtrlTopicLeave(root, props);\r\n    } else {\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] request 오브젝트 파싱 실패\");\r\n    }\r\n}","import * as dispatch from \"../../dispatchs\";\r\nimport {\r\n    REQUEST_HOW_LOGIN, REQUEST_HOW_LOGOUT,\r\n    REQUEST_HOW_SELECT,\r\n    REQUEST_WHAT_SESSION, \r\n    TYPE_LOGGING_RAW,\r\n    TYPE_LOGGING_STATUS,\r\n    REQUEST_WHAT_USER,\r\n    REQUEST_HOW_REGISTER,\r\n    REQUEST_USING_TOKEN\r\n} from \"../../../globals\";\r\nimport {AuthLoginIdPw, AuthLoginTokenSelect} from \"../../../../utils/nanoit/auth\";\r\nimport {MetaRequestAllUser, MetaRequestTopicList, MetaRequestTopicListMe} from \"../../../../utils/nanoit/meta\";\r\n\r\nfunction Login(props, root) {\r\n    // dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] login 성공 \");\r\n    // STEP 1 : SESSION 정보 업데이트\r\n    dispatch.UpdateSessionLogin(props, true)\r\n    dispatch.UpdateSessionUser(props, root.auth.response.user.id, root.auth.response.user.auth.name)\r\n\r\n    // STEP 2 : ID LOGIN이 아닌 경우 JWT 토큰 요청\r\n    // const loginkey = localStorage.getItem('chattingLoginKey');\r\n    dispatch.Logger(props, TYPE_LOGGING_RAW, \"[SEND] \" + JSON.stringify(AuthLoginTokenSelect()))\r\n    dispatch.Writer(props, AuthLoginTokenSelect())\r\n\r\n    // STEP 3 : TOPIC LIST 요청\r\n    dispatch.Logger(props, TYPE_LOGGING_RAW, \"[SEND] \" + JSON.stringify(MetaRequestTopicListMe()))\r\n    dispatch.Writer(props, MetaRequestTopicListMe())\r\n\r\n    // STEP 4 : FRIENDS LIST 요청\r\n    dispatch.Logger(props, TYPE_LOGGING_RAW, \"[SEND] \" + JSON.stringify(MetaRequestAllUser()))\r\n    dispatch.Writer(props, MetaRequestAllUser())\r\n\r\n\r\n    // ETC Login component 닫고 메시지창으로 이동\r\n    dispatch.viewIsHideLogin(props, true);\r\n    dispatch.viewIsHideSignup(props, true)\r\n\r\n    dispatch.getToastPopup(props, '로그인에 성공했어요.');\r\n}\r\n\r\nfunction Logout(props) {\r\n    // LOGOUT시 모든 정보 RESET\r\n    dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] logout 성공 \");\r\n    dispatch.getToastPopup(props, '로그아웃에 성공했어요.');\r\n    dispatch.UpdateSessionLogin(props, false)\r\n    dispatch.UpdateSessionUser(props, null, null)\r\n    dispatch.DropMyTopics(props)\r\n    dispatch.DropAllFriends(props)\r\n}\r\n\r\nfunction Jwt(props, root) {\r\n\r\n    // JWT 파싱\r\n    dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] jwt token receive 성공 \")\r\n    dispatch.UpdateSessionJwtToken(props, root.auth.response.jwt);\r\n    localStorage.setItem('chattingLoginKey', root.auth.response.jwt);\r\n}\r\n\r\nfunction Register(props, root) {\r\n    dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] Register 성공 \")\r\n\r\n    dispatch.getToastPopup(props, '회원가입에 성공했어요.');\r\n    // 회원가입 UI 숨김\r\n    // dispatch.viewIsHideSignup(props, true)\r\n\r\n    // 회원가입 후 로그인 시도\r\n    dispatch.Writer(props, AuthLoginIdPw(\r\n            root.auth.request.user.auth.email,\r\n            root.auth.request.user.auth.password,\r\n        )\r\n    )\r\n    // alert('회원가입에 성공했어요')\r\n}\r\n\r\n\r\n/**\r\n * 로그인 요청, 리시브 파싱 함수\r\n * @param props\r\n * @param root\r\n * @constructor\r\n */\r\nexport const ParserAuth = (props, root) => {\r\n    // 잘못된 요청\r\n    if (root.auth.request === undefined) {\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] request 오브젝트가 없음\");\r\n        return\r\n    }\r\n\r\n    if (root.auth.request.what === REQUEST_WHAT_SESSION && root.auth.request.how === REQUEST_HOW_LOGIN) {\r\n        Login(props, root);\r\n    } else if (root.auth.request.what === REQUEST_WHAT_SESSION && root.auth.request.how === REQUEST_HOW_LOGOUT) {\r\n        Logout(props);\r\n    } else if (root.auth.request.what === REQUEST_USING_TOKEN && root.auth.request.how === REQUEST_HOW_SELECT) {\r\n        Jwt(props, root);\r\n    } else if (root.auth.request.what === REQUEST_WHAT_USER && root.auth.request.how === REQUEST_HOW_REGISTER) {\r\n        Register(props, root);\r\n    }else{\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] AUTH 오브젝트의 잘못된 REQUEST 요청 \");\r\n    }\r\n}","import {\r\n    REQUEST_HOW_LOGIN,\r\n    REQUEST_WHAT_SESSION,\r\n    TRACE_RESULT_DONE,\r\n    TRACE_RESULT_FAIL,\r\n    TRACE_RESULT_PROC,\r\n    TRACE_RESULT_SEND,\r\n    TRACE_STATUS_ACK,\r\n    TRACE_STATUS_DONE,\r\n    TRACE_STATUS_SEND,\r\n    TYPE_ADD_SEND_MESSAGE_IN_TRACE,\r\n    TYPE_DELETE_MY_TOPIC_BY_TOPIC_ID,\r\n    TYPE_DELETE_USER_BY_TOPIC_ID,\r\n    TYPE_DROP_ALL_FRIENDS,\r\n    TYPE_DROP_MY_TOPICS,\r\n    TYPE_INSERT_ALL_FRIENDS,\r\n    TYPE_INSERT_ALL_TOPIC,\r\n    TYPE_INSERT_MESSAGE_BY_TOPIC_ID,\r\n    TYPE_INSERT_MESSAGES_BY_TOPIC_ID,\r\n    TYPE_INSERT_MY_TOPIC,\r\n    TYPE_INSERT_USER_BY_TOPIC_ID,\r\n    TYPE_LOGGING_RAW,\r\n    TYPE_LOGGING_STATUS,\r\n    TYPE_RESET, TYPE_UPDATE_IS_WRITE_LOG, TYPE_UPDATE_MESSAGE_BY_TOPIC_ID,\r\n    TYPE_UPDATE_SEND_MESSAGE_IN_TRACE,\r\n    TYPE_UPDATE_SESSION_JWT,\r\n    TYPE_UPDATE_SESSION_LOGIN,\r\n    TYPE_UPDATE_SESSION_USER,\r\n    TYPE_UPDATE_WEBSOCKET_STATUS,\r\n    HIDE_SIGNUP,\r\n    HIDE_LOGIN,\r\n    TYPE_SELECT_TOPIC_ID,\r\n    TYPE_UPDATE_PROFILE,\r\n    TYPE_ADD_PROFILE_IMG,\r\n    TYPE_INSERT_USER_CHANGE_INFO,\r\n    TYPE_INSERT_NEW_USER_BY_TOPIC_ID,\r\n    TYPE_UPDATE_MESSAGE_ADD_FILE,\r\n    GET_TOAST_MSG,\r\n    REQUEST_HOW_LOGOUT,\r\n    REQUEST_USING_TOKEN,\r\n    REQUEST_HOW_SELECT,\r\n    REQUEST_WHAT_USER,\r\n    REQUEST_HOW_REGISTER,\r\n    REQUEST_WHAT_TOPIC,\r\n    REQUEST_WHAT_MESSAGE,\r\n    REQUEST_HOW_CREATE,\r\n    REQUEST_HOW_JOIN,\r\n    REQUEST_HOW_INVITE,\r\n    REQUEST_HOW_LEAVE,\r\n    REQUEST_HOW_SEND,\r\n    REQUEST_HOW_CTRL,\r\n    REQUEST_HOW_ACK,\r\n    TYPE_ADD_REPLY,\r\n    TYPE_ADD_MENTION\r\n} from \"../globals\";\r\nimport {ParserCtrl} from \"./parser/ctrl\";\r\nimport {ParserAuth} from \"./parser/auth\";\r\nimport {ParserMeta} from \"./parser/meta\";\r\nimport {ParserMessage} from \"./parser/msg\";\r\nimport {ParserNotify} from \"./parser/notify\";\r\nimport { sendMessageToSlack } from \"../../utils/errorlog\";\r\n\r\nlet writer\r\n\r\nfunction GetUUID(json) {\r\n    let uuid\r\n    if (json.msg !== undefined) {\r\n        uuid = json.msg.uuid\r\n    } else if (json.auth !== undefined) {\r\n        uuid = json.auth.uuid\r\n    } else if (json.meta !== undefined) {\r\n        uuid = json.meta.uuid\r\n    } else if (json.ctrl !== undefined) {\r\n        uuid = json.ctrl.uuid\r\n    } else if (json.notify !== undefined) {\r\n        uuid = json.notify.uuid\r\n    }\r\n    return uuid;\r\n}\r\n\r\nexport function ReceiveData(json, props) {\r\n    let root\r\n    try {\r\n        root = JSON.parse(json)\r\n    } catch (e) {\r\n        console.log(json)\r\n        console.log(e)\r\n        return\r\n    }\r\n\r\n    Logger(props, TYPE_LOGGING_RAW, \"[RECV] \" + json)\r\n    if (root.ack !== undefined) {\r\n        if (root.ack.uuid === undefined) {\r\n            Logger(props, TYPE_LOGGING_RAW, \"[RECV] \" + root)\r\n            return\r\n        }\r\n\r\n        if (root.result !== undefined && root.result.status_code === 200) {\r\n            SendMessageTraceUpdate(props, root.ack.uuid, TRACE_STATUS_ACK, TRACE_RESULT_PROC)\r\n        } else {\r\n            SendMessageTraceUpdate(props, root.ack.uuid, TRACE_STATUS_DONE, TRACE_RESULT_FAIL)\r\n        }\r\n        return\r\n    }\r\n\r\n    if (root.from === undefined) {\r\n        Logger(props, TYPE_LOGGING_STATUS, \"[RECV] from 오브젝트가 없음\")\r\n        return\r\n    }\r\n\r\n    // if (root.result === undefined) {\r\n    //     SendMessageTraceUpdate(props, GetUUID(json), TRACE_RESULT_FAIL, TRACE_STATUS_DONE)\r\n    //     Logger(props, TYPE_LOG_STATUS, \"[RECV] result 오브젝트가 없음\");\r\n    //     return true\r\n    // } else if (root.result.status_code !== 200) {\r\n    //     Logger(props, TYPE_LOG_STATUS, \"[RECV] status_code 실패 코드 수신\");\r\n    //     if (root.auth !== undefined) {\r\n    //         if (root.auth.request.what === REQUEST_WHAT_SESSION && root.auth.request.how === REQUEST_HOW_LOGIN) {\r\n    //             UpdateSessionLogin(props, false)\r\n    //         }\r\n    //     }\r\n    //\r\n    //     // result done\r\n    //     SendMessageTraceUpdate(props, GetUUID(json), TRACE_RESULT_FAIL, TRACE_STATUS_DONE)\r\n    // }\r\n    if (root.auth !== undefined) {\r\n        if (root.result === undefined || root.result.status_code !== 200) {\r\n            SendMessageTraceUpdate(props, root.auth.uuid, TRACE_RESULT_FAIL, TRACE_STATUS_DONE)\r\n            Logger(props, TYPE_LOGGING_STATUS, \"[RECV] root.auth == result object가 없거나 status_code 실패 코드 수신\");\r\n            if (root.auth !== undefined) {\r\n                if (root.auth.request.what === REQUEST_WHAT_SESSION && root.auth.request.how === REQUEST_HOW_LOGIN) {\r\n                    UpdateSessionLogin(props, false)\r\n                }\r\n            }\r\n\r\n            // send error message to view, slack\r\n            if (root.auth.request.what === REQUEST_WHAT_SESSION && root.auth.request.how === REQUEST_HOW_LOGIN) {\r\n                if( root.result?.cause.indexOf('user.id is already login') !== -1  ){\r\n                    getToastPopup(props, `로그인 요청 실패, 이미 다른 기기에서 로그인중이에요`);\r\n                }else if(root.result?.cause.indexOf('id pw login fail') !== -1 ) {\r\n                    getToastPopup(props, `이메일, 비밀번호를 다시 확인해주세요.`);\r\n                }else{\r\n                    getToastPopup(props, `로그인 요청에 실패했어요.`);\r\n                    sendMessageToSlack(`error => 🚀 ~ file: dispatchs.js ~ line 122 ~ root.auth, errorinfo : 로그인 요청 ${root.result?.cause}`);\r\n                }\r\n            } else if (root.auth.request.what === REQUEST_WHAT_SESSION && root.auth.request.how === REQUEST_HOW_LOGOUT) {\r\n                getToastPopup(props, `로그아웃 요청에 실패했어요.`);\r\n                sendMessageToSlack(`error => 🚀 ~ file: dispatchs.js ~ line 122 ~ root.auth, errorinfo : 로그아웃 요청 ${root.result?.cause}`);\r\n            } else if (root.auth.request.what === REQUEST_USING_TOKEN && root.auth.request.how === REQUEST_HOW_SELECT) {\r\n                getToastPopup(props, `JWT 토큰 요청에 실패했어요.`);\r\n                sendMessageToSlack(`error => 🚀 ~ file: dispatchs.js ~ line 122 ~ root.auth, errorinfo : JWT 토큰 요청 ${root.result?.cause}`);\r\n            } else if (root.auth.request.what === REQUEST_WHAT_USER && root.auth.request.how === REQUEST_HOW_REGISTER) {\r\n                if( root.result?.cause.indexOf('email is already') !== -1 ){\r\n                    getToastPopup(props, `이미 등록된 이메일이에요.`);\r\n                }else{\r\n                    getToastPopup(props, `회원가입 요청에 실패했어요.`);\r\n                    sendMessageToSlack(`error => 🚀 ~ file: dispatchs.js ~ line 122 ~ root.auth, errorinfo : 회원가입 요청 ${root.result?.cause}`);\r\n                }\r\n            }else{\r\n                getToastPopup(props, `인증 요청에 실패했어요.`);\r\n                sendMessageToSlack(`error => 🚀 ~ file: dispatchs.js ~ line 122 ~ root.auth, errorinfo : else ${root.result?.cause}`);\r\n            }\r\n\r\n        } else {\r\n            SendMessageTraceUpdate(props, root.auth.uuid, TRACE_RESULT_DONE, TRACE_STATUS_DONE)\r\n            ParserAuth(props, root)\r\n        }\r\n    } else if (root.meta !== undefined) {\r\n        if (root.result === undefined || root.result.status_code !== 200) {\r\n            SendMessageTraceUpdate(props, root.meta.uuid, TRACE_RESULT_FAIL, TRACE_STATUS_DONE)\r\n            Logger(props, TYPE_LOGGING_STATUS, \"[RECV] root.meta == result object가 없거나 status_code 실패 코드 수신\");\r\n\r\n            // send error message to view, slack\r\n            if (root.meta.request.what === REQUEST_WHAT_TOPIC && root.meta.request.how === REQUEST_HOW_SELECT) {\r\n                if( root.result?.cause.indexOf('topic count is zero') !== -1 ){\r\n                    // getToastPopup(props, `방정보 요청에 실패했어요.`);\r\n                    console.log('불러올 방 정보가 없음');\r\n                }else{\r\n                    if(root.result?.cause.indexOf('(BadValue) $in needs an array') !== -1){\r\n                        console.log('불러올 방 정보가 없음')\r\n                    }else{\r\n                        getToastPopup(props, `방정보 요청에 실패했어요.`);\r\n                        sendMessageToSlack(`error => 🚀 ~ file: dispatchs.js ~ line 135 ~ root.meta, errorinfo : 방정보 요청 ${root.result?.cause}`);\r\n                    }\r\n                }\r\n            } else if (root.meta.request.what === REQUEST_WHAT_USER && root.meta.request.how === REQUEST_HOW_SELECT) {\r\n                getToastPopup(props, `유저정보 요청에 실패했어요.`);\r\n                sendMessageToSlack(`error => 🚀 ~ file: dispatchs.js ~ line 135 ~ root.meta, errorinfo : 유저정보 요청 ${root.result?.cause}`);\r\n            } else if (root.meta.request.what === REQUEST_WHAT_MESSAGE && root.meta.request.how === REQUEST_HOW_SELECT) {\r\n                if( root.result?.cause.indexOf('mongo: no documents in result') !== -1 ){\r\n                    // getToastPopup(props, `메시지 요청에 실패했어요.`);\r\n                    console.log('mongo: no documents in result')\r\n                }else{\r\n                    getToastPopup(props, `메시지 요청에 실패했어요.`);\r\n                    sendMessageToSlack(`error => 🚀 ~ file: dispatchs.js ~ line 135 ~ root.meta, errorinfo : 메시지 요청 ${root.result?.cause}`);\r\n                }\r\n            } else {\r\n                getToastPopup(props, `메타 요청에 실패했어요.`);\r\n                sendMessageToSlack(`error => 🚀 ~ file: dispatchs.js ~ line 135 ~ root.meta, errorinfo : else ${root.result?.cause}`);\r\n            }\r\n\r\n        } else {\r\n            SendMessageTraceUpdate(props, root.meta.uuid, TRACE_RESULT_DONE, TRACE_STATUS_DONE)\r\n            ParserMeta(props, root)\r\n        }\r\n    } else if (root.ctrl !== undefined) {\r\n        if (root.result === undefined || root.result.status_code !== 200) {\r\n            SendMessageTraceUpdate(props, root.ctrl.uuid, TRACE_RESULT_FAIL, TRACE_STATUS_DONE)\r\n            Logger(props, TYPE_LOGGING_STATUS, \"[RECV] root.ctrl == result object가 없거나 status_code 실패 코드 수신\");\r\n\r\n            // send error message to view, slack\r\n            if (root.ctrl.request.what === REQUEST_WHAT_TOPIC && root.ctrl.request.how === REQUEST_HOW_CREATE) {\r\n                getToastPopup(props, `방만들기 요청에 실패했어요.`)\r\n                sendMessageToSlack(`error => 🚀 ~ file: dispatchs.js ~ line 170 ~ root.ctrl, errorinfo : 방만들기 요청 ${root.result?.cause}`);\r\n            } else if (root.ctrl.request.what === REQUEST_WHAT_TOPIC && root.ctrl.request.how === REQUEST_HOW_INVITE) {\r\n                getToastPopup(props, `방초대 요청에 실패했어요.`)\r\n                sendMessageToSlack(`error => 🚀 ~ file: dispatchs.js ~ line 170 ~ root.ctrl, errorinfo : 방초대 요청 ${root.result?.cause}`);\r\n            } else if (root.ctrl.request.what === REQUEST_WHAT_TOPIC && root.ctrl.request.how === REQUEST_HOW_JOIN) {\r\n                getToastPopup(props, `방입장 요청에 실패했어요.`)\r\n                sendMessageToSlack(`error => 🚀 ~ file: dispatchs.js ~ line 170 ~ root.ctrl, errorinfo : 방입장 요청 ${root.result?.cause}`);\r\n            } else if (root.ctrl.request.what === REQUEST_WHAT_TOPIC && root.ctrl.request.how === REQUEST_HOW_LEAVE) {\r\n                getToastPopup(props, `방떠나기 요청에 실패했어요.`)\r\n                sendMessageToSlack(`error => 🚀 ~ file: dispatchs.js ~ line 170 ~ root.ctrl, errorinfo : 방떠나기 요청 ${root.result?.cause}`);\r\n            } else {\r\n                getToastPopup(props, `방 컨트롤 요청에 실패했어요.`)\r\n                sendMessageToSlack(`error => 🚀 ~ file: dispatchs.js ~ line 170 ~ root.ctrl, errorinfo : else ${root.result?.cause}`);\r\n            }\r\n\r\n        } else {\r\n            SendMessageTraceUpdate(props, root.ctrl.uuid, TRACE_RESULT_DONE, TRACE_STATUS_DONE)\r\n            ParserCtrl(props, root)\r\n        }\r\n\r\n\r\n    } else if (root.msg !== undefined) {\r\n        if (root.result === undefined || root.result.status_code !== 200) {\r\n            SendMessageTraceUpdate(props, root.msg.uuid, TRACE_RESULT_FAIL, TRACE_STATUS_DONE)\r\n            Logger(props, TYPE_LOGGING_STATUS, \"[RECV] root.msg == result object가 없거나 status_code 실패 코드 수신\");\r\n\r\n            // send error message to view, slack\r\n            if (root.msg.request.what === REQUEST_WHAT_MESSAGE && root.msg.request.how === REQUEST_HOW_SEND ) {\r\n                getToastPopup(props, `메시지전송 요청에 실패했어요.`)\r\n                sendMessageToSlack(`error => 🚀 ~ file: dispatchs.js ~ line 221 ~ root.msg, errorinfo : 메시지전송 요청 ${root.result?.cause}`);\r\n            }else if (root.msg.request.what === REQUEST_WHAT_MESSAGE && root.msg.request.how === REQUEST_HOW_CTRL) {\r\n\r\n            } else if (root.msg.request.what === REQUEST_WHAT_MESSAGE && root.msg.request.how === REQUEST_HOW_ACK) {\r\n\r\n            }else{\r\n                getToastPopup(props, `메시지 요청에 실패했어요.`)\r\n                sendMessageToSlack(`error => 🚀 ~ file: dispatchs.js ~ line 221 ~ root.msg, errorinfo : else ${root.result?.cause}`);\r\n            }\r\n\r\n        } else {\r\n            SendMessageTraceUpdate(props, root.msg.uuid, TRACE_RESULT_DONE, TRACE_STATUS_DONE)\r\n            ParserMessage(props, root)\r\n        }\r\n    } else if (root.notify !== undefined) {\r\n        if (root.result === undefined || root.result.status_code !== 200) {\r\n            SendMessageTraceUpdate(props, root.notify.uuid, TRACE_RESULT_FAIL, TRACE_STATUS_DONE)\r\n            Logger(props, TYPE_LOGGING_STATUS, \"[RECV] root.notify == result object가 없거나 status_code 실패 코드 수신\");\r\n        } else {\r\n            SendMessageTraceUpdate(props, root.notify.uuid, TRACE_RESULT_DONE, TRACE_STATUS_DONE)\r\n            ParserNotify(props, root)\r\n        }\r\n    } else {\r\n\r\n    }\r\n}\r\n\r\nexport function UpdateWriter(sendMessage) {\r\n    writer = sendMessage\r\n}\r\n\r\nexport function WriterChatMessage(props, json) {\r\n    Logger(props, TYPE_LOGGING_RAW, \"[SEND] \" + JSON.stringify(json))\r\n    SendMessageTrace(props, json)\r\n    if (writer !== undefined) {\r\n        writer(JSON.stringify(json))\r\n    } else {\r\n        console.log(\"[SEND-FAIL] WEBSOCKET WRITER IS NOT SET\")\r\n    }\r\n}\r\n\r\nexport function Writer(props, json) {\r\n    Logger(props, TYPE_LOGGING_RAW, \"[SEND] \" + JSON.stringify(json))\r\n    SendMessageTrace(props, json)\r\n    if (writer !== undefined) {\r\n        writer(JSON.stringify(json))\r\n    } else {\r\n        console.log(\"[SEND-FAIL] WEBSOCKET WRITER IS NOT SET\")\r\n    }\r\n}\r\n\r\nexport function SendMessageTraceUpdate(props, uuid, result, status) {\r\n    props.dispatch({\r\n        type: TYPE_UPDATE_SEND_MESSAGE_IN_TRACE,\r\n        message: {\r\n            uuid: uuid,\r\n            result: result,\r\n            status: status,\r\n        }\r\n    })\r\n}\r\n\r\nexport function SendMessageTrace(props, json) {\r\n    props.dispatch({\r\n        type: TYPE_ADD_SEND_MESSAGE_IN_TRACE,\r\n        message: {\r\n            uuid: GetUUID(json),\r\n            result: TRACE_RESULT_SEND,\r\n            status: TRACE_STATUS_SEND,\r\n            json: json,\r\n        }\r\n    })\r\n}\r\n\r\nexport function Logger(props, type, log) {\r\n    if (props.state.generalStates.DEFAULT_USE_LOGGER) {\r\n        props.dispatch({\r\n            type: type,\r\n            log: log\r\n        })\r\n    }\r\n}\r\n\r\nexport function UpdateIsWriteLog(props, isWriteLog) {\r\n    props.dispatch({\r\n        type: TYPE_UPDATE_IS_WRITE_LOG,\r\n        isWriteLog: isWriteLog\r\n    })\r\n}\r\n\r\nexport function UpdateSessionLogin(props, isLogin) {\r\n    if (!isLogin) {\r\n        UpdateSessionJwtToken(props, null)\r\n        // generalActions(props).sessionUpdateJwt(null)\r\n    }\r\n    props.dispatch({\r\n        type: TYPE_UPDATE_SESSION_LOGIN,\r\n        isLogin: isLogin\r\n    })\r\n}\r\n\r\nexport function UpdateSessionJwtToken(props, token) {\r\n    props.dispatch({\r\n        type: TYPE_UPDATE_SESSION_JWT,\r\n        token: token\r\n    })\r\n}\r\n\r\nexport function UpdateSessionUser(props, userId, userName) {\r\n    props.dispatch({\r\n        type: TYPE_UPDATE_SESSION_USER,\r\n        user: {id: userId, name: userName}\r\n    })\r\n}\r\n\r\nexport function InsertAllFriends(props, user) {\r\n    props.dispatch({\r\n        type: TYPE_INSERT_ALL_FRIENDS,\r\n        user: user\r\n    })\r\n}\r\n\r\nexport function InsertAllTopic(props, topic) {\r\n    props.dispatch({\r\n        type: TYPE_INSERT_ALL_TOPIC,\r\n        topic: topic,\r\n    })\r\n}\r\n\r\nexport function InsertMyTopic(props, topic) {\r\n    props.dispatch({\r\n        type: TYPE_INSERT_MY_TOPIC,\r\n        topic: topic,\r\n    })\r\n}\r\n\r\nexport function Reset(props) {\r\n    props.dispatch({\r\n        type: TYPE_RESET\r\n    })\r\n}\r\n\r\nexport function DropMyTopics(props) {\r\n    props.dispatch({\r\n        type: TYPE_DROP_MY_TOPICS\r\n    })\r\n}\r\n\r\nexport function DropAllFriends(props) {\r\n    props.dispatch({\r\n        type: TYPE_DROP_ALL_FRIENDS\r\n    })\r\n}\r\n\r\nexport function DeleteMyTopicByTopicId(props, topic) {\r\n    props.dispatch({\r\n        type: TYPE_DELETE_MY_TOPIC_BY_TOPIC_ID,\r\n        topic: topic,\r\n    })\r\n}\r\n\r\nexport function InsertUserByTopicId(props, topic) {\r\n    props.dispatch({\r\n        type: TYPE_INSERT_USER_BY_TOPIC_ID,\r\n        topic: topic,\r\n    })\r\n}\r\n\r\n\r\nexport function InsertNewUserByTopicId(props, topicId, user, delIdx) {\r\n    props.dispatch({\r\n        type: TYPE_INSERT_NEW_USER_BY_TOPIC_ID,\r\n        topicId: topicId,\r\n        user:user,\r\n        idx:delIdx,\r\n    })\r\n}\r\n\r\n\r\nexport function InsertUserChangeInfo(props, topic, user) {\r\n    props.dispatch({\r\n        type: TYPE_INSERT_USER_CHANGE_INFO,\r\n        topic: topic,\r\n        user:user,\r\n    })\r\n}\r\n\r\nexport function DeleteUserByTopicId(props, topic, user) {\r\n    props.dispatch({\r\n        type: TYPE_DELETE_USER_BY_TOPIC_ID,\r\n        topic: topic,\r\n        user: user,\r\n    })\r\n}\r\n\r\nexport function UpdateMessageByTopicId(props, topic_id, message) {\r\n    props.dispatch({\r\n        type: TYPE_UPDATE_MESSAGE_BY_TOPIC_ID,\r\n        topic_id: topic_id,\r\n        message: message\r\n    })\r\n}\r\n\r\nexport function InsertMessageByTopicId(props, topic_id, message) {\r\n    props.dispatch({\r\n        type: TYPE_INSERT_MESSAGE_BY_TOPIC_ID,\r\n        topic_id: topic_id,\r\n        message: message\r\n    })\r\n}\r\n\r\nexport function InsertMessagesByTopicId(props, topic) {\r\n    props.dispatch({\r\n        type: TYPE_INSERT_MESSAGES_BY_TOPIC_ID,\r\n        topic: topic,\r\n    })\r\n}\r\n\r\nexport function UpdateWebsocketStatus(props, webSocketStatus) {\r\n    props.dispatch({\r\n        type: TYPE_UPDATE_WEBSOCKET_STATUS,\r\n        status: webSocketStatus\r\n    })\r\n}\r\n\r\nexport function viewIsHideSignup(props, trueFalse) {\r\n    props.dispatch({\r\n        type: HIDE_SIGNUP,\r\n        isShow: trueFalse,\r\n    })\r\n}\r\n\r\n\r\nexport function viewIsHideLogin(props, trueFalse) {\r\n    props.dispatch({\r\n        type: HIDE_LOGIN,\r\n        isShow: trueFalse,\r\n    })\r\n}\r\n\r\nexport function SelecTopicById(props, topicId){\r\n    props.dispatch({\r\n        type:TYPE_SELECT_TOPIC_ID,\r\n        selectopicid: topicId,\r\n    })\r\n}\r\n\r\nexport function getToastPopup(props, msg){\r\n    props.dispatch({\r\n        type: GET_TOAST_MSG,\r\n        msg: msg,\r\n    })\r\n}\r\n\r\nexport function updateProfileId(props, userid, fileid){\r\n    props.dispatch({\r\n        type:TYPE_UPDATE_PROFILE,\r\n        userid:userid,\r\n        fileid:fileid,\r\n    })\r\n}\r\n\r\nexport function addProfileImgfile(props, fileid, userid, img){\r\n    props.dispatch({\r\n        type:TYPE_ADD_PROFILE_IMG,\r\n        fileid:fileid,\r\n        userid:userid,\r\n        img:img,\r\n    })\r\n}\r\n\r\nexport function updateMessageByAddFile(props, topic, file, sequence_id) {\r\n    props.dispatch({\r\n        type: TYPE_UPDATE_MESSAGE_ADD_FILE,\r\n        topic: topic,\r\n        file:file,\r\n        sequence_id:sequence_id\r\n    })\r\n}\r\n\r\nexport function addReplyMessage(props, notify_id, topic_id, user_id, user_name, sequence_id) {\r\n    props.dispatch({\r\n        type: TYPE_ADD_REPLY,\r\n        notify_id:notify_id,\r\n        topic_id: topic_id,\r\n        from_user_id:user_id,\r\n        from_user_name:user_name,\r\n        sequence_id:sequence_id\r\n    })\r\n}\r\n\r\nexport function addMentionMessage(props, notify_id, topic_id, user_id, user_name, sequence_id) {\r\n    props.dispatch({\r\n        type: TYPE_ADD_MENTION,\r\n        notify_id:notify_id,\r\n        topic_id: topic_id,\r\n        from_user_id:user_id,\r\n        from_user_name:user_name,\r\n        sequence_id:sequence_id\r\n    })\r\n}","/**\r\n * localStorage\r\n * 로컬스토리지 용량제한 정보 (브라우저당 5MB, 키당 ??MB)\r\n * https://www.bsidesoft.com/1426\r\n */\r\n\r\n/******************************************\r\n * default \r\n ******************************************/\r\n/**\r\n * @name setLocalItem\r\n * @summary localStorage.setItem( key, JSON.stringify(value) )\r\n */\r\nexport const setLocalItem = (key, value) => {\r\n    localStorage.setItem( key, JSON.stringify(value) );\r\n}\r\n\r\n/**\r\n * @name getLocalItem\r\n * @summary JSON.parse( localStorage.getItem(key) )\r\n */\r\nexport const getLocalItem = (key) => {\r\n    if( !localStorage.getItem(key) ) return false;\r\n    return JSON.parse( localStorage.getItem(key) );\r\n}\r\n\r\n\r\n/******************************************\r\n * 각 추가 요청\r\n ******************************************/\r\n\r\n/******************************************\r\n * 전체회원목록\r\n * KEY : NANOIT_CHAT_FRIENDS_ALL, \r\n * VALUE : [ (전체회원목록) ]\r\n ******************************************/\r\n\r\n/**\r\n * @name setLocalAddFriendsAll\r\n * @summary 회원 목록 전체 저장\r\n * @param {*} users\r\n */\r\nexport const setLocalAddFriendsAll = (users) => {\r\n    console.log('setLocalAddFriendsAll')\r\n    setLocalItem('NANOIT_CHAT_FRIENDS_ALL', users)\r\n}\r\n/**\r\n * @name setLocalAddUserProfile\r\n * @summary localStorage FRIENDS_ALL 내부의 profile 설정\r\n * @description 이미 서버에 요청한 파일은 재요청하지 않도록 localStorage에 저장\r\n * @param {*} user \r\n * @param {*} imgBlob \r\n */\r\nexport const setLocalAddUserProfile = (user, imgBlob) => {\r\n    console.log('setLocalAddUserProfile')\r\n    const GET_LOCAL_FRIENDS_ALL = getLocalItem('NANOIT_CHAT_FRIENDS_ALL');\r\n    if( !GET_LOCAL_FRIENDS_ALL ) return;\r\n\r\n    const friend = GET_LOCAL_FRIENDS_ALL.find(f => f.id === user.id);\r\n\r\n    setLocalItem('NANOIT_CHAT_FRIENDS_ALL', [\r\n        ...(GET_LOCAL_FRIENDS_ALL.filter(f => f.id !== user.id)),\r\n        {\r\n            ...friend,\r\n            profile:{\r\n                ...friend.profile,\r\n                img:imgBlob\r\n            }\r\n        }\r\n    ])\r\n}\r\n\r\n/**\r\n * @name setLocalAddNewUser\r\n * @summary 새로운 회원 추가\r\n * @param {*} user\r\n */\r\nexport const setLocalAddNewUser = (user) => {\r\n    if( !user ) return;\r\n    console.log('setLocalAddNewUser')\r\n    const GET_LOCAL_FRIENDS_ALL = getLocalItem('NANOIT_CHAT_FRIENDS_ALL');\r\n    if( !GET_LOCAL_FRIENDS_ALL ) return;\r\n\r\n    setLocalItem('NANOIT_CHAT_FRIENDS_ALL', [\r\n        ...(GET_LOCAL_FRIENDS_ALL.filter(f => f.id !== user.id)),\r\n        {\r\n            ...user\r\n        }\r\n    ]);\r\n}\r\n\r\n/**\r\n * @name setLocalUpdateUser\r\n * @summary 회원목록 업데이트\r\n * @description 탈퇴했거나 삭제된 회원을 정리할 때 사용\r\n * @param {*} user\r\n */\r\nexport const setLocalUpdateUser = (user) => {\r\n    const GET_LOCAL_FRIENDS_ALL = getLocalItem('NANOIT_CHAT_FRIENDS_ALL');\r\n    if( !GET_LOCAL_FRIENDS_ALL ) return;\r\n\r\n    const isExistUser = GET_LOCAL_FRIENDS_ALL.find(f => f.id === user.id)\r\n\r\n    setLocalItem('NANOIT_CHAT_FRIENDS_ALL', [\r\n        ...(GET_LOCAL_FRIENDS_ALL.filter(f => f.id !== user.id)),\r\n        !!isExistUser\r\n        ? {...(GET_LOCAL_FRIENDS_ALL.find(f => f.id === user.id))}\r\n        : null    \r\n    ])\r\n}\r\n\r\n\r\n/******************************************\r\n * 각 유저의 채팅방 정보\r\n * KEY : NANOIT_CHAT_USER_{USER_ID}_{TOPIC_ID}, \r\n * VALUE : { (하나의 채팅방 정보) }\r\n ******************************************/\r\n/**\r\n * @name makeLocalUserTopicName\r\n * @summary 로컬스토리지 이름 생성\r\n * @param {*} user_id\r\n * @param {*} topic_id\r\n */\r\nexport const makeLocalUserTopicName = (user_id, topic_id) => {\r\n    if( !user_id || !topic_id ){\r\n        console.log('makeLocalUserTopicName => 이름생성에 필요한 정보가 없음')\r\n        return false;\r\n    }\r\n    return `NANOIT_CHAT_USER_${user_id}_${topic_id}`\r\n}\r\n\r\n/**\r\n * @name isLocalUserTopic\r\n * @summary 로컬스토리지 존재여부 확인\r\n * @param {*} user_id\r\n * @param {*} topic_id\r\n */\r\nexport const isLocalUserTopic = (user_id, topic_id) => {\r\n    const isTopic = getLocalItem(makeLocalUserTopicName(user_id, topic_id));\r\n    if( isTopic ){\r\n        return true;\r\n    }else{\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @name getLocalUserTopic\r\n * @summary 로컬스토리지에 '해당유저의 해당채팅방 정보' 가져오고, \r\n *          없다면 생성해서 가져옴\r\n * @param {*} user_id\r\n * @param {*} topic_id\r\n */\r\nexport const getLocalUserTopic = (user_id, topic_id) => {\r\n    if( !user_id || !topic_id ) return;\r\n\r\n    const localTopic = makeLocalUserTopicName(user_id, topic_id);\r\n    const getTopic = getLocalItem(localTopic);\r\n\r\n    if( !getTopic ) {\r\n        setLocalItem(localTopic, {});\r\n        return getLocalItem(localTopic);\r\n    }else{\r\n        return getTopic;\r\n    }\r\n}\r\n\r\n/**\r\n * // 작업중 ***************************************\r\n * @name updateLocalUserTopics\r\n * @summary 사라진 채팅방 체크해서 로컬스토리지에서 삭제\r\n * @description\r\n * 1. 방정보 체크\r\n * 2. 방 있으면 그대로 유지\r\n * 3. 체크 안된 나머지 로컬스토리지 방을 검색 후, 모두 삭제\r\n */\r\nexport const updateLocalUserTopics = (props, topics) => {\r\n    if( !props || !topics ) return;\r\n\r\n    const userId  = props.state.generalStates.SESSION_USER_INFO.id;\r\n    const serverUserTopics = [];\r\n\r\n    /* topics.forEach((topic) => {\r\n        const localTopic = makeLocalUserTopicName(userId, topic.id);\r\n        serverUserTopics.push(localTopic);\r\n    }); */\r\n\r\n    /* for(let i=0; i < localStorage.length; i++){\r\n        // localStorage.indexOf(`NANOIT_CHAT_USER_${userId}_`)\r\n    } */\r\n    // const getlocal = getLocalItem(`NANOIT_CHAT_USER_${userId}_${/[0-9]/g}`);\r\n}\r\n\r\n\r\n/**\r\n * @name setLocalTopicMessages\r\n * @summary localStorage TOPICS_MY 내부의 messages 삽입\r\n * @description 이미 로컬에 있는 메시지는 재요청하지 않도록 localStorage에 저장\r\n * @param {*} topic \r\n */\r\nexport const setLocalTopicMessages = (user_id, topic) => {\r\n    const GET_LOCAL_USER_TOPIC = getLocalUserTopic(user_id, topic.id);\r\n    if( !GET_LOCAL_USER_TOPIC.messages ) {\r\n        const localTopic = makeLocalUserTopicName(user_id, topic.id);\r\n        setLocalItem(localTopic, topic);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @name setLocalInsertMessage\r\n * @summary localStorage 채팅방에 메시지 전송시 로컬에도 추가\r\n * @param {*} user_id \r\n * @param {*} msg \r\n */\r\n/* \r\nexport const setLocalInsertMessage = (user_id, topic_id, msg) => {\r\n    const GET_LOCAL_NANOIT = getLocalItem('NANOIT');\r\n    if( !GET_LOCAL_NANOIT ) return;\r\n\r\n    const TOPICS_MY = GET_LOCAL_NANOIT.CHAT.USERS.find(u => u.id === user_id).TOPICS_MY;\r\n    const topic = TOPICS_MY.filter(t => t.id === topic_id)[0];\r\n\r\n    setLocalItem('NANOIT', [{\r\n        CHAT:{\r\n            FRIENDS_ALL:[\r\n                ...GET_LOCAL_NANOIT.CHAT.FRIENDS_ALL\r\n            ],\r\n            USERS:[\r\n                ...(GET_LOCAL_NANOIT.CHAT.USERS.filter(u => u.id !== user_id)),\r\n                {\r\n                    id:user_id,\r\n                    TOPICS_MY:[\r\n                        ...(TOPICS_MY.filter(t=> t.id !== topic_id)),\r\n                        topic.messages \r\n                        ? { \r\n                            ...topic,\r\n                            messages:[\r\n                                ...topic.messages, // 처음 회원가입 했을 때 topic안에 messages가 없기 때문에 이 부분에서 에러가 나므로 구분 처리함.\r\n                                msg\r\n                            ]\r\n                        }\r\n                        : {\r\n                            ...topic,\r\n                            messages:[\r\n                                msg\r\n                            ]\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }])\r\n}\r\n */\r\n\r\n/**\r\n * @name setLocalFristUsingApp\r\n * @summary 이 앱을 처음 사용하는 유저\r\n * @description 회원 목록 전체 저장\r\n * @param {*} users\r\n */\r\n/* \r\nexport const setLocalFristUsingApp = (user_id, users) => {\r\n    const GET_LOCAL_NANOIT = getLocalItem('NANOIT');\r\n    if( !GET_LOCAL_NANOIT ){\r\n        setLocalItem('NANOIT', [{\r\n            CHAT:{\r\n                FRIENDS_ALL:users,\r\n                USERS:[\r\n                    {\r\n                        id:user_id,\r\n                        TOPICS_MY:[]\r\n                    }\r\n                ]\r\n            }\r\n        }])\r\n    }else{\r\n        setLocalItem('NANOIT', [{\r\n            CHAT:{\r\n                FRIENDS_ALL:users,\r\n                USERS:( !GET_LOCAL_NANOIT.CHAT.USERS.find(u => u.id === user_id) \r\n                )?(\r\n                    [\r\n                        {\r\n                            id:user_id,\r\n                            TOPICS_MY:[]\r\n                        }\r\n                    ]\r\n                ):(\r\n                    [\r\n                        ...GET_LOCAL_NANOIT.CHAT.USERS,\r\n                    ]\r\n                )\r\n            }\r\n        }])\r\n    }\r\n}\r\n */\r\n\r\n/**\r\n * @name setLocalUserProfile\r\n * @summary localStorage FRIENDS_ALL 내부의 profile 설정\r\n * @description 이미 서버에 요청한 파일은 재요청하지 않도록 localStorage에 저장\r\n * @param {*} user \r\n * @param {*} imgBlob \r\n */\r\n/* \r\nexport const setLocalUserProfile = (user, imgBlob) => {\r\n    const GET_LOCAL_NANOIT = getLocalItem('NANOIT');\r\n    if( !GET_LOCAL_NANOIT ) return;\r\n\r\n    const friend = GET_LOCAL_NANOIT.CHAT.FRIENDS_ALL.find(f => f.id === user.id);\r\n\r\n    setLocalItem('NANOIT', [{\r\n        CHAT:{\r\n            FRIENDS_ALL:[\r\n                ...(GET_LOCAL_NANOIT.CHAT.FRIENDS_ALL.filter(f => f.id !== user.id)),\r\n                {\r\n                    id:friend.id,\r\n                    auth:friend.auth,\r\n                    profile:{\r\n                        ...friend.profile,\r\n                        file_id:friend.profile.file_id,\r\n                        img:imgBlob\r\n                    }\r\n                }\r\n            ],\r\n            USERS:[\r\n                ...GET_LOCAL_NANOIT.CHAT.USERS\r\n            ]\r\n        }\r\n    }])\r\n}\r\n\r\n */\r\n\r\n\r\n/**\r\n * @name setLocalExitTopic\r\n * @summary localStorage 채팅방 나가기\r\n * @param {*} user_id \r\n * @param {*} topic_id \r\n */\r\n/* \r\nexport const setLocalExitTopic = (user_id, topic_id) => {\r\n    const GET_LOCAL_NANOIT = getLocalItem('NANOIT');\r\n    if( !GET_LOCAL_NANOIT ) return;\r\n\r\n    setLocalItem('NANOIT', [{\r\n        CHAT:{\r\n            FRIENDS_ALL:[\r\n                ...GET_LOCAL_NANOIT.CHAT.FRIENDS_ALL\r\n            ],\r\n            USERS:[\r\n                ...(GET_LOCAL_NANOIT.CHAT.USERS.filter(u => u.id !== user_id)),\r\n                {\r\n                    id:user_id,\r\n                    TOPICS_MY:[\r\n                        ...(GET_LOCAL_NANOIT.CHAT.USERS.find(u => u.id == user_id).TOPICS_MY.filter(t => t.id !== topic_id)),\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }])\r\n}\r\n */\r\n\r\n\r\n/**\r\n * @name setLocalInsertTopic\r\n * @summary localStorage 채팅방 정보 삽입\r\n * @param {*} user_id \r\n * @param {*} topic_id \r\n * @description 가져온 방이 이미 존재하면 넣지 않음, 없으면 추가\r\n */\r\n/* \r\nexport const setLocalInsertTopic = (user_id, topic) => {\r\n    const GET_LOCAL_NANOIT = getLocalItem('NANOIT');\r\n    if( !GET_LOCAL_NANOIT ) return;\r\n\r\n    let GET_USER;\r\n    if( !GET_USER ){\r\n        setLocalFristUsingApp(user_id, GET_LOCAL_NANOIT.CHAT.FRIENDS_ALL)\r\n        GET_USER = GET_LOCAL_NANOIT.CHAT.USERS.find(u => u.id === user_id);\r\n        return;\r\n    }\r\n\r\n    const isExistTopic = GET_USER.TOPICS_MY.find(t => t.id === topic.id);\r\n\r\n    setLocalItem('NANOIT', [{\r\n        CHAT:{\r\n            FRIENDS_ALL:[\r\n                ...GET_LOCAL_NANOIT.CHAT.FRIENDS_ALL\r\n            ],\r\n            USERS:[\r\n                ...(GET_LOCAL_NANOIT.CHAT.USERS.filter(u => u.id !== user_id)),\r\n                {\r\n                    id:user_id,\r\n                    TOPICS_MY:\r\n                        (\r\n                            !isExistTopic\r\n                        )?(\r\n                            [\r\n                                ...GET_USER.TOPICS_MY,\r\n                                topic\r\n                            ]\r\n                        ):(\r\n                            [...GET_USER.TOPICS_MY]\r\n                        ),\r\n                }\r\n            ]\r\n        }\r\n    }])\r\n}\r\n */\r\n\r\n/**\r\n * @name setLocalUpdateFriend\r\n * @summary localStorage 회원 업데이트 (서버회원정보기준으로)\r\n * @param {*} user_id \r\n */\r\n/* \r\nexport const setLocalUpdateFriend = (user_id_all) => {\r\n    const GET_LOCAL_NANOIT = getLocalItem('NANOIT');\r\n    if( !GET_LOCAL_NANOIT ) return;\r\n\r\n    setLocalItem('NANOIT', [{\r\n        CHAT:{\r\n            FRIENDS_ALL:[\r\n                ...(\r\n                    GET_LOCAL_NANOIT.CHAT.FRIENDS_ALL.map((localUser, i) => \r\n                        !!user_id_all.find(u => u.id === localUser.id) \r\n                        ? user_id_all.filter(u => u.id === localUser.id)\r\n                        : GET_LOCAL_NANOIT.CHAT.FRIENDS_ALL.slice(i)[0]\r\n                    )\r\n                )\r\n            ],\r\n            USERS:[\r\n                ...GET_LOCAL_NANOIT.CHAT.USERS,\r\n            ]\r\n        }\r\n    }])\r\n}\r\n */\r\n/**\r\n * @name setLocalUpdateMessage\r\n * @summary localStorage 메시지 업데이트\r\n * @param {*} user_id \r\n */\r\n/* \r\nexport const setLocalUpdateMessage = (user_id, topic_id, messages) => {\r\n    const GET_LOCAL_NANOIT = getLocalItem('NANOIT');\r\n    const localUser = GET_LOCAL_NANOIT?.CHAT.USERS.find(u => u.id === user_id);\r\n    const localTopic = localUser?.TOPICS_MY.find(t => t.id === topic_id);\r\n    if( !GET_LOCAL_NANOIT || !localUser || !localTopic || !messages ) return;\r\n\r\n    setLocalItem('NANOIT', [{\r\n        CHAT:{\r\n            FRIENDS_ALL:[\r\n                ...GET_LOCAL_NANOIT.CHAT.FRIENDS_ALL\r\n            ],\r\n            USERS:[\r\n                ...GET_LOCAL_NANOIT.CHAT.USERS.filter(u=> u.id !== user_id),\r\n                {\r\n                    id:user_id,\r\n                    TOPICS_MY:[\r\n                        ...(localUser.TOPICS_MY.filter(t => t.id !== topic_id)),\r\n                        {\r\n                            ...localTopic,\r\n                            messages:messages\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }])\r\n} */","import * as dispatch from \"../../dispatchs\";\r\nimport {\r\n    REQUEST_HOW_SELECT, REQUEST_USING_ME, REQUEST_WHAT_MESSAGE,\r\n    REQUEST_WHAT_TOPIC,\r\n    REQUEST_WHAT_USER,\r\n    TYPE_LOGGING_STATUS\r\n} from \"../../../globals\";\r\nimport { getLocalItem, setLocalAddFriendsAll, setLocalAddNewUser, setLocalTopicMessages, setLocalUpdateUser, updateLocalUserTopics } from \"../../../localStorageActions\";\r\n\r\n\r\nfunction MetaSelectTopic(root, props) {\r\n    if (root.meta.response === undefined) {\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] response 객체 없음\");\r\n        return\r\n    }\r\n\r\n    if (root.meta.response.topics === undefined) {\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] response.topics 객체 없음\");\r\n        return\r\n    }\r\n\r\n    updateLocalUserTopics(props, root.meta.response.topics);\r\n\r\n\r\n    // TOPICS ARRAY의 방정보를 모두 생성함\r\n    root.meta.response.topics.forEach(topic => {\r\n\r\n        // STEP 1 : 방 생성\r\n        topic.owner === props.state.generalStates.SESSION_USER_INFO.id ? topic.is_owner = true : topic.is_owner = false\r\n        if (root.meta.request.using !== undefined && root.meta.request.using === REQUEST_USING_ME) {\r\n            // 내 채팅방 넣기\r\n            // setLocalInsertTopic(props.state.generalStates.SESSION_USER_INFO.id, topic);\r\n            \r\n\r\n            dispatch.InsertMyTopic(props, topic)\r\n\r\n            // STEP 2 : 생성된 방의 USER 요청\r\n            // dispatch.Logger(props, TYPE_LOGGING_RAW, \"[SEND] \" + JSON.stringify(MetaRequestUserTopicId(topic.id)))\r\n            // dispatch.Writer(props, MetaRequestUserTopicId(topic.id))\r\n            \r\n            // STEP 2 : 생성된 방의 USER 요청\r\n/* \r\n            root.ctrl.response.topic.users.forEach((user) => {\r\n                dispatch.InsertUserChangeInfo(props, {id:root.ctrl.response.topic.id} , user)\r\n            })\r\n*/\r\n            // STEP 3 : 생성된 방의 MESSAGE 요청\r\n            //dispatch.Logger(props, TYPE_LOGGING_RAW, \"[SEND] \" + JSON.stringify(MetaRequestTopicMessage(topic.id)))\r\n            // dispatch.Writer(props, MetaRequestTopicMessage(topic.id))\r\n        } else {\r\n            // 모든 채팅방 넣기\r\n            dispatch.InsertAllTopic(props, topic)\r\n\r\n            // STEP 2 : 생성된 방의 USER 요청\r\n            // dispatch.Logger(props, TYPE_LOGGING_RAW, \"[SEND] \" + JSON.stringify(MetaRequestUserTopicId(topic.id)))\r\n            // dispatch.Writer(props, MetaRequestUserTopicId(topic.id))\r\n        }\r\n    })\r\n}\r\n\r\nfunction MetaSelectUser(root, props) {\r\n    if (root.meta.request.using !== undefined && root.meta.request.using === \"topic\") {\r\n        if (root.meta.response.topic !== undefined && root.meta.response.topic.users !== undefined) {\r\n            dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] 내 채팅방내 사용자 정보 수신\")\r\n            /* root.meta.response.topic.users.forEach(user => {\r\n                dispatch.InsertUserByTopicId(props, {id: root.meta.response.topic.id}, user)\r\n            }) */\r\n            dispatch.InsertUserByTopicId(props, root.meta.response.topic)\r\n\r\n            // dispatch.Writer(props, MetaRequestUserTopicId(root.ctrl.response.topic.id))\r\n        } else {\r\n            dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] 내 채팅방내 사용자 정보 없음\");\r\n        }\r\n    } else {\r\n        if (root.meta.response.users !== undefined) {\r\n            dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] 모든 사용자 정보 수신\")\r\n\r\n            /*************************************************************\r\n             * localStorage와 비교 => 모든 사용자 정보 수신x\r\n             * \r\n             * ※ localStorage.FRIENDS_ALL 를 갱신해야하는 경우의 수\r\n             * 1. 사용자가 앱 최초 사용시 로컬에 정보 삽입 => 작업 O\r\n             * 2. 신규회원 추가 => 작업 O\r\n             * 3. 기존회원 수정 ( profile.file_id 포함 ) => 작업 O, 실제 테스트 확인요망 & profile.file_id만 체크함. 다른 정보도 수정된다면 작업 필요함.\r\n             * 4. 기존회원 탈퇴 (삭제) => 작업 X\r\n             * \r\n             * 5. 이미 사용한 회원이 다시 앱에 들어왔을 때 회원목록 갱신.\r\n             *************************************************************/\r\n            const GET_LOCAL_FRIENDS_ALL = getLocalItem('NANOIT_CHAT_FRIENDS_ALL');\r\n\r\n            // 1-1 사용자가 앱 최초 사용시 로컬에 정보 삽입\r\n            if( !GET_LOCAL_FRIENDS_ALL ){ \r\n                setLocalAddFriendsAll(root.meta.response.users);\r\n                root.meta.response.users.forEach(user => dispatch.InsertAllFriends(props, user) )\r\n                console.log('parser/meta => 이 앱을 처음 사용하는 신규회원')\r\n            }else{\r\n\r\n                const user_id_all = [];\r\n\r\n                root.meta.response.users.forEach(user => {\r\n                    user_id_all.push(user.id);\r\n\r\n                    const isExistUserByLocal = GET_LOCAL_FRIENDS_ALL.find(f => f.id === user.id)\r\n\r\n                    if( !isExistUserByLocal ){\r\n                        // 2. 신규회원 추가 & 로컬스토리지에 없는 기존 회원\r\n                        setLocalAddNewUser(user);\r\n                        dispatch.InsertAllFriends(props, user)\r\n                        console.log('parser/meta => localStorage에 없는 신규회원')\r\n\r\n                        // 4. 기존회원 탈퇴 (삭제)\r\n                        /*\r\n                         * - 회원탈퇴했을 때, user.id가 중복되는지 여부에 따라 작업방식 달라져야함.\r\n                         * 1. user.id가 신규회원의 id로 바껴서 중복된다면, 특정 값을 기준으로 UPDATE\r\n                         * 2. user.id가 중복되지 않으면, id 기준으로 해당회원정보 전체를 삭제\r\n                         */\r\n                    }else{ //로컬에 이미 존재하는 회원\r\n                        setLocalUpdateUser(user);\r\n\r\n                        dispatch.InsertAllFriends(props, user)\r\n                        console.log('parser/meta => localStorage에 등록된 회원')\r\n\r\n                        let friend = GET_LOCAL_FRIENDS_ALL.filter(f => f.id === user.id);\r\n                        if( friend.proflie?.file_id && user.profile?.file_id ){\r\n                            friend.profile = {\r\n                                ...friend.profile,\r\n                                file_id:user.profile.file_id\r\n                            }\r\n                            dispatch.updateProfileId(props, user.id, user.profile.file_id)\r\n                            console.log('parser/meta => localStorage에 등록된 회원의 file_id 추가 삽입')\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n            // 로컬스토리지와 서버회원목록 비교해서, 서버에 없는 유저면 삭제\r\n            // setLocalUpdateFriend(user_id_all);\r\n        } else {\r\n            dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] 모든 사용자 정보 없음\");\r\n        }\r\n    }\r\n}\r\n\r\nfunction MetaSelectMessage(root, props) {\r\n    if (root.meta.response.topic !== undefined && root.meta.response.topic.messages !== undefined) {\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] 내 채팅방내 채팅 정보 수신\");\r\n\r\n        setLocalTopicMessages(props.state.generalStates.SESSION_USER_INFO.id, root.meta.response.topic);\r\n\r\n        dispatch.InsertMessagesByTopicId(props, root.meta.response.topic)\r\n    } else {\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] 내 채팅방내 채팅 정보 없음\");\r\n    }\r\n}\r\n\r\nexport const ParserMeta = (props, root) => {\r\n    if (root.meta.request === undefined) {\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] request 오브젝트가 없음\");\r\n        return\r\n    }\r\n\r\n    if (root.meta.request.what === REQUEST_WHAT_TOPIC && root.meta.request.how === REQUEST_HOW_SELECT) {\r\n        MetaSelectTopic(root, props);\r\n    } else if (root.meta.request.what === REQUEST_WHAT_USER && root.meta.request.how === REQUEST_HOW_SELECT) {\r\n        MetaSelectUser(root, props);\r\n    } else if (root.meta.request.what === REQUEST_WHAT_MESSAGE && root.meta.request.how === REQUEST_HOW_SELECT) {\r\n        MetaSelectMessage(root, props);\r\n    } else {\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] META RESPONSE 파싱 실패\");\r\n    }\r\n}","import {uuidv4} from \"./auth\";\r\n\r\nconst notifyRequestMentionCreate = (topic_id, users, sequence_id) => {\r\n\r\n    return {\r\n        notify: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"mention\",\r\n                how: \"create\",\r\n                topic: {\r\n                    id: topic_id\r\n                },\r\n                users:users.map(user => {\r\n                        return {id:user.id}\r\n                    })\r\n                ,\r\n                sequence_id: sequence_id\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @param {채팅방 번호} topic_id\r\n * @param {메시지 전송한 유저} user_id\r\n * @param {답장보낸 메시지 번호 (답장한 메시지X)} sequence_id\r\n */\r\nconst notifyRequestReplyCreate = (topic_id, user_id, sequence_id) => {\r\n\r\n    return {\r\n        notify: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"reply\",\r\n                how: \"create\",\r\n                topic: {\r\n                    id: topic_id\r\n                },\r\n                user: {\r\n                    id: user_id\r\n                },\r\n                sequence_id: sequence_id\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst replyReceiveAck = (id) => {\r\n    return {\r\n        msg: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"reply\",\r\n                how: \"ack\",\r\n                notify: {\r\n                    id:id\r\n                },\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport {notifyRequestMentionCreate, notifyRequestReplyCreate, replyReceiveAck}","import * as dispatch from \"../../dispatchs\";\r\nimport {Writer} from \"../../dispatchs\";\r\nimport {\r\n    REQUEST_HOW_ACK,\r\n    REQUEST_HOW_CTRL,\r\n    REQUEST_HOW_SEND,\r\n    REQUEST_WHAT_MESSAGE,\r\n    TYPE_LOGGING_STATUS,\r\n    TYPE_LOGGING_RAW,\r\n} from \"../../../globals\";\r\nimport { MsgReceiveAck } from \"../../../../utils/nanoit/msg\";\r\nimport { notifyRequestMentionCreate, notifyRequestReplyCreate } from \"../../../../utils/nanoit/notify\";\r\n\r\nexport const ParserMessage = (props, root) => {\r\n    if (root.msg.request === undefined) {\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] request 오브젝트가 없음\");\r\n        return\r\n    }\r\n\r\n    if ( root.msg.request.what === REQUEST_WHAT_MESSAGE &&\r\n        root.msg.request.how === REQUEST_HOW_SEND\r\n    ) {\r\n\r\n        let msg = {\r\n            clint_uuid:root.msg.uuid,\r\n            content: root.msg.request.message,\r\n            created_at: new Date(),\r\n            message_type: \"send\",\r\n            sequence_id: root.msg.response.message.sequence_id,\r\n            topic_id: root.msg.request.topic.id,\r\n        }\r\n\r\n        if (root.from.me === true) {\r\n            msg['from_user_id'] = props.state.generalStates.SESSION_USER_INFO.id;\r\n            msg['from_user_name'] = props.state.generalStates.SESSION_USER_INFO.name;\r\n        }else{\r\n            msg['from_user_id'] = root.from.user.id;\r\n            msg['from_user_name'] = root.from.user.auth.name;\r\n        }\r\n\r\n        // 답장\r\n        if( root.msg.request.custom?.notify.reply && !root.msg.request.custom?.notify.mention ){\r\n            msg['custom'] = {\r\n                notify:{\r\n                    reply:{\r\n                        sequence_id:root.msg.request.custom.notify.reply.sequence_id,\r\n                        to_user_id:root.msg.request.custom.notify.reply.to_user_id\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // 멘션\r\n        if( root.msg.request.custom?.notify.mention && !root.msg.request.custom?.notify.reply ){\r\n            msg['custom'] = {\r\n                notify:{\r\n                    mention:{\r\n                        to_users_id:root.msg.request.custom.notify.mention.to_users_id\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // 답장 & 멘션\r\n        if( root.msg.request.custom?.notify.reply && root.msg.request.custom?.notify.mention ){\r\n            msg['custom'] = {\r\n                notify:{\r\n                    reply:{\r\n                        sequence_id:root.msg.request.custom.notify.reply.sequence_id,\r\n                        to_user_id:root.msg.request.custom.notify.reply.to_user_id\r\n                    },\r\n                    mention:{\r\n                        to_users_id:root.msg.request.custom.notify.mention.to_users_id\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // 메시지 store에 저장\r\n        dispatch.InsertMessageByTopicId(props, root.msg.request.topic.id, msg)\r\n        // setLocalInsertMessage(props.state.generalStates.SESSION_USER_INFO.id, root.msg.request.topic.id, msg)\r\n\r\n\r\n        // reply 요청\r\n        if( root.msg.request.custom?.notify.reply && root.from.me === true ){ \r\n            Writer(props, notifyRequestReplyCreate(\r\n                root.msg.request.topic.id,\r\n                root.msg.request.custom.notify.reply.to_user_id,\r\n                root.msg.response.message.sequence_id\r\n            ))\r\n        }\r\n\r\n        // mention 요청\r\n        if( root.msg.request.custom?.notify.mention && root.from.me === true ){ \r\n            Writer(props, notifyRequestMentionCreate(\r\n                root.msg.request.topic.id,\r\n                root.msg.request.custom.notify.mention.to_users_id,\r\n                root.msg.response.message.sequence_id\r\n            ))\r\n        }\r\n\r\n        dispatch.Logger(props, TYPE_LOGGING_RAW, \"[SEND] \" + JSON.stringify(MsgReceiveAck(root.msg.request.topic.id, root.msg.response.message.sequence_id)));\r\n        Writer(props, MsgReceiveAck(root.msg.request.topic.id, root.msg.response.message.sequence_id))\r\n    } else if (root.msg.request.what === REQUEST_WHAT_MESSAGE && root.msg.request.how === REQUEST_HOW_CTRL) {\r\n\r\n/*\r\n        dispatch.InsertMessageByTopicId(props, root.msg.request.topic.id, {\r\n            uuid: root.msg.uuid,\r\n            status: TRACE_STATUS_DONE,\r\n            message_type: REQUEST_HOW_CTRL,\r\n            sequence_id: root.msg.response.message.sequence_id,\r\n            content: root.msg.request.message,\r\n        })\r\n*/\r\n\r\n        // dispatch.InsertMessageByTopicId(props, root.msg.request.topic.id, msg)\r\n        // dispatch.InsertMessageByTopicId(props, root.msg.request.topic.id, root.msg.response.message.sequence_id, root.msg.request.message, root.from.user)\r\n\r\n    } else if (root.msg.request.what === REQUEST_WHAT_MESSAGE && root.msg.request.how === REQUEST_HOW_ACK) {\r\n\r\n    }\r\n}","import { WebClient } from '@slack/web-api'\r\n\r\n/************************************************************************\r\n * @name slackAPI\r\n * @summary slackAPI 에러메시지 전송 (chat.postMessage)\r\n * @description API DOC : https://api.slack.com/methods/chat.postMessage\r\n ***********************************************************************/\r\nconst token = process.env.REACT_APP_SLACK_BOT_TOKEN;\r\nconst web = new WebClient(token);\r\n\r\nexport const sendMessageToSlack = async(error_message) => {\r\n    const result = await web.chat.postMessage({\r\n        text: error_message,\r\n        channel: process.env.REACT_APP_CHANNEL_ID,\r\n    });\r\n    console.log(`에러 메시지 발송 ${result.ts}, 에러정보 : ${error_message}`);\r\n};\r\n\r\n","import * as dispatch from \"../../dispatchs\";\r\nimport {\r\n    TYPE_LOGGING_STATUS,\r\n    TYPE_LOGGING_RAW,\r\n    REQUEST_WHAT_REPLY,\r\n    REQUEST_HOW_CREATE,\r\n    REQUEST_WHAT_MENTION\r\n} from \"../../../globals\";\r\nimport { replyReceiveAck } from \"../../../../utils/nanoit/notify\";\r\n\r\nexport const ParserNotify = (props, root) => {\r\n    if (root.notify.request === undefined) {\r\n        dispatch.Logger(props, TYPE_LOGGING_STATUS, \"[RECV] request 오브젝트가 없음\");\r\n        return\r\n    }\r\n\r\n    // 발신자가 reply 요청시 요청한 user에게만 notify_reply가 던져짐\r\n    if (root.notify.request.what === REQUEST_WHAT_REPLY && root.from?.me === false ) {\r\n\r\n        // REPLY store 저장\r\n        dispatch.addReplyMessage(props,\r\n            root.notify.response.notify.id,\r\n            root.notify.request.topic.id,\r\n            root.from.user.id,\r\n            root.from.user.auth.name,\r\n            root.notify.request.sequence_id,\r\n        )\r\n\r\n        dispatch.Logger(props, TYPE_LOGGING_RAW, \"[RECV] \" + JSON.stringify(replyReceiveAck(root.notify.request.topic.id)));\r\n        dispatch.Writer(props, replyReceiveAck(root.notify.request.topic.id))\r\n\r\n    }else if( root.notify.request.what === REQUEST_WHAT_MENTION && root.from?.me === false ){\r\n        // MENTION store 저장\r\n        dispatch.addMentionMessage(props,\r\n            root.notify.response.notify.id,\r\n            root.notify.request.topic.id,\r\n            root.from.user.id,\r\n            root.from.user.auth.name,\r\n            root.notify.request.sequence_id,\r\n        )\r\n    }\r\n}","import * as dispatch from \"./dispatchs\";\r\nimport {REQUEST_HOW_SEND, TRACE_STATUS_SEND} from \"../globals\";\r\n\r\n\r\n\r\nexport const generalActions = (props) => {\r\n    return {\r\n        /**\r\n         * GENERALS\r\n         */\r\n        Logger: (type, log) => {\r\n            dispatch.Logger(props, type, log)\r\n        },\r\n\r\n        /**\r\n         * SESSIONS\r\n         */\r\n        UpdateIsWriteLog: (isWriteLog) => {\r\n            dispatch.UpdateIsWriteLog(props, isWriteLog)\r\n        },\r\n        UpdateLogin: (isLogin) => {\r\n            dispatch.UpdateSessionLogin(props, isLogin);\r\n        },\r\n        UpdateJwt: (token) => {\r\n            dispatch.UpdateSessionJwtToken(props, token);\r\n        },\r\n        UpdateUser: (userName, userId) => {\r\n            dispatch.UpdateSessionUser(props, userId, userName);\r\n        },\r\n\r\n        /**\r\n         * TOPICS\r\n         */\r\n        InsertMyTopic: (topic) => {\r\n            dispatch.InsertMyTopic(props, topic);\r\n        },\r\n        // TOPIC_CREATE_USING_TOPICS_ARRAY: (topics) => {\r\n        //     dispatch.DISPATCH_TOPIC_CREATE_USING_TOPICS(props, topics);\r\n        // },\r\n        ResetAllStates: () => {\r\n            dispatch.Reset(props);\r\n        },\r\n        DeleteAllTopics: () => {\r\n            dispatch.DropMyTopics(props);\r\n        },\r\n        DeleteTopicByTopicId: (topic_id) => {\r\n            dispatch.DeleteMyTopicByTopicId(props, topic_id);\r\n        },\r\n    \r\n        /**\r\n         * USERS\r\n         */\r\n        InsertUserById: (topic) => {\r\n            dispatch.InsertUserByTopicId(props, topic);\r\n        },\r\n        InsertNewUserById: (topicId, user, delIdx) => {\r\n            dispatch.InsertNewUserByTopicId(props, topicId, user, delIdx);\r\n        },\r\n        InsertUserChange: (topic, user) => {\r\n            dispatch.InsertUserChangeInfo(props, topic, user);\r\n        },\r\n        DeleteUserById: (topic, user) => {\r\n            dispatch.DeleteUserByTopicId(props, topic, user);\r\n        },\r\n\r\n        /**\r\n         * MESSAGES\r\n         */\r\n        InsertMessageById: (topic_id, message) => {\r\n            dispatch.InsertMessageByTopicId(props, topic_id, message);\r\n        },\r\n        InsertMessagesById: (topic) => {\r\n            dispatch.InsertMessagesByTopicId(props, topic);\r\n        },\r\n        updateMessageAddFile: (topic, file, sequence_id) => {\r\n            dispatch.updateMessageByAddFile(props, topic, file, sequence_id);\r\n        },\r\n\r\n        /**\r\n         * WEBSOCKETS\r\n         */\r\n        WebsocketUpdateStatus: (webSocketStatus) => {\r\n            dispatch.UpdateWebsocketStatus(props, webSocketStatus);\r\n        },\r\n        WebsocketUpdateWriter: (sendMessage) => {\r\n            dispatch.UpdateWriter(sendMessage);\r\n        },\r\n        WebsocketReceiveData: (json) => {\r\n            dispatch.ReceiveData(json, props);\r\n        },\r\n        WebsocketSendData: (json) => {\r\n            dispatch.Writer(props, json)\r\n        },\r\n        WebsocketSendChatMessage: (json) => {\r\n            dispatch.InsertMessageByTopicId(props, json.msg.request.topic.id, {\r\n                uuid: json.msg.uuid,\r\n                status: TRACE_STATUS_SEND,\r\n                message_type: REQUEST_HOW_SEND,\r\n                sequence_id: 0,\r\n                message: json.msg.request.message,\r\n                from: {\r\n                    user: {\r\n                        id: props.state.generalStates.SESSION_USER_INFO.id,\r\n                        name: props.state.generalStates.SESSION_USER_INFO.name,\r\n                    }\r\n                }\r\n            })\r\n            dispatch.WriterChatMessage(props, json)\r\n        },\r\n\r\n\r\n        /**\r\n         * PROFILE\r\n         */\r\n        UpdateProfile : (userid, fileid) => {\r\n            dispatch.updateProfileId(props, userid, fileid)\r\n        },\r\n        addProfileImg : (fileid, userid, img) => {\r\n            dispatch.addProfileImgfile(props, fileid, userid, img)\r\n        },\r\n\r\n        /**\r\n         * NOTIFY => REPLY, MENTION\r\n         */\r\n        AddReply:(notify_id, topic_id, user_id, user_name, sequence_id) => {\r\n            dispatch.addReplyMessage(props, notify_id, topic_id, user_id, user_name, sequence_id)\r\n        },\r\n        AddMention:(notify_id, topic_id, user_id, user_name, sequence_id) => {\r\n            dispatch.addMentionMessage(props, notify_id, topic_id, user_id, user_name, sequence_id)\r\n        },\r\n    }\r\n}","import {initialState, reducer} from \"../reducers/reducers\";\r\nimport {useActions} from \"../actions\";\r\nimport React, {createContext, useEffect, useReducer} from \"react\";\r\n\r\nconst StoreContext = createContext(initialState);\r\n\r\nconst StoreProvider = ({children}) => {\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    const actions = useActions(state, dispatch);\r\n\r\n    useEffect(() => console.log(state.generalStates), [state.generalStates])\r\n    // useEffect(() => console.log(state.viewStates), [state.viewStates])\r\n\r\n    return (\r\n        <StoreContext.Provider value={{state, dispatch, actions}}>\r\n            {children}\r\n        </StoreContext.Provider>\r\n    );\r\n};\r\n\r\nexport {StoreContext, StoreProvider};","import {generalActions} from './generalActions'\r\nimport {viewActions} from './viewActions'\r\n\r\nexport const useActions = (state, dispatch) => {\r\n    return {\r\n        generalActions: generalActions({state, dispatch}),\r\n        viewActions: viewActions({state, dispatch}),\r\n    }\r\n};","import * as dispatch from \"./dispatchs\";\r\nimport {\r\n    HIDE_LOGIN, \r\n    HIDE_SIGNUP,\r\n    GET_PROFILE_IMG,\r\n    GET_REPLY_CONTENT,\r\n    IS_SHOW_POPUP_MSG_ITEMS,\r\n    IS_SHOW_CHATBOX_LOADING,\r\n    GET_IMAGE_BLOB,\r\n    GET_TOPIC_USERS,\r\n    GET_ALL_TOPICS,\r\n    IS_SHOW_CHAT_MEBMER,\r\n    IS_SHOW_INVITE,\r\n    IS_SHOW_CHAT_MOBILE,\r\n    IS_SHOW_CREATE_TOPIC,\r\n    IS_SHOW_POPUP_NOTIFY,\r\n    TEMP_SAVE_MENTION_USERS,\r\n    TEMP_SAVE_MSG_FOR_REALY,\r\n    GET_TOAST_MSG,\r\n    SET_REPLY_INFO,\r\n    SET_MENTION_INFO,\r\n    TEMP_SAVE_MSG_FOR_MENTION,\r\n} from '../globals';\r\n\r\nexport const viewActions = (props) => {\r\n    return {\r\n        selecTopic: (topicId) => {\r\n            dispatch.SelecTopicById(props, topicId);\r\n        },\r\n        getToast: (msg) => {\r\n            dispatch.getToastPopup(props, msg);\r\n        },\r\n        isShowCreateTopic: (trueFalse) => {\r\n            props.dispatch({\r\n                type: IS_SHOW_CREATE_TOPIC,\r\n                isShow: trueFalse,\r\n            })\r\n        },\r\n        isShowChatMobile: (trueFalse) => {\r\n            props.dispatch({\r\n                type: IS_SHOW_CHAT_MOBILE,\r\n                isShow: trueFalse,\r\n            })\r\n        },\r\n        isShowInvite: (trueFalse) => {\r\n            props.dispatch({\r\n                type: IS_SHOW_INVITE,\r\n                isShow: trueFalse,\r\n            })\r\n        },\r\n        isShowChatUser: (trueFalse) => {\r\n            props.dispatch({\r\n                type: IS_SHOW_CHAT_MEBMER,\r\n                isShow: trueFalse,\r\n            })\r\n        },\r\n        getAllTopics: (topicsArr) => {\r\n            props.dispatch({\r\n                type: GET_ALL_TOPICS,\r\n                topicsAll: topicsArr,\r\n            })\r\n        },\r\n        getTopicUsers: (usersArr) => {\r\n            props.dispatch({\r\n                type: GET_TOPIC_USERS,\r\n                topicUsers: usersArr,\r\n            })\r\n        },\r\n        getImageBlob: (sendImage) => {\r\n            props.dispatch({\r\n                type: GET_IMAGE_BLOB,\r\n                sendImage: sendImage,\r\n            })\r\n        },\r\n        isShowChatboxLoading: (trueFalse) => {\r\n            props.dispatch({\r\n                type: IS_SHOW_CHATBOX_LOADING,\r\n                isShow: trueFalse,\r\n            })\r\n        },\r\n        isHideSignup: (trueFalse) => {\r\n            props.dispatch({\r\n                type: HIDE_SIGNUP,\r\n                isShow: trueFalse,\r\n            })\r\n        },\r\n        isHideLogin: (trueFalse) => {\r\n            props.dispatch({\r\n                type: HIDE_LOGIN,\r\n                isShow: trueFalse,\r\n            })\r\n        },\r\n        getProfileImg: (file) => {\r\n            props.dispatch({\r\n                type: GET_PROFILE_IMG,\r\n                file: file,\r\n            })\r\n        },\r\n        getReplyContent: (msg) => {\r\n            props.dispatch({\r\n                type: GET_REPLY_CONTENT,\r\n                msg: msg,\r\n            })\r\n        },\r\n        isShowPopupMessageItems: (trueFalse, item) => {\r\n            props.dispatch({\r\n                type: IS_SHOW_POPUP_MSG_ITEMS,\r\n                isShow: trueFalse,\r\n                item:item,\r\n            })\r\n        },\r\n        isShowPopupNotify: (trueFalse) => {\r\n            props.dispatch({\r\n                type: IS_SHOW_POPUP_NOTIFY,\r\n                isShow: trueFalse,\r\n            })\r\n        },\r\n        \r\n        tempSaveMentionUsers: (user) => {\r\n            props.dispatch({\r\n                type: TEMP_SAVE_MENTION_USERS,\r\n                user: user,\r\n            })\r\n        },\r\n        tempSaveMsgForRelay: (msg) => {\r\n            props.dispatch({\r\n                type: TEMP_SAVE_MSG_FOR_REALY,\r\n                msg: msg,\r\n            })\r\n        },\r\n        tempSaveMsgForMention: (msg) => {\r\n            props.dispatch({\r\n                type: TEMP_SAVE_MSG_FOR_MENTION,\r\n                msg: msg,\r\n            })\r\n        },\r\n        setReplyInfo: (replies) => {\r\n            props.dispatch({\r\n                type: SET_REPLY_INFO,\r\n                replies: replies,\r\n            })\r\n        },\r\n        setMentionInfo: (mentions) => {\r\n            props.dispatch({\r\n                type: SET_MENTION_INFO,\r\n                mentions: mentions,\r\n            })\r\n        },\r\n    }\r\n}","import React, {useContext, useState} from 'react';\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\n\r\nfunction Header({ isShowNavi, setIsShowNavi }) {\r\n    const {state, actions} = useContext(StoreContext);\r\n\r\n    let img = state.generalStates.FRIENDS_ALL.find(e => e.id === state.generalStates.SESSION_USER_INFO.id);\r\n    img = !!img && img.profile.img\r\n\r\n    return (\r\n        <header>\r\n            <div className=\"userinfo\">\r\n                <span className=\"profile\">\r\n                    {\r\n                        !img\r\n                        ? <img src=\"images/noimg.jpg\" alt=\"profile noimg\" />\r\n                        : <img src={img} />\r\n                    }\r\n                </span>\r\n                <span className=\"name\">{state.generalStates.SESSION_USER_INFO.name}</span>\r\n            </div>\r\n\r\n            <div \r\n                className=\"btn_menu\" isshow={isShowNavi==true ? 'active' : ''}\r\n                onClick={() => setIsShowNavi(isShowNavi==true ? false : true)}>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default React.memo(Header);\r\n","import React from 'react';\r\n\r\nfunction Wrapper({children}) {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(Wrapper);\r\n","import React from 'react';\r\n\r\nfunction Contents({children}) {\r\n    return (\r\n        <div className=\"Contents\">\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(Contents);\r\n","import React, {useContext, useState} from 'react';\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport {AuthLogoutNormal} from \"../../../utils/nanoit/auth\";\r\n\r\n\r\n\r\nfunction Navigation({ isShowNavi, setIsShowNavi }) {\r\n    const {state, actions} = useContext(StoreContext);\r\n\r\n    const clickCreateTopic = () => {\r\n        actions.viewActions.isShowCreateTopic(true);\r\n        setIsShowNavi(false);\r\n    }\r\n\r\n    const handleLogout = () => {\r\n        if(window.confirm('로그아웃 하시겠어요 ?')) {\r\n            actions.generalActions.WebsocketSendData(AuthLogoutNormal())\r\n            actions.viewActions.isHideLogin(false);\r\n            setIsShowNavi(false);\r\n\r\n            // 자동 로그인용 key 삭제\r\n            localStorage.removeItem('chattingLoginKey')\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"navigation\" isshow={isShowNavi==true ? 'active' : ''}>\r\n            <div className=\"head\"></div>\r\n\r\n            <button className=\"buttonbox\" onClick={clickCreateTopic}>\r\n                <AddIcon />\r\n                <span>방 만들기</span>\r\n            </button>\r\n\r\n            {/* <button className=\"buttonbox\">\r\n                <SettingsIcon />\r\n                <span>설정</span>\r\n            </button> */}\r\n\r\n            <button className=\"buttonbox\" onClick={handleLogout}>\r\n                <ExitToAppIcon />\r\n                <span>로그아웃</span>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(Navigation);\r\n","import React, {useContext, useState, useEffect, useMemo} from 'react';\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\nimport {MetaRequestTopicMessage, MetaRequestUserTopicId} from \"../../../utils/nanoit/meta\";\r\n\r\n\r\nfunction MyList() {\r\n    const {state, actions} = useContext(StoreContext);\r\n\r\n    return (\r\n        <div className=\"roomlist MyList\">\r\n            <ul>\r\n                {\r\n                    state.generalStates.TOPICS_MY?.map((topic) => \r\n                        <li \r\n                            key={topic.id} \r\n                            isactive={topic.id == state.viewStates.selectopicid ? 'active' : ''} \r\n                            onClick={() => {\r\n                                actions.viewActions.selecTopic(topic.id);\r\n                                actions.viewActions.isShowChatMobile(true);\r\n                            }}\r\n                        >\r\n                            <button id={topic.id}>\r\n                                <p>{topic.name}</p>\r\n                                <span>방 번호 : {topic.id}</span>\r\n                            </button>\r\n                        </li>\r\n                    )\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(MyList);\r\n","import React, { useContext, useEffect, useState, useCallback } from 'react';\r\nimport { DELETE_MY_TOPIC_BY_TOPIC_ID } from '../../../context/actions/dispatchs';\r\nimport { StoreContext } from \"../../../context/store/storeContext\";\r\nimport { CtrlTopicJoin } from \"../../../utils/nanoit/ctrl\";\r\nimport { MetaRequestTopicMessage, MetaRequestUserTopicId } from '../../../utils/nanoit/meta';\r\n\r\n\r\nfunction AllList({ setViewType }) {\r\n    const { state, actions } = useContext(StoreContext);\r\n    const [topicRemainder, setTopicRemainder] = useState([]);\r\n\r\n    const clickJoin = (topic_id) => {\r\n        if (window.confirm('이 방에 입장할까요 ?')) {\r\n            actions.generalActions.WebsocketSendData(CtrlTopicJoin(topic_id));\r\n            actions.viewActions.selecTopic(topic_id);\r\n            actions.viewActions.isShowChatMobile(true);\r\n\r\n            actions.generalActions.WebsocketSendData(MetaRequestTopicMessage(topic_id)); // 채팅방내 사용자 호출\r\n            // actions.generalActions.WebsocketSendData(MetaRequestUserTopicId(topic_id)); // 채팅방내 메시지 호출 => viewApp에서 호출\r\n\r\n            // UI를 감춘 후, 다시 보이게 하면서 delay를 주면, 화면상의 스크롤로 인한 깜빡임 오류가 사라짐\r\n            actions.viewActions.isShowChatboxLoading(false);\r\n            setTimeout(function(){\r\n                actions.viewActions.isShowChatboxLoading(true);\r\n            }, 10);\r\n\r\n            setViewType('MyList');\r\n        }\r\n    }\r\n\r\n\r\n    const Topics = useCallback(({ topics, clickJoin }) =>\r\n        topics.length !==0 &&\r\n        topics?.map((topic, i) =>\r\n        <li\r\n            key={i}\r\n            topicid={topic.id}\r\n            owner={topic.owner}\r\n            onClick={() => clickJoin(topic.id)}\r\n        >\r\n            <button>\r\n                <p>{topic.name}</p>\r\n                <span>방 번호 : {topic.id}</span>\r\n            </button>\r\n        </li>\r\n    ), []);\r\n\r\n\r\n    // 모든채팅방 - 나의채팅방 = 모든 채팅방 중에서 내가 들어가지 않은 채팅방\r\n    useEffect(() => {\r\n        let topic=[];\r\n        state.generalStates.TOPICS_ALL.forEach(all => {\r\n            for(let x of state.generalStates.TOPICS_MY) {\r\n                if(x.id === all.id) return;\r\n            }\r\n            topic.push(all);\r\n        })\r\n        setTopicRemainder(topic);\r\n    }, [state.generalStates.TOPICS_ALL, state.generalStates.TOPICS_MY]);\r\n\r\n\r\n    return (\r\n        <div className=\"roomlist AllList\">\r\n            <ul>\r\n                <Topics topics={topicRemainder} clickJoin={clickJoin} />\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(AllList);","import {uuidv4} from \"./auth\";\r\n\r\nconst CtrlTopicCreate = (topicName, who, usePrivate) => {\r\n    if (topicName === undefined || topicName === \"\") {\r\n        return {\r\n            ctrl: {\r\n                uuid: uuidv4(),\r\n                request: {\r\n                    what: \"topic\",\r\n                    how: \"create\",\r\n                    who: who,\r\n                    private: usePrivate,\r\n                    topic: {\r\n                        name: topicName\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        return {\r\n            ctrl: {\r\n                uuid: uuidv4(),\r\n                request: {\r\n                    what: \"topic\",\r\n                    how: \"create\",\r\n                    who: who,\r\n                    private: usePrivate,\r\n                    topic: {\r\n                        name: topicName\r\n                    },\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst CtrlTopicJoin = (id) => {\r\n    return {\r\n        ctrl: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"topic\",\r\n                how: \"join\",\r\n                topic: {\r\n                    id: id\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst CtrlTopicLeave = (id) => {\r\n    return {\r\n        ctrl: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"topic\",\r\n                how: \"leave\",\r\n                topic: {\r\n                    id: id\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst CtrlTopicInvite = (userId, topicId) => {\r\n    return {\r\n        ctrl: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"topic\",\r\n                how: \"invite\",\r\n                user: {\r\n                    id: userId\r\n                },\r\n                topic: {\r\n                    id: topicId\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport {CtrlTopicCreate, CtrlTopicJoin, CtrlTopicLeave, CtrlTopicInvite}","\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\n// 미사용중 (실제파일 이름 체크)\r\nexport const getFileName = (contentDisposition) => {\r\n    let fileName = contentDisposition\r\n        .split(';')\r\n        .filter((el) => el.indexOf('filename') > -1)\r\n        .map((ele) => ele.replace(/\"/g, '').split('=')[1]);\r\n    return fileName[0];\r\n};\r\n\r\n/**\r\n * @name fileMimeChecker\r\n * @summary 파일을 서버에 업로드 전 파일형식 체크\r\n */\r\nexport const fileMimeChecker = (filename) => {\r\n    if(\r\n        filename.indexOf('.doc') === -1 &&\r\n        filename.indexOf('.pdf') === -1 &&\r\n        filename.indexOf('.ppt') === -1 &&\r\n        filename.indexOf('.xls') === -1 &&\r\n        filename.indexOf('.txt') === -1 &&\r\n        filename.indexOf('.jpg') === -1 &&\r\n        filename.indexOf('.jpeg') === -1 &&\r\n        filename.indexOf('.png') === -1 &&\r\n        filename.indexOf('.gif') === -1 \r\n    ) {\r\n        return true\r\n    }else{\r\n        return false\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @name fileUrlCreater\r\n * @summary 메시지 받을 때 파일형식 구분해 blob 출력\r\n */\r\nexport const fileUrlCreater = (getFile, content) => {\r\n    let url;\r\n    if( content.indexOf('spreadsheetml') !== -1 ){ // excel\r\n        url = window.URL.createObjectURL(new Blob([getFile.data], {type: \"application/vnd.ms-excel\"} ));\r\n    }else if( content.indexOf('presentationml') !== -1 ){ // ppt\r\n        url = window.URL.createObjectURL(new Blob([getFile.data], {type: \"application/vnd.ms-powerpoint\"} ));\r\n    }else if( content.indexOf('wordprocessingml') !== -1 ){ // word\r\n        url = window.URL.createObjectURL(new Blob([getFile.data], {type: \"application/msword\"} ));\r\n    }else {\r\n        url = window.URL.createObjectURL(new Blob([getFile.data], {type: \"content-type\"} ));\r\n    }\r\n    return url;\r\n}\r\n\r\n\r\nconst chkarr = [];\r\n/**\r\n * @name ProfileDownload\r\n * @summary 프로필 이미지 다운로드\r\n */\r\nexport async function ProfileDownload(file_id, server_url, token, callback) {\r\n\r\n    // 같은 file_id 여러번 호출 방지\r\n    if( chkarr.find(e => e.id === file_id) !== undefined ) return;\r\n    chkarr.push({id:file_id})\r\n\r\n    const url = server_url + \"/api/v1/download/profile?file_id=\" + file_id;\r\n\r\n    await axios({\r\n        method:'GET',\r\n        url:url,\r\n        responseType:'blob',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + token\r\n        },\r\n    })\r\n    .then(res => {\r\n        // image base64\r\n        const fileReader = new FileReader();\r\n        fileReader.readAsDataURL(res.data);\r\n        fileReader.onload = function(){\r\n            callback(fileReader.result)\r\n        }\r\n    })\r\n    .catch(e => {\r\n        console.log(`error === ${e}`);\r\n    })\r\n    /* if (error.response) {\r\n        actions.generalActions.Logger(TYPE_LOGGING_STATUS, \"[SEND] post file download fail : \" + error.response.status + \", \" + error.response.statusText + \", \" + JSON.stringify(error.response.data))\r\n    } else if (error.request) {\r\n        actions.generalActions.Logger(TYPE_LOGGING_STATUS, \"[SEND] post file download fail, response receive fail\")\r\n    } else {\r\n        actions.generalActions.Logger(TYPE_LOGGING_STATUS, \"[SEND] post file download fail\", error.message)\r\n    }\r\n    actions.generalActions.Logger(TYPE_LOGGING_STATUS, \"[SEND] post file download fail\", error.config) */\r\n}\r\n","import React, {useContext, useState, useEffect, useCallback} from \"react\";\r\nimport { getLocalItem, setLocalAddUserProfile } from \"../../../context/localStorageActions\";\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\nimport { ProfileDownload } from \"../../../utils/fileUtil\";\r\n\r\n\r\nfunction UserList() {\r\n    const {state, actions} = useContext(StoreContext);\r\n    const GET_LOCAL_FRIENDS_ALL = getLocalItem('NANOIT_CHAT_FRIENDS_ALL');\r\n\r\n\r\n    useEffect(() => {\r\n        state.generalStates.FRIENDS_ALL.map((user, i) => {\r\n            /**\r\n             * @summary file_id 기준으로 프로필이미지를 다운받아 store에 등록\r\n             * @description \r\n             * * state.generalStates.FRIENDS_ALL[?].proflie : {\r\n             *      file_id: 다운로드 시 필요한 id\r\n             *      img: 다운로드된 이미지 img객체로 만들어서 담아놓음.\r\n             *   }\r\n             *  \r\n             * ※ 프로필이미지 수정될 경우 (file_id 변경될 경우) 를 대비한 추가 작업해야함.\r\n             */\r\n            if( !!user.profile && !!user.profile.file_id && !user.profile.img){\r\n\r\n                // 로컬스토리지에 img가 있으면, 서버요청 X\r\n                const localUserImg = GET_LOCAL_FRIENDS_ALL.find(f=>f.id === user.id)?.profile?.img;\r\n                if( localUserImg ) {\r\n                    //console.log(' get profile from local ')\r\n                    actions.generalActions.addProfileImg( user.profile.file_id, user.id, localUserImg);\r\n                }else{\r\n                    //console.log(' get profile from server ')\r\n                    const callbackGetImg = img => {\r\n                        actions.generalActions.addProfileImg( user.profile.file_id, user.id, img );\r\n                        setLocalAddUserProfile(user, img);\r\n                    }\r\n\r\n                    ProfileDownload(\r\n                        user.profile.file_id, \r\n                        state.generalStates.DEFAULT_CHAT_SERVER_URL,\r\n                        state.generalStates.SESSION_JWT_TOKEN, \r\n                        callbackGetImg\r\n                    );\r\n                    console.log('profile images 요청')\r\n                }\r\n            }\r\n        })\r\n    }, [state.generalStates.FRIENDS_ALL]);\r\n\r\n\r\n    return (\r\n        <div className=\"roomlist userList\">\r\n            <ul>\r\n                {\r\n                    state.generalStates.FRIENDS_ALL.map((user, i) => \r\n                        <li key={i}>\r\n                            <button>\r\n                                <div className=\"left\">\r\n                                    {\r\n                                        !!user.profile.img\r\n                                        ? <img src={user.profile.img} />\r\n                                        : <img src=\"images/noimg.jpg\" alt=\"profile noimg\"></img>\r\n                                    }\r\n                                </div>\r\n        \r\n                                <div className=\"right\">\r\n                                    <p>{user.auth.name}</p>\r\n                                    <span>{user.auth.email}</span>\r\n                                    {/* <p>{user.id}</p> */}\r\n                                </div>\r\n                            </button>\r\n                        </li>\r\n                    )\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(UserList);\r\n","import React from 'react';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\r\nimport ModeCommentIcon from '@material-ui/icons/ModeComment';\r\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\r\n\r\nfunction ListNavi({ viewType, setViewType }) {\r\n    const changeClassName = (typeName) => typeName === viewType ? 'active' : '';\r\n    \r\n    return (\r\n        <div className=\"listNavi\">\r\n            \r\n            <button\r\n                title=\"전체 회원\" \r\n                className={changeClassName('UserList')}\r\n                onClick={() => setViewType('UserList')}>   \r\n                <SupervisorAccountIcon />\r\n            </button>\r\n            \r\n            <button \r\n                title=\"모든 채팅방\"\r\n                className={changeClassName('AllList')} \r\n                onClick={() => setViewType('AllList')}>\r\n                <QuestionAnswerIcon />\r\n            </button>\r\n\r\n            <button \r\n                title=\"나의 채팅방\"\r\n                className={changeClassName('MyList')} \r\n                onClick={() => setViewType('MyList')}>\r\n                <ModeCommentIcon />\r\n            </button>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(ListNavi);\r\n","import React, {useContext, useState, useEffect, useRef} from \"react\";\r\nimport {CtrlTopicCreate} from \"../../../utils/nanoit/ctrl\";\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport {MetaRequestTopicListMe} from \"../../../utils/nanoit/meta\";\r\n\r\nfunction CreateTopic({ setViewType }) {\r\n    const {state, actions} = useContext(StoreContext)\r\n\r\n    const [topicName, setTopicName] = useState('')\r\n    const [usePrivate, setUsePrivate] = useState(false)\r\n    const inputRef = useRef();\r\n\r\n    const handleTopicName = (e) => {\r\n        setTopicName(e.target.value)\r\n    }\r\n\r\n    const handleUsePrivate = (e) => {\r\n        setUsePrivate(e.target.checked)\r\n    }\r\n\r\n    const handleOnClickCreate = () => {\r\n        actions.generalActions.WebsocketSendData(CtrlTopicCreate(topicName, \"alone\", usePrivate)) // 방 생성 요청\r\n        //actions.generalActions.WebsocketSendData(MetaRequestTopicListMe()); // 내 채팅방 정보 목록에도 갱신 !\r\n        alert(topicName + ' 새로운 채팅방을 만들었어요');\r\n\r\n        /* 초기화 */\r\n        actions.viewActions.isShowChatMobile(true);   // 모바일에서 채팅방 UI 띄우기\r\n        actions.viewActions.isShowCreateTopic(false); // 방생성 UI 숨김\r\n        setViewType(\"MyList\");     // 내 채팅방목록보기\r\n        setTopicName('');          // 입력한 방이름 삭제 (전송용)\r\n        inputRef.current.value=\"\"; // 입력한 방이름 삭제 (화면용)\r\n    }\r\n\r\n    return (\r\n        <div className=\"createTopic\" isshow={state.viewStates.isShowCreateTopic===true ? 'active' : ''}>\r\n            <div>\r\n                <div className=\"input_wrap\">\r\n                    <input type=\"text\" onChange={handleTopicName} valuecheck={topicName != '' ? 'active' : ''} ref={inputRef} />\r\n                    <p>방 이름을 입력해주세요</p>\r\n                </div>\r\n\r\n                <label >\r\n                    <input type=\"checkbox\" name=\"checkedA\" checked={usePrivate} onChange={handleUsePrivate} />\r\n                    <span>비밀 방 만들기</span>\r\n                </label>\r\n\r\n                <button className=\"btn_create\" onClick={handleOnClickCreate}>방 만들기</button>\r\n\r\n                <button \r\n                    className=\"btn_close_create\"\r\n                    onClick={() => actions.viewActions.isShowCreateTopic(false)}>\r\n                    <CloseIcon />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(CreateTopic);\r\n","import React, { useState, useContext, useEffect, useRef } from 'react';\r\nimport MyList from './MyList';\r\nimport AllList from './AllList';\r\nimport UserList from './UserList';\r\nimport ListNavi from './ListNavi';\r\nimport CreateTopic from './CreateTopic';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\nimport {MetaRequestTopicList, MetaRequestAllUser, MetaRequestTopicListMe} from \"../../../utils/nanoit/meta\"\r\nimport BtnRefresh from '../BtnRefresh';\r\n\r\n\r\nfunction List() {\r\n    const {state, actions} = useContext(StoreContext);\r\n\r\n    const [viewType, setViewType] = useState('UserList'); // AllList, MyList, UserList\r\n    \r\n    // 모든 채팅방 => 버튼 클릭할 때마다 호출\r\n    useEffect(() => {\r\n        if(viewType===\"AllList\") actions.generalActions.WebsocketSendData(MetaRequestTopicList());\r\n    }, [viewType==='AllList']);\r\n\r\n    // 전체 회원 => 버튼 클릭할 때마다 호출\r\n    useEffect(() => {\r\n        if(viewType===\"UserList\") {\r\n            actions.generalActions.WebsocketSendData(MetaRequestAllUser());\r\n        }\r\n    }, [viewType==='UserList']);\r\n\r\n    // 방만들기 UI SHOW 될 때 스크롤 최상단으로 이동\r\n    const chatRef = useRef();\r\n    useEffect(() => {\r\n        chatRef.current.scrollTop = 0;\r\n    }, [state.viewStates.isShowCreateTopic]);\r\n\r\n    /**\r\n     * 최신정보갱신 (서버에 요청)\r\n     */\r\n    const refreshAllUser = () => actions.generalActions.WebsocketSendData(MetaRequestAllUser());\r\n    const refreshAllTopic = () => actions.generalActions.WebsocketSendData(MetaRequestTopicList());\r\n    /* const refreshMyTopic = () => actions.generalActions.WebsocketSendData(MetaRequestTopicListMe()); */\r\n\r\n\r\n    return (\r\n        <div className=\"list\" ref={chatRef} isoverflow={state.viewStates.isShowCreateTopic===true ? 'hidden' : ''}>\r\n            <ListNavi \r\n                viewType={viewType}\r\n                setViewType={setViewType} \r\n            />\r\n\r\n            { viewType ==='UserList' && \r\n                <>\r\n                    <div className=\"list_title\">\r\n                        전체 회원 \r\n                        {/* <BtnRefresh refresh={refreshAllUser} />  */}\r\n                    </div>\r\n                    <UserList />\r\n                </>\r\n            }\r\n            \r\n            { viewType ==='AllList'  && \r\n                <>\r\n                    <div className=\"list_title\">\r\n                        전체 채팅\r\n                        {/* <BtnRefresh refresh={refreshAllTopic} />  */}\r\n                    </div>\r\n                    <AllList setViewType={setViewType} />\r\n                </>\r\n            }\r\n            \r\n            { viewType ==='MyList'   && \r\n                <>\r\n                    <div className=\"list_title\">\r\n                        나의 채팅\r\n                        {/* <BtnRefresh \r\n                            // refresh={refreshMyTopic} \r\n                        />  */}\r\n                        </div>\r\n                    <MyList />\r\n                </>\r\n            }\r\n\r\n            <CreateTopic setViewType={setViewType} />\r\n            <button \r\n                className=\"btn_create_mobile\" \r\n                onClick={()=> actions.viewActions.isShowCreateTopic(true)}>\r\n                <AddIcon />\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(List);\r\n","import React, {useContext} from 'react';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\nimport SpeakerNotesIcon from '@material-ui/icons/SpeakerNotes';\r\nimport MeetingRoomIcon from '@material-ui/icons/MeetingRoom';\r\nimport {CtrlTopicLeave} from \"../../../utils/nanoit/ctrl\";\r\n\r\n\r\nfunction ChatHeader() {\r\n    const {state, actions} = useContext(StoreContext);\r\n\r\n    const clickExitTopic = () => {\r\n        if(window.confirm('이 채팅방을 나가시겠어요?')) {\r\n            actions.generalActions.WebsocketSendData(CtrlTopicLeave(state.viewStates.selectopicid))\r\n            actions.viewActions.isShowChatMobile(false); // 모바일에서 채팅방 UI 띄우기\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"chatHeader\">\r\n            <button\r\n                title=\"다른 채팅방 목록보기\"\r\n                className=\"btn_closechat\"\r\n                onClick={() => actions.viewActions.isShowChatMobile(false)}>\r\n                <ArrowBackIcon />\r\n            </button>\r\n\r\n\r\n            <button title=\"채팅방 참여자 목록\" className=\"btn_member\" onClick={() => actions.viewActions.isShowChatUser(true)}>\r\n                <SpeakerNotesIcon />\r\n            </button>\r\n\r\n            <button title=\"채팅방에 초대\" className=\"btn_invite\" onClick={() => actions.viewActions.isShowInvite(true)}>\r\n                <PersonAddIcon />\r\n            </button>\r\n\r\n            <button title=\"채팅방 나가기\" className=\"btn_exit\" onClick={clickExitTopic}>\r\n                <MeetingRoomIcon />\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(ChatHeader);\r\n","import React, {useRef, useContext, useEffect} from 'react';\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\n\r\nfunction PopupMessage({ setIsShowPopupMessage, getClickMessage, whoIsClickMsg }) {\r\n    const {state, actions} = useContext(StoreContext);\r\n\r\n    /**\r\n     * @name closePopup\r\n     * @summary 메시지 팝업창 닫기\r\n     */\r\n    const closePopup = () => setIsShowPopupMessage(false);\r\n\r\n    /**\r\n     * @name clickCopy\r\n     * @summary 복사\r\n     */\r\n    const copyRef = useRef();\r\n    const clickCopy = () => {\r\n        copyRef.current.select();\r\n        document.execCommand(\"copy\");\r\n\r\n        closePopup();\r\n    }\r\n\r\n    /**\r\n     * @name clickReply\r\n     * @summary 답장\r\n     */\r\n    const clickReply = () => {\r\n        actions.viewActions.isShowPopupMessageItems(true, 'reply'); // 답장 UI 보이도록 변경\r\n        closePopup();\r\n    }\r\n\r\n    /**\r\n     * @name clickRelay\r\n     * @summary 전달\r\n     */\r\n    const clickRelay = () => {\r\n        actions.viewActions.isShowPopupMessageItems(true, 'relay');\r\n        actions.viewActions.tempSaveMsgForRelay(getClickMessage);\r\n\r\n        closePopup();\r\n    }\r\n\r\n    /**\r\n     * @name clickDelete\r\n     * @summary 삭제\r\n     */\r\n    const clickDelete = () => {\r\n        // actions.generalActions.\r\n        closePopup();\r\n    }\r\n\r\n    return (\r\n        <div className=\"popupMessage\">\r\n            <div className=\"con\">\r\n                {\r\n                    // 이미지/파일은 복사 X, 전달만 가능\r\n                    !getClickMessage.file &&\r\n                    <>\r\n                        <button onClick={clickCopy}>복사</button>\r\n                        <input type=\"text\" value={getClickMessage.content} className=\"input_msg_copy\" ref={copyRef} readOnly />\r\n                    </>\r\n                }\r\n                {\r\n                    whoIsClickMsg === 'left' &&\r\n                    <button onClick={clickReply}>답장</button>\r\n                }\r\n                {   // 이미지/파일만 전달해야하므로..\r\n                    getClickMessage.file &&\r\n                    <button onClick={clickRelay}>전달</button>\r\n                }\r\n\r\n                <button onClick={clickDelete}>삭제</button>\r\n            </div>\r\n            <div className=\"bg\" onClick={closePopup}></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PopupMessage;\r\n","import React, {useContext, useState ,useEffect, useRef, useCallback} from 'react';\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\nimport axios from \"axios\";\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport PopupMessage from './PopupMessage';\r\nimport SubdirectoryArrowRightIcon from '@material-ui/icons/SubdirectoryArrowRight';\r\nimport { fileUrlCreater } from '../../../utils/fileUtil';\r\nimport { getLocalUserTopic } from '../../../context/localStorageActions';\r\n\r\n\r\nfunction ChatReciever() {\r\n    const {state, actions} = useContext(StoreContext);\r\n\r\n    const [msgAll, setMsgAll] = useState('');\r\n    const [isShowPopupMessage, setIsShowPopupMessage] = useState(false);\r\n    const [getClickMessage, setGetClickMessage] = useState(''); // 사용자가 클릭한 메시지 정보\r\n    const [whoIsClickMsg, setWhoIsClickMsg] = useState('right');\r\n\r\n    const chatRef = useRef();\r\n\r\n    const userId = state.generalStates.SESSION_USER_INFO.id;\r\n    const topicId = state.viewStates.selectopicid;\r\n\r\n    const localUserTopic = getLocalUserTopic(userId, topicId);\r\n\r\n    const openTopic = state.generalStates.TOPICS_MY.filter(e => e.id === topicId)[0];\r\n\r\n\r\n    /****************************************\r\n        functions\r\n    ****************************************/\r\n    /**\r\n     * @name actionForPopup\r\n     * @summary 채팅방 내 메시지 클릭시 팝업창 띄우기\r\n     * @description\r\n     * * 1. 메시지 클릭 시 팝업창 show\r\n     * * 2. 메시지팝업창으로 msg 전달\r\n     * @param {msg} 사용자가 선택한 메시지의 정보\r\n     */\r\n    const actionForPopup = useCallback((msg, who) => {\r\n        setGetClickMessage(msg);        // 사용자가 선택한 메시지의 정보\r\n        setIsShowPopupMessage(true);    // show 팝업창 UI\r\n        actions.viewActions.isShowPopupMessageItems(false, 'reply'); // 메시지입력창 상단 '답장' UI 안보이게 설정\r\n\r\n        if( who === 'left' ) {\r\n            setWhoIsClickMsg('left'); // 나 & 상대 클릭 구분해 팝업내용 출력\r\n\r\n            // reply 내용을 sender에서 받을 수 있도록 store에 저장\r\n            actions.viewActions.getReplyContent({\r\n                from_user_id:msg.from_user_id,\r\n                from_user_name:msg.from_user_name,\r\n                content:msg.content,\r\n                sequence_id:msg.sequence_id\r\n            });\r\n        }\r\n        else setWhoIsClickMsg('right');\r\n    }, []);\r\n\r\n\r\n    /**\r\n     * @name changeBlobToFile\r\n     * @summary 파일id기준으로 서버에 파일 요청\r\n     */\r\n    const changeBlobToFile = (idx, fileId, fileType) => {\r\n        if(!idx || !fileId || !fileType) return;\r\n        if( !!openTopic.messages[idx].file ) return;\r\n        // const local_path = 'C:\\Users\\nanoit\\Desktop'; // 이미지외에 파일은 로컬 어딘가에 저장해야함...\r\n\r\n        try{\r\n            return axios({\r\n                method:'GET',\r\n                url:state.generalStates.DEFAULT_CHAT_SERVER_URL + '/api/v1/download/file?file_id=' + fileId,\r\n                responseType: fileType==='image' ? 'blob' : 'arraybuffer',\r\n                headers:{\r\n                    'Authorization': 'Bearer ' + state.generalStates.SESSION_JWT_TOKEN\r\n                },\r\n            });\r\n        }catch(error){\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n\r\n    let timer; // timer 내부 value가 중간에 변경되지 않게 하려면 함수밖에 선언해야함\r\n    /**\r\n     * @name showMesssagePopup\r\n     * @summary 클릭 n초간 유지할 경우 팝업창 띄우기\r\n     */\r\n    const showMesssagePopup = (msg, who, event) => {\r\n        if( event === 'mousedown' ){\r\n            timer = setTimeout(() => actionForPopup(msg, who) ,1000);\r\n        }\r\n        else clearTimeout(timer);\r\n    }\r\n\r\n\r\n    /**\r\n     * @name actionToFindMessage\r\n     * @summary 클릭해서 찾은 답장메시지에 애니메이션 효과\r\n     */\r\n    const actionToFindMessage = useCallback((reply_id) => {\r\n        const getMessageDOM = document.getElementById(reply_id);\r\n        getMessageDOM.classList.add('active');\r\n        setTimeout(() => getMessageDOM.classList.remove('active'), 1000);\r\n    },[]);\r\n\r\n\r\n    /**\r\n     * @name getReplyInformation\r\n     * @summary 답장메시지에 필요한 정보 추출\r\n     */\r\n    const getReplyInformation = useCallback((msg, messages) => {\r\n        let is_reply = false;\r\n        let reply_message = '';\r\n        let reply_id = '';\r\n\r\n        if( !!msg?.custom?.notify.reply?.sequence_id ){\r\n            is_reply = true;\r\n            reply_message = messages?.find(m => m.sequence_id === msg?.custom?.notify.reply.sequence_id);\r\n        }\r\n\r\n        // 중간에 undefined되는 부분 에러처리\r\n        if( !reply_message ) return <p></p>;\r\n        reply_id = `reply_${reply_message.topic_id}_${reply_message.sequence_id}`;\r\n\r\n        return {reply_message, reply_id, is_reply}\r\n    },[]);\r\n\r\n\r\n    /**\r\n     * @name getMentionInformation\r\n     * @summary 멘션메시지에 필요한 정보 추출\r\n     * @description 동작 : 멘션이 포함된 메시지에서 내 번호와 일치하는 메시지만 가져오기\r\n     * * ※필요한 정보\r\n     * * 1. 내 번호와 일치하는 멘션메시지 전체\r\n     */\r\n\r\n    /*\r\n    const getMentionInformation = (msg) => {\r\n        let isMention = false;\r\n        let myMentionMsg = null;\r\n\r\n        if( !!msg?.custom?.notify.mention ){\r\n            isMention = true;\r\n            const myMention = msg.custom.notify.mention.to_users_id.map((user, i) => !!user.find(u => u.id === state.generalStates.SESSION_USER_INFO.id))\r\n            myMentionMsg = myMention; \r\n        }\r\n        return { isMention, myMentionMsg }\r\n    }\r\n    */\r\n\r\n\r\n    /**\r\n     * @name updateFileByMessage\r\n     * @summary 메시지 화면에 뿌리기 전에 이미지/파일 갱신\r\n        // 타입 전체 목록 https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\r\n     * \r\n     */\r\n    const updateFileByMessage = async() => {\r\n        // 반드시 for문을 써야 순서대로 읽어서 처리된다.\r\n        const roomMessages = openTopic?.messages;\r\n        for( let i=0; i < roomMessages?.length; i++ ){\r\n            const fileId = roomMessages[i].content.split(':')[1];\r\n            const fileType = roomMessages[i].content?.split('/')[0];\r\n\r\n            if( roomMessages[i]?.file ) continue; // 파일있으면 패스\r\n            if( !fileId && !fileType ) continue;  // 일반메시지면 패스\r\n\r\n            if( localUserTopic.length && localUserTopic.messages[i]?.file ){ // 로컬스토리지에 파일 있으면\r\n                roomMessages[i].file = localUserTopic.messages[i].file;\r\n                console.log('로컬스토리지에서 이미지 가져와서 store에 저장');\r\n                continue;\r\n            }else{ // 로컬에 없으면 서버에 요청\r\n                \r\n                roomMessages[i].file = ''; // file key 생성 (바로 넣으면 file을 못찾아서 오류남)\r\n                if( fileType === \"image\" ) {\r\n                    const getImage = await changeBlobToFile(i, fileId, \"image\");\r\n                    const reader = new FileReader();\r\n                    reader.readAsDataURL(getImage.data);\r\n                    reader.onloadend = () => roomMessages[i].file = reader.result;\r\n                }else if( fileType === \"application\" || fileType === \"text\" ){\r\n                    const getFile = await changeBlobToFile(i, fileId, \"other\");\r\n                    const url = fileUrlCreater(getFile, roomMessages[i].content);\r\n                    roomMessages[i].file = url;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * 마지막 파일을 변환할 때 await 되지 않아서 마지막 파일만 화면에 출력되지 않는 것으로 파악됨.\r\n         * setTimeout으로 임시해결\r\n         */\r\n        setTimeout(() => {\r\n            setMsgAll(openTopic);\r\n        }, 10);\r\n    };\r\n\r\n    /**\r\n     * @name moveScrollToBottom\r\n     * @summary 메시지창 스크롤 최하단으로 이동\r\n     */\r\n    const moveScrollToBottom = useCallback(() => {\r\n        setTimeout(() => {\r\n            const { scrollHeight, clientHeight } = chatRef.current;\r\n            chatRef.current.scrollTop = scrollHeight - clientHeight;\r\n        }, 1);\r\n    }, []);\r\n\r\n\r\n    /**\r\n     * @name msgNotifyCatcher\r\n     * @summary 메시지 내에 reply, mention 정보 있을 경우 서버에 전송\r\n     */\r\n    /*\r\n    const msgNotifyCatcher = (msg) => {\r\n        if( msg.custom.notify === 'reply' ){\r\n            console.log('msgNotifyCatcher');\r\n            actions.generalActions.WebsocketSendData(\r\n                notifyRequestReplyCreate(\r\n                    state.viewStates.selectopicid,\r\n                    msg.from_user_id,\r\n                    msg.sequence_id\r\n                )\r\n            )\r\n        }\r\n    }\r\n    */\r\n\r\n\r\n    /****************************************\r\n        useEffect\r\n    ****************************************/\r\n    // 파일메시지는 있는데 파일메시지안에 파일이 없을경우 파일 갱신 실행\r\n    useEffect(() => {\r\n        if( openTopic?.messages?.find(m => !!m.content.split(':')[1] || !!m.content.split('/')[0]) ){\r\n            updateFileByMessage();\r\n        }\r\n    }, [state.viewStates.selectopicid]);\r\n\r\n\r\n    // 로컬 스토리지에 메시지 업데이트 + 스크롤 최하단으로 이동\r\n    useEffect(() => {\r\n        // setLocalUpdateMessage(userId, topicId, openTopic?.messages);\r\n        moveScrollToBottom();\r\n    }, [msgAll, openTopic]);\r\n\r\n\r\n    /****************************************\r\n        start - msg component\r\n    ****************************************/\r\n    const MsgFile = ({ msg }) => {\r\n        const fileType = msg.content.split('/')[0];\r\n        const fileId = msg.content.split(':')[1];\r\n\r\n        return(\r\n            fileType === 'image'\r\n            ? <img src={msg.file} />\r\n            : <div>\r\n                <a \r\n                    href={msg.file}\r\n                    className=\"btn_filedownload\" \r\n                    download={`file_${fileId}`}\r\n                >\r\n                    <div className=\"filedown_text\">\r\n                        <p>파일 다운로드</p>\r\n                        {`file_${fileId}`}\r\n                    </div>\r\n                    <GetAppIcon className=\"icon_download\" />\r\n                </a>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    const MsgMention = useCallback(({ msg }) => {\r\n        return(\r\n            msg.content.split(' ').map((content, i) => {\r\n                if( !!state.generalStates.FRIENDS_ALL.find(m => `@${m.auth.name}` === content) ) {\r\n                    return <button key={i}>{content}</button>\r\n                }\r\n                else return content\r\n            })\r\n        )\r\n    },[state.generalStates.FRIENDS_ALL]);\r\n\r\n\r\n    // user\r\n    const MsgLeft = useCallback(({ msg, messages }) => {\r\n        const { reply_message, reply_id, is_reply } = getReplyInformation(msg, messages);\r\n        // const { isMention, myMentionMsg } = getMentionInformation(msg);\r\n\r\n        // 프로필 이미지 가져오기\r\n        let img = state.generalStates.FRIENDS_ALL.find(e => e.id === msg.from_user_id);\r\n        img = !!img && img.profile.img;\r\n\r\n\r\n        return (\r\n            <li className=\"msg_outer left user\" id={`reply_${msg.topic_id}_${msg.sequence_id}`}>\r\n                <div className=\"msg_left_profile\">\r\n                    { !!img ? <img src={img} /> : <img src=\"images/noimg.jpg\" alt=\"profile noimg\" /> }\r\n                </div>\r\n                <div className=\"msg_left_userinfo\">\r\n                    <div className=\"top_name\">\r\n                        {msg.from_user_name}\r\n                    </div>\r\n                    <div className=\"btm_msg\">\r\n                        <div className=\"msg_inner\"\r\n                            onClick={() => !!reply_message && actionToFindMessage(reply_id)}\r\n                            onMouseUp={() => showMesssagePopup(msg, 'left', 'mouseup')}\r\n                            onMouseDown={() => showMesssagePopup(msg, 'left', 'mousedown')}\r\n                        >\r\n                            {\r\n                                is_reply === true &&\r\n                                <a className=\"msg_reply\"\r\n                                    href={`#${reply_id}`}\r\n                                >\r\n                                    {reply_message.from_user_name}에게 답장<br />\r\n                                    {reply_message.reply_content}\r\n                                </a>\r\n                            }\r\n                            {\r\n                                <div className=\"msg\">\r\n                                    { is_reply === true && <SubdirectoryArrowRightIcon className=\"icon_reply\" /> }\r\n\r\n                                    {   // 1번째 조건\r\n                                        msg.content.indexOf('@') === -1  && !msg.file\r\n                                        ? msg.content\r\n                                        : ( // 2번째 조건\r\n                                            msg.content.indexOf('@') !== -1\r\n                                        )?( \r\n                                            <MsgMention msg={msg} />\r\n                                        ):( // !!msg.file\r\n                                            <MsgFile msg={msg} />\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </li>\r\n        )\r\n    }, [state.generalStates.FRIENDS_ALL, openTopic]); // 멘션 기능을 위해\r\n\r\n\r\n    // info\r\n    const MsgCenter = useCallback(({ msg }) => {\r\n\r\n        return(\r\n            <li className=\"msg_outer center\">\r\n                <div className=\"msg_inner\">\r\n                    <div className=\"msg\">{msg.content}</div>\r\n                </div>\r\n            </li>\r\n        )\r\n    } , []);\r\n\r\n\r\n    // me\r\n    const MsgRight = useCallback(({ msg, messages }) => {\r\n        const { reply_message, reply_id, is_reply } = getReplyInformation(msg, messages);\r\n\r\n\r\n        return (\r\n            <li className=\"msg_outer right me\" id={`reply_${msg.topic_id}_${msg.sequence_id}`}>\r\n                <div className=\"msg_inner\"\r\n                    onClick={() => !!reply_message && actionToFindMessage(reply_id)}\r\n                    onMouseDown={() => showMesssagePopup(msg, 'right', 'mousedown')}\r\n                    onMouseUp={() => showMesssagePopup(msg, 'right', 'mouseup')}\r\n                >\r\n                    {\r\n                        is_reply === true &&\r\n                        <a className=\"msg_reply\"\r\n                            href={`#${reply_id}`}\r\n                        >\r\n                            {reply_message.from_user_name}에게 답장<br />\r\n                            {reply_message.content}\r\n                        </a>\r\n                    }\r\n                    <div className=\"msg\">\r\n                        { is_reply === true && <SubdirectoryArrowRightIcon className=\"icon_reply\" /> }\r\n                        {   // 1번째 조건\r\n                            msg.content.indexOf('@') === -1  && !msg.file\r\n                            ? msg.content\r\n                            : ( // 2번째 조건\r\n                                msg.content.indexOf('@') !== -1\r\n                            )?(\r\n                                <MsgMention msg={msg} />\r\n                            ):( // !!msg.file\r\n                                <MsgFile msg={msg} />\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </li>\r\n        )\r\n    }, [state.generalStates.FRIENDS_ALL]); // 멘션 기능을 위해\r\n\r\n    /****************************************\r\n        end - msg component\r\n    ****************************************/\r\n\r\n    return (\r\n        <>\r\n        <div className=\"chatReciever\" ref={chatRef} isshow={state.viewStates.isChatboxLoading===true ? \"active\" : \"\"}>\r\n            <ul>\r\n                {\r\n                    openTopic?.messages?.map((msg, i) => \r\n                        msg.message_type == 'ctrl' ?\r\n                        (\r\n                            <MsgCenter key={i} msg={msg} />\r\n                        ) : (\r\n                            !!msg.content && (\r\n                                msg.from_user_id === userId\r\n                                ? <MsgRight key={i} msg={msg} messages={openTopic.messages} />\r\n                                : <MsgLeft key={i} msg={msg} messages={openTopic.messages} />\r\n                            )\r\n                        )\r\n                    )\r\n                }\r\n            </ul>\r\n        </div>\r\n\r\n        {isShowPopupMessage === true &&\r\n            <PopupMessage\r\n                setIsShowPopupMessage={setIsShowPopupMessage}\r\n                getClickMessage={getClickMessage}\r\n                whoIsClickMsg={whoIsClickMsg}\r\n            />\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default React.memo(ChatReciever);","import React, { useCallback } from 'react';\r\nimport EmojiData from '../../../emoji/emoji.json'\r\n\r\n\r\nfunction Emoji({ viewEmoji, setViewEmoji,  setHaveEmoji }) {\r\n\r\n    const EmojiList = useCallback(() => {\r\n\r\n        return(\r\n            EmojiData.emoji.map((emoji, i) =>\r\n                <li key={i} onClick={() => {\r\n                    setHaveEmoji(emoji);\r\n                    setViewEmoji(false);\r\n                }}>\r\n                    {emoji}\r\n                </li>\r\n            )\r\n        )\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className=\"emoji\">\r\n            <div className=\"popup_emoji\" isshow={viewEmoji==true ? 'active' : ''}>\r\n                <ul>\r\n                    <EmojiList />\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(Emoji);\r\n","import {uuidv4} from \"./auth\";\r\n\r\nconst FileSendAfterUpload = (topicId, fileId, mime) => {\r\n    return {\r\n        msg: {\r\n            uuid: uuidv4(),\r\n            request: {\r\n                what: \"message\",\r\n                how: \"send\",\r\n                using: \"file\",\r\n                topic: {\r\n                    id:topicId\r\n                },\r\n                file: {\r\n                    id:fileId\r\n                },\r\n                mime: mime\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport {FileSendAfterUpload}","import React, {useCallback, useContext, useEffect} from \"react\";\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n/**\r\n * @name SearchUsers\r\n * @summary 메시지 입력창에 @ 입력 시 뜨는 '사용자찾기' 팝업창\r\n * @param {setMentionUsers} 멘션유저 저장\r\n * @param {setShowSearchUsers} 멘션창 show/hide\r\n */\r\nfunction SearchUsers({msgRef, setShowSearchUsers }) {\r\n    const {state, actions} = useContext(StoreContext);\r\n\r\n    const clickGetUser = (user) => {\r\n        actions.viewActions.tempSaveMentionUsers(user);\r\n        setShowSearchUsers(false);\r\n        msgRef.current.focus();\r\n    }\r\n\r\n    const clickClosePopup = () => setShowSearchUsers(false);\r\n    \r\n    const Users = () => {\r\n\r\n        return(\r\n            <ul>\r\n                {\r\n                    state.generalStates.TOPICS_MY.filter(e => e.id === state.viewStates.selectopicid)[0].users.map((user, i) => {\r\n\r\n                        // 새로운 회원이 가입해서 채팅방 들어왔을 경우 에러 대응\r\n                        if( !user ) return;\r\n\r\n                        // 채팅방의 사용자 중 나는 목록에서 제외\r\n                        if( user.id === state.generalStates.SESSION_USER_INFO.id ) return;\r\n\r\n                        return(\r\n                            <li key={i}>\r\n                                <button onClick={() => clickGetUser(user)}>\r\n                                    {\r\n                                        /**\r\n                                         * @summary 현재 user와 일치하는 profile img를 회원목록에서 검색한 후 출력\r\n                                         */\r\n                                        !user?.profile?.file_id\r\n                                        ? <img src=\"images/noimg.jpg\" alt=\"profile noimg\"></img>\r\n                                        : <img src={state.generalStates.FRIENDS_ALL.find(e => e.profile.file_id === user.profile?.file_id).profile.img} />\r\n                                    }\r\n                                    {user.auth?.name}\r\n                                </button>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"searchUsers\">\r\n            <h3>\r\n                <span>사용자 찾기</span>\r\n                <button onClick={clickClosePopup}><CloseIcon /></button>\r\n            </h3>\r\n            <Users />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchUsers;\r\n","import React, { useContext } from 'react';\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\nimport SubdirectoryArrowRightIcon from '@material-ui/icons/SubdirectoryArrowRight';\r\n\r\nfunction ItemReply() {\r\n    const {state, actions} = useContext(StoreContext);\r\n\r\n    return (\r\n        <div className=\"ItemReply\">\r\n            <div className=\"top\">\r\n                <SubdirectoryArrowRightIcon className=\"icon_reply\" />\r\n                <span>{state.viewStates.replyContent.from_user_name} 에게 답장</span>\r\n            </div>\r\n            <div className=\"btm\">\r\n                <span>{state.viewStates.replyContent.content}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ItemReply;\r\n","import React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport ReplyIcon from '@material-ui/icons/Reply';\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport { MsgSend } from '../../../utils/nanoit/msg';\r\nimport { FileSendAfterUpload } from '../../../utils/nanoit/file'\r\nimport { getLocalItem } from '../../../context/localStorageActions';\r\n\r\n/**\r\n * @name ItemRelay \r\n * @summary 메시지 (이미지/파일) 특정 채팅방에 전송\r\n * @description \r\n * * 추가로 특정회원에게도 전달 가능하도록 확장성 고려. 현재는 채팅방 1:1채팅 기능구현이 안되어 있기 때문에 보류\r\n */\r\nfunction ItemRelay() {\r\n    const {state, actions} = useContext(StoreContext);\r\n    const [activeTab, setActiveTab] = useState('topic');\r\n    const inputRef = useRef([]);\r\n\r\n    // 회원에게 전달\r\n    const sendToUser = () => {\r\n        alert('회원에게 전달')\r\n    }\r\n\r\n    // 내 채팅방에 전달\r\n    const sendToTopic = () => {\r\n        /**\r\n         * 1. 방이동\r\n         * 2. 방에 메시지 전달\r\n         * 3. '전달되었습니다' 메시지창 띄우기\r\n         * 4. 전달 UI 창 숨기기\r\n         * \r\n         * error \r\n         * 1. 메시지의 이미지도 로컬에 미리 담아놓아야함.\r\n         * 2. 전송할 때 fileid, fileType이 필요하므로, 별도로 같이 메시지에 저장해놓도록 수정.\r\n         */\r\n        // 해당 채팅방으로 이동\r\n        const relay_to_topicid = Number(inputRef.current.find(input => input.checked === true)?.value);\r\n        if( !relay_to_topicid ) return;\r\n        actions.viewActions.selecTopic(relay_to_topicid); // 1\r\n        /*\r\n        // 로컬에 저장된 blob\r\n        const GET_LOCAL_NANOIT = getLocalItem('NANOIT');\r\n        if( !GET_LOCAL_NANOIT ) return;\r\n        const user = GET_LOCAL_NANOIT.CHAT.USERS.find(u => u.id === state.generalStates.SESSION_USER_INFO.id);\r\n        */\r\n        const topic = state.generalStates.TOPICS_MY.find(t => t.id === state.viewStates.msgForRelay.topic_id);\r\n        const msg = topic?.messages?.filter(m =>m.sequence_id === state.viewStates.msgForRelay.sequence_id);\r\n\r\n        const fileId = msg[0].content.split(':')[1];\r\n        const fileType = msg[0].content.split(':')[0];\r\n\r\n        actions.generalActions.WebsocketSendData(FileSendAfterUpload(state.viewStates.msgForRelay.topic_id, fileId,fileType)); \r\n        actions.generalActions.WebsocketSendData(MsgSend(state.viewStates.msgForRelay.topic_id, String(fileType+\":\"+fileId) )); // 2\r\n        actions.viewActions.getToast('메시지가 전달되었어요') // 3\r\n        actions.viewActions.isShowPopupMessageItems(false, 'relay'); // 4\r\n    }\r\n\r\n\r\n    // 전달\r\n    const clickSubmit = () => {\r\n        if( activeTab === 'user' ){\r\n            // sendToUser()\r\n        }else if( activeTab === 'topic' ){\r\n            sendToTopic()\r\n        }\r\n    }\r\n\r\n    // 취소: 전달UI 닫기\r\n    const clickCancel = () => {\r\n        actions.viewActions.isShowPopupMessageItems(false, 'relay');\r\n    }\r\n\r\n    return (\r\n        <div className=\"ItemRelay\">\r\n            <div className=\"top\">\r\n                <span>전달하기</span>\r\n            </div>\r\n            <div className=\"mid\">\r\n\r\n                <div className=\"tab\">\r\n                    {/* <button \r\n                        className={activeTab === 'user' ? 'active' : ''} \r\n                        onClick={() => setActiveTab('user')}>\r\n                            회원\r\n                    </button> */}\r\n\r\n                    <button \r\n                        className={activeTab === 'topic' ? 'active' : ''} \r\n                        onClick={() => setActiveTab('topic')}\r\n                        >\r\n                            내 채팅방\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"relaylist\">\r\n                    <ul>\r\n                        {/* 회원 */\r\n                            /* activeTab === 'user' &&\r\n                            state.generalStates.FRIENDS_ALL.map((user, i) =>\r\n                                <li key={i}>\r\n                                    <label>\r\n                                        {   user.profile.img !== undefined\r\n                                            ? user.profile.img\r\n                                            : <img src=\"images/noimg.jpg\" alt=\"profile noimg\" />\r\n                                        }\r\n                                        <p className=\"name\">{user.auth.name}</p>\r\n                                        <input type=\"radio\" name=\"input_relay\" />\r\n                                        <CheckBoxOutlineBlankIcon className=\"checkicon icon_unchecked\" />\r\n                                        <CheckBoxIcon className=\"checkicon icon_checked\" />\r\n                                    </label>\r\n                                </li>\r\n                            ) */\r\n                        }\r\n                        {/* 채팅 */\r\n                            activeTab === 'topic' &&\r\n                            state.generalStates.TOPICS_MY.map((topic,i) =>\r\n                                <li key={topic.id}>\r\n                                    <label>\r\n                                        {/* <img src=\"images/noimg.jpg\" alt=\"profile noimg\" /> */}\r\n                                        <ChatIcon className=\"icon_room\" />\r\n                                        <p className=\"name\">{topic.name}</p>\r\n                                        <input type=\"radio\" ref={(elem) => (inputRef.current[i]=elem)} name=\"input_relay\" value={topic.id} />\r\n                                        <CheckBoxOutlineBlankIcon className=\"checkicon icon_unchecked\" />\r\n                                        <CheckBoxIcon className=\"checkicon icon_checked\" />\r\n                                    </label>\r\n                                </li>\r\n                            )\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <div className=\"btm\">\r\n                <button onClick={clickSubmit} className=\"btn_submit\">전달</button>\r\n                <button onClick={clickCancel} className=\"btn_cancel\">취소</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ItemRelay;\r\n","import React, {useCallback, useContext, useEffect, useRef, useState} from \"react\";\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport SentimentSatisfiedOutlinedIcon from '@material-ui/icons/SentimentSatisfiedOutlined';\r\nimport Emoji from './Emoji';\r\nimport {MsgSend} from \"../../../utils/nanoit/msg\";\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\nimport {FileSendAfterUpload} from \"../../../utils/nanoit/file\";\r\nimport axios from \"axios\";\r\nimport {TYPE_LOGGING_STATUS} from \"../../../context/globals\";\r\nimport SearchUsers from \"./SearchUsers\";\r\nimport ItemReply from \"./ItemReply\";\r\nimport ItemRelay from \"./ItemRelay\";\r\nimport { fileMimeChecker } from \"../../../utils/fileUtil\";\r\nimport { notifyRequestMentionCreate, notifyRequestReplyCreate } from \"../../../utils/nanoit/notify\";\r\n\r\n\r\nfunction ChatSender() {\r\n    const {state, actions} = useContext(StoreContext);\r\n\r\n    const [viewEmoji, setViewEmoji] = useState(false);\r\n    const [haveEmoji, setHaveEmoji] = useState('');\r\n    const [message, setMessage] = useState(\"\");\r\n    const [showSearchUsers, setShowSearchUsers] = useState(false);\r\n\r\n    const chatRef = useRef();\r\n    const msgRef = useRef();\r\n\r\n    /****************************************\r\n     * useEffect\r\n     ****************************************/\r\n    // 이모지\r\n    useEffect(() => {\r\n        const newMessage = msgRef.current.value.concat(haveEmoji);\r\n        setMessage(newMessage);\r\n        msgRef.current.value = msgRef.current.value + haveEmoji\r\n    }, [haveEmoji]);\r\n\r\n    // 멘션\r\n    useEffect(() => {\r\n        const choice_user = state.viewStates.mentionUsers[state.viewStates.mentionUsers.length-1]?.name;\r\n        const add_msg = !!choice_user ? `${choice_user} ` : '';\r\n        const newMessage = msgRef.current.value.concat(add_msg);\r\n        setMessage(newMessage);\r\n    }, [state.viewStates.mentionUsers]);\r\n\r\n    // 스크롤 최하단으로 내리기\r\n    useEffect(() => {\r\n        const { scrollHeight, clientHeight } = chatRef.current;\r\n        chatRef.current.scrollTop = scrollHeight - clientHeight;\r\n    }, [message]);\r\n\r\n\r\n    /****************************************\r\n     * start - mention\r\n     ****************************************/\r\n    const hideMentionPopup = () => {\r\n        // 골뱅이 입력 지울경우 멘션창 hide\r\n        if( msgRef.current.value.indexOf('@') === -1 ){\r\n            setShowSearchUsers(false)\r\n        }\r\n    }\r\n    \r\n    const showHideMentionPopup = (key) => {\r\n        key === '@' ? setShowSearchUsers(true) : setShowSearchUsers(false);\r\n    }\r\n\r\n    /**\r\n     * @name validateMentionUsers\r\n     * @description\r\n     * 1. 멘션 전송 경우의 수\r\n     * -- @ 가 있는지\r\n     * -- @ 글자 바로 뒤에 채팅방안의 회원목록의 이름과 일치하는지\r\n     * -- 일치하는 멘션만 store에 저장 (receiver에서 사용)\r\n     */\r\n    const validateMentionUsers = useCallback(() => {\r\n        if( message.indexOf('@') !== -1 ){\r\n            const result_users = [];\r\n            const topic = state.generalStates.TOPICS_MY.find(t => t.id === state.viewStates.selectopicid);\r\n            const now_sequence_id = Number(topic.messages[topic.messages.length-1].sequence_id)+1;\r\n\r\n            topic.users?.map((e, i) => {\r\n                if (!e.auth?.name) return;\r\n                const matching_users = message.split(' ').find(m => m === `@${e.auth.name}`);\r\n                !!matching_users && result_users.push({id:e.id, name:e.auth.name});\r\n            });\r\n            /* actions.generalActions.setMentionInfo(\r\n                state.viewStates.selectopicid,\r\n                result_users,\r\n                now_sequence_id\r\n            ) */\r\n            /* \r\n                actions.generalActions.WebsocketSendData(\r\n                    notifyRequestMentionCreate(\r\n                        state.viewStates.selectopicid,\r\n                        result_users,\r\n                        now_sequence_id\r\n                    )\r\n                )\r\n            */\r\n        }\r\n    }, [message]);\r\n    /****************************************\r\n     * end - mention\r\n     ****************************************/\r\n\r\n\r\n    /****************************************\r\n     * functions\r\n    ****************************************/\r\n    const onChangeMessage = useCallback((e) => {\r\n        setMessage(e.target.value);\r\n        hideMentionPopup();\r\n    }, []);\r\n\r\n    const onSend = useCallback(() => {\r\n        if (!!message) {\r\n            let msgType = '';\r\n            let mentionUsersId = null;\r\n            let replyUserId = null;\r\n            let sequenceId = null;\r\n\r\n            /**\r\n             * 멘션추가 조건\r\n             * 1. '@'가 있다.\r\n             * 2. '@'뒤에 글자가 전체회원목록에 있는 사람의 이름과 일치한다.\r\n             * \r\n             * @name getMention\r\n             * @param {reply-mention || metion || reply} type\r\n             * @returns\r\n             *  isMention   => 멘션존재유무\r\n             *  users_id    => 멘션보낼 유저 번호\r\n             */\r\n            const getMention = (type) => {\r\n                let isMention = false;\r\n                let usersId = [];\r\n\r\n                if( message.indexOf('@') !== -1 ) {\r\n                    type==='mention' ? msgType='mention' : msgType='reply-mention';\r\n                    isMention=true;\r\n\r\n                    message.split(' ').map((content, i) => {\r\n                        const getUser = state.generalStates.FRIENDS_ALL.find(m => `@${m.auth.name}` === content);\r\n                        !!getUser && usersId.push(getUser);\r\n                    })\r\n                }\r\n                return {isMention, usersId}\r\n            }\r\n\r\n            if( state.viewStates.popupMessageItems.reply === true ){\r\n                const { isMention, usersId } = getMention('reply-mention');\r\n                if(isMention) mentionUsersId=usersId;\r\n\r\n                msgType = 'reply';\r\n                replyUserId = state.viewStates.replyContent.from_user_id;\r\n                sequenceId = state.viewStates.replyContent.sequence_id;\r\n\r\n            }else{ // 일반 전송\r\n                const { isMention, usersId } = getMention('mention');\r\n                if(isMention) mentionUsersId=usersId;\r\n            }\r\n\r\n            actions.generalActions.WebsocketSendData(\r\n                MsgSend(\r\n                    state.viewStates.selectopicid,\r\n                    message,\r\n                    msgType,\r\n                    mentionUsersId,\r\n                    replyUserId,\r\n                    sequenceId,\r\n                )\r\n            )\r\n\r\n            // 발신자 : REPLY 요청 전송\r\n            /* if( msgType==='reply' ){\r\n                actions.generalActions.WebsocketSendData(\r\n                    notifyRequestReplyCreate(\r\n                        state.viewStates.selectopicid,\r\n                        replyUserId,\r\n                        sequenceId\r\n                    )\r\n                )\r\n            }\r\n\r\n            // 발신자 : MENTION 요청 전송\r\n            if( !!mentionUsersId ){\r\n                actions.generalActions.WebsocketSendData(\r\n                    notifyRequestMentionCreate(\r\n                        state.viewStates.selectopicid,\r\n                        mentionUsersId,\r\n                        sequenceId\r\n                    )\r\n                )\r\n            } */\r\n\r\n            // 전송 후 답장 UI 안보이게 설정\r\n            actions.viewActions.isShowPopupMessageItems(false, 'reply'); \r\n\r\n            //actions.generalActions.WebsocketSendData(MsgSend(state.viewStates.selectopicid, message))\r\n\r\n            validateMentionUsers();\r\n\r\n            // 메시지 초기화\r\n            setMessage(\"\")\r\n            msgRef.current.value=\"\"\r\n            actions.viewActions.tempSaveMentionUsers('');\r\n        }\r\n    }, [message]);\r\n\r\n\r\n    /**\r\n     * @name onKeyDownSend\r\n     * @summary input에 메시지 입력시 동작\r\n     * @param {*} e\r\n     */\r\n    const onKeyDownSend = (e) => {\r\n        showHideMentionPopup(e.key); // 멘션\r\n        if (e.key === 'Enter') onSend(); // 메시지 전송\r\n    }\r\n\r\n\r\n    /**\r\n     * @name uploadFile\r\n     * @summary 파일 업로드 & 업로드 후 다운로드해서 화면에 출력\r\n     * @param {*} e \r\n     */\r\n    const uploadFile = (e) => {\r\n        if(e.target.value=='') return;\r\n        if( fileMimeChecker(e.target.files[0].name) ) {\r\n            actions.viewActions.getToast('지원하지 않는 파일형식이에요.');\r\n            return;\r\n        }\r\n\r\n        const topicId = state.viewStates.selectopicid;\r\n        const url = state.generalStates.DEFAULT_CHAT_SERVER_URL + \"/api/v1/upload/file?topic_id=\" + topicId;\r\n        const formData = new FormData();\r\n\r\n        formData.append(\"file\", e.target.files[0]);\r\n\r\n        axios({\r\n            method: 'POST',\r\n            url: url,\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n                'Authorization': 'Bearer ' + state.generalStates.SESSION_JWT_TOKEN\r\n            },\r\n            data: formData,\r\n        })\r\n        .then(function(response){ // handle success\r\n            try {\r\n                let data = response.data;\r\n                let status = response.status;\r\n                let statusText = response.statusText;\r\n                let fileType = response.data.file.response.file.mime;\r\n                let fileId = data.file.response.file.id;\r\n                \r\n                actions.generalActions.Logger(TYPE_LOGGING_STATUS, \"[SEND] post file upload success, STATUS:\" + status);\r\n                actions.generalActions.Logger(TYPE_LOGGING_STATUS, \"[SEND] post file upload success, STATUS_TEXT:\" + statusText);\r\n                actions.generalActions.Logger(TYPE_LOGGING_STATUS, \"[SEND] post file upload success, DATA:\" + JSON.stringify(data));\r\n                actions.generalActions.WebsocketSendData(FileSendAfterUpload(topicId, fileId, fileType));\r\n                actions.generalActions.WebsocketSendData(MsgSend(state.viewStates.selectopicid, String(fileType+\":\"+fileId) )); // msg전송\r\n            } catch (error) {\r\n                if (error.response) {\r\n                    actions.generalActions.Logger(TYPE_LOGGING_STATUS, \"[SEND] post file upload fail : \" + error.response.status + \", \" + error.response.statusText + \", \" + JSON.stringify(error.response.data))\r\n                } else if (error.request) {\r\n                    actions.generalActions.Logger(TYPE_LOGGING_STATUS, \"[SEND] post file upload fail, response receive fail\")\r\n                } else {\r\n                    actions.generalActions.Logger(TYPE_LOGGING_STATUS, \"[SEND] post file upload fail, catch fail1\" + error.message)\r\n                }\r\n                actions.generalActions.Logger(TYPE_LOGGING_STATUS, \"[SEND] post file upload fail, catch fail2\" + error.config)\r\n            }\r\n        })\r\n        .catch(function (error) { // handle error\r\n            console.log('error======' + error);\r\n        })\r\n\r\n        e.target.value='';//모두 완료후 input초기화\r\n    }\r\n    \r\n    return (\r\n        <div className=\"chatSender\" ref={chatRef}>\r\n            <button title=\"파일/이미지 첨부\" className=\"btn_sendfile\" onChange={uploadFile}>\r\n                <form method=\"POST\" className=\"uploadForm\">\r\n                    <label>\r\n                        <AttachFileIcon />\r\n                        <input type=\"file\" className=\"file_sendfile\" />\r\n                    </label>\r\n                </form>\r\n            </button>\r\n            {/* <button title=\"이미지 첨부\" className=\"btn_sendimage\" onChange={uploadFile}>\r\n                <form method=\"POST\" className=\"uploadForm\">\r\n                    <label>\r\n                        <ImageIcon />\r\n                        <input type=\"file\" className=\"file_sendimage\" />\r\n                    </label>\r\n                </form>\r\n            </button> */}\r\n            <button \r\n                title=\"이모지\" \r\n                className=\"btn_emoji\"\r\n                onClick={() => setViewEmoji( viewEmoji==true?false:true )}>\r\n                <SentimentSatisfiedOutlinedIcon />\r\n            </button>\r\n            <div className=\"input_inner\">\r\n                <input\r\n                    type=\"text\" \r\n                    className=\"input_send_msg\" \r\n                    placeholder=\"메시지 입력\" \r\n                    onChange={onChangeMessage}\r\n                    onKeyDown={onKeyDownSend}\r\n                    value={message}\r\n                    ref={msgRef}\r\n                />\r\n            </div>\r\n\r\n            <button title=\"메시지 전송\" className=\"btn_sendmsg\" onClick={onSend}>\r\n                <SendIcon className={ msgRef?.current?.value ? 'icon_send_msg active' : 'icon_send_msg'} />\r\n            </button>\r\n\r\n            <Emoji viewEmoji={viewEmoji} setViewEmoji={setViewEmoji} setHaveEmoji={setHaveEmoji} />\r\n\r\n            {\r\n                showSearchUsers === true &&\r\n                <SearchUsers \r\n                    msgRef={msgRef}\r\n                    setShowSearchUsers={setShowSearchUsers} />\r\n            }\r\n\r\n            {   /* 답장 UI */\r\n                state.viewStates.popupMessageItems.reply === true &&\r\n                <ItemReply />\r\n            }\r\n\r\n            {   /* 전달 UI */\r\n                state.viewStates.popupMessageItems.relay === true &&\r\n                <ItemRelay />\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(ChatSender);","import React, { useState, useEffect, useContext, useCallback  } from 'react';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\nimport {CtrlTopicInvite} from \"../../../utils/nanoit/ctrl\";\r\nimport { MetaRequestAllUser } from '../../../utils/nanoit/meta';\r\n\r\nfunction PopupInvite() {\r\n    const {state, actions} = useContext(StoreContext);\r\n\r\n    const [user, setUser] = useState([]); // 체크멤버 id\r\n\r\n    // 현재 접속한 방정보\r\n    const topic = state.generalStates.TOPICS_MY.filter(e => e.id === state.viewStates.selectopicid)[0];\r\n\r\n\r\n    // 초대창 닫히면 체크멤버 초기화\r\n    useEffect(() => {\r\n        state.viewStates.isShowInvite===false && setUser([]);\r\n    }, [state.viewStates.isShowInvite]);\r\n\r\n    // 초대할 멤버 클릭 시\r\n    const clickUser = userid => {\r\n        const idx = user.indexOf(userid); // 배열에 중복값 확인\r\n        const newUser = user.slice();     // 복사\r\n        \r\n        if( idx === -1 ){  //  추가\r\n            setUser( user.concat(userid) );\r\n        }else{             //  삭제\r\n            newUser.splice(idx,1);\r\n            setUser(newUser);\r\n        }\r\n    }\r\n\r\n    // 사용자 초대 클릭\r\n    const handleOnClickInvite = () => {\r\n        user.map(user_id => {\r\n            actions.generalActions.WebsocketSendData(CtrlTopicInvite(user_id, state.viewStates.selectopicid))\r\n        })\r\n\r\n        if(user.length===0){\r\n            actions.viewActions.getToast('초대할 사용자를 선택해주세요')\r\n            return\r\n        }else{\r\n            // alert('사용자를 초대했어요')\r\n            actions.viewActions.isShowInvite(false)\r\n        }\r\n    }\r\n\r\n    // 컴포넌트\r\n    const Users = ({ topic, chkUser, clickUser }) => {\r\n        const topicUserArr = [];\r\n\r\n        topic?.users?.forEach((user) => {\r\n            if( user === undefined ) return; // 새로운 회원이 가입해서 채팅방 들어왔을 경우 에러 대응\r\n            topicUserArr.push(user.id);\r\n        })\r\n        \r\n        return (\r\n            state.generalStates.FRIENDS_ALL.map((user, i) =>\r\n                topicUserArr.indexOf(user.id) === -1 && // 채팅방 회원은 제외\r\n                <button onClick={() => clickUser(user.id)} key={i}>\r\n                    <div className=\"left\">\r\n                        {\r\n                            /**\r\n                             * @summary 현재 user와 일치하는 profile img를 회원목록에서 검색한 후 출력\r\n                             */\r\n                            !user.profile.file_id\r\n                            ? <img src=\"images/noimg.jpg\" alt=\"profile noimg\"></img>\r\n                            : <img src={state.generalStates.FRIENDS_ALL.find(e => e.profile.file_id === user.profile.file_id).profile.img} />\r\n                        }\r\n                        <span>{user.auth.name}</span>\r\n                    </div>\r\n                    <div className=\"right\">\r\n                        {\r\n                            chkUser.indexOf(user.id) > -1 && <CheckIcon className=\"icon_check\" />\r\n                        }\r\n                    </div>\r\n                </button>\r\n            )\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"popup_invite popup_right\" isshow={state.viewStates.isShowInvite==true ? 'active' : ''}>\r\n            <div className=\"invite_header\">\r\n                <button onClick={() => actions.viewActions.isShowInvite(false)}>취소</button>\r\n                <button \r\n                    onClick={handleOnClickInvite} \r\n                    className=\"btn_confirm\">\r\n                    완료\r\n                </button>\r\n            </div>\r\n            <div className=\"numbox\">\r\n                <span className=\"num\">{user.length}</span>\r\n                <span>명 초대</span>\r\n            </div>\r\n            <Users topic={topic} chkUser={user} clickUser={clickUser} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(PopupInvite);\r\n","import React, { useState, useEffect, useContext, useCallback } from 'react';\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\nimport { MetaRequestAllUser } from '../../../utils/nanoit/meta';\r\n\r\nfunction PopupUsers() {\r\n    const {state, actions} = useContext(StoreContext);\r\n    let topic = state.generalStates.TOPICS_MY.filter(e => e.id === state.viewStates.selectopicid)[0];\r\n\r\n    /**\r\n     * @summary 채팅방 내 회원 초대할 경우 '사용자찾기' 팝업창에 회원목록 갱신\r\n     */\r\n    useEffect(() => {\r\n        topic = state.generalStates.TOPICS_MY.filter(e => e.id === state.viewStates.selectopicid)[0]\r\n    }, [state.generalStates.TOPICS_MY, state.generalStates.FRIENDS_ALL]);\r\n\r\n\r\n    const Users = useCallback(() => {\r\n\r\n        return (\r\n            <ul>\r\n                {\r\n                    topic?.users?.map((user, i) => {\r\n\r\n                        // 새로운 회원이 가입해서 채팅방 들어왔을 경우 에러 대응\r\n                        if( !user ) return;\r\n\r\n                        return(\r\n                            <li key={i}>\r\n                                <div className=\"left\">\r\n                                    {\r\n                                        /**\r\n                                         * @summary 현재 user와 일치하는 profile img를 회원목록에서 검색한 후 출력\r\n                                         */\r\n                                        user?.profile?.file_id == undefined\r\n                                        ? <img src=\"images/noimg.jpg\" alt=\"profile noimg\" />\r\n                                        : <img src={state.generalStates.FRIENDS_ALL.find(e => e.profile.file_id === user.profile?.file_id).profile.img} />\r\n                                    }\r\n                                    {user?.auth?.name}\r\n                                </div>\r\n                                <div className=\"right\">{topic.owner===user.id && '방장'}</div>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    }, [state.viewStates.isShowChatUser]); // 신규회원이 가입 후 바로 들어왔을 경우를 대비해 전체회원목록으로부터 정보갱신\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"popup_right popup_users\" isshow={state.viewStates.isShowChatUser==true ? 'active' : ''}>\r\n            <div className=\"Chatuser_header\">\r\n                <button \r\n                    onClick={() => actions.viewActions.isShowChatUser(false)}\r\n                    className=\"btn_confirm\">\r\n                    확인\r\n                </button>\r\n                <div className=\"numbox\">\r\n                    <span className=\"num\">\r\n                        {topic?.users?.length}\r\n                    </span>\r\n                    <span>명 참여중</span>\r\n                </div>\r\n            </div>\r\n            \r\n            <Users />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(PopupUsers);\r\n","import React from 'react';\r\n\r\nfunction EmptyCover({isshow}) {\r\n    return (\r\n        <div className=\"emptyCover\" isshow={isshow}>\r\n            <h2>hello !</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(EmptyCover);\r\n","import React, {useContext} from 'react';\r\nimport ChatHeader from './ChatHeader';\r\nimport ChatReciever from './ChatReciever';\r\nimport ChatSender from './ChatSender';\r\nimport PopupInvite from './PopupInvite';\r\nimport PopupUsers from './PopupUsers';\r\nimport EmptyCover from './EmptyCover';\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\n\r\n\r\nfunction Chat() {\r\n    const {state, actions} = useContext(StoreContext);\r\n\r\n\r\n    return (\r\n        <div className=\"chat\" isshow={state.viewStates.isShowChatMobile===true ? 'active' : ''}>\r\n            <div className=\"chatWrap\">\r\n                <ChatHeader />\r\n                <ChatReciever />\r\n                <ChatSender />\r\n            </div>\r\n            <PopupInvite />\r\n            <PopupUsers />\r\n            <EmptyCover isshow={state.viewStates.isShowChatMobile===true ? '' : 'active'} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Chat);","import React, {useContext, useState, useMemo, useRef, useCallback, useEffect} from 'react';\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\nimport { AuthSignup } from '../../../utils/nanoit/auth';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport axios from 'axios';\r\nimport { ControlPointSharp } from '@material-ui/icons';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nfunction Signup() {\r\n    const {state, actions} = useContext(StoreContext);\r\n\r\n    const [profile, setProfile] = useState('');\r\n\r\n    const clickGoToLogin = useCallback(() => {\r\n        actions.viewActions.isHideSignup(true);\r\n    },[]);\r\n\r\n\r\n    // 프로필 이미지 업로드\r\n    const uploadProfile = (input) => {\r\n        // 인풋 태그에 파일이 있는 경우\r\n        if(input.target.files && input.target.files[0]) {\r\n            // 이미지 미리보기\r\n            const fileUrl = window.URL.createObjectURL(new Blob([input.target.files[0]], { type: 'img' } ));\r\n            const img = React.createElement('img', {src : fileUrl});\r\n            \r\n            setProfile(img);\r\n            actions.viewActions.getProfileImg(input.target.files[0]);\r\n        }else{\r\n            setProfile('');\r\n            actions.viewActions.getProfileImg('');\r\n        }\r\n    }\r\n\r\n    const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n    const onSubmit = data => {\r\n        if( errors.name ){\r\n            actions.viewActions.getToast('정보를 다시 입력해주세요')\r\n            return;\r\n        }else{\r\n            actions.generalActions.WebsocketSendData(AuthSignup(data.name, data.email, data.password));\r\n        }\r\n    }\r\n    // console.log(watch('name'))\r\n\r\n\r\n    return (\r\n        <div className=\"signup\">\r\n            <div className=\"signup_inner\">\r\n                <h3>회원가입</h3>\r\n                <label className=\"add_propfile\">\r\n                    <input type=\"file\" onChange={uploadProfile} />\r\n                    <AddIcon className=\"icon_profile\" />\r\n                    {profile}\r\n                </label>\r\n                <p className=\"text_profile\">프로필 이미지 등록</p>\r\n\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <input type=\"text\" placeholder=\"이름\" className=\"input_common\" {...register('name', {required:true})} />\r\n                    <input autoComplete=\"username\" type=\"email\" placeholder=\"이메일\" className=\"input_common\" {...register('email', {required:true})} />\r\n                    <input autoComplete=\"current-password\" type=\"password\" placeholder=\"비밀번호\" className=\"input_common\" {...register('password', {required:true})} />\r\n                    <button className=\"btn_signup\" type=\"submit\" value=\"submit\">회원가입</button>\r\n                </form>\r\n                \r\n                <button className=\"btn_login\" onClick={clickGoToLogin}>로그인 할래요</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Signup;","import React from 'react';\r\n\r\nfunction Cat() {\r\n    return (\r\n        <div className=\"cat\">\r\n            <div className=\"content\">\r\n                <div className=\"container\">\r\n                    <svg id=\"bongo-cat\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 787.3 433.8\">\r\n                        <defs>\r\n                            <symbol id=\"eye\" data-name=\"eye\" viewBox=\"0 0 19.2 18.7\">\r\n                            <circle cx=\"9.4\" cy=\"9.1\" r=\"8\"></circle>\r\n                            <path d=\"M16.3,5.1a1.3,1.3,0,0,1-1.4-.3,7.2,7.2,0,0,0-4.5-2.6A7.2,7.2,0,0,0,5.5,3.5,6.8,6.8,0,0,0,2.8,7.8a6.8,6.8,0,0,0,1,4.8,6.2,6.2,0,0,0,4,2.7,6.1,6.1,0,0,0,4.6-.7,6.7,6.7,0,0,0,2.9-3.7,6.4,6.4,0,0,0-.5-4.5c-.1-.2.8-1,1.5-1.3s2.2,0,2.3.5a9.4,9.4,0,0,1-.2,7.2,9.4,9.4,0,0,1-5.1,5.1,9,9,0,0,1-7,.2A9.6,9.6,0,0,1,1,13.5,9.2,9.2,0,0,1,.4,6.6,8.9,8.9,0,0,1,4.6,1.3,9,9,0,0,1,11.2.2,9.3,9.3,0,0,1,16.7,4C16.9,4.3,17,4.8,16.3,5.1Z\"></path>\r\n                            </symbol>\r\n                            <symbol id=\"paw-pads\" data-name=\"paw-pads\" viewBox=\"0 0 31.4 33.9\">\r\n                            <path d=\"M6.8,16a3.7,3.7,0,0,1,1.1,2.8,3.2,3.2,0,0,1-1.6,2.6L5,21.8H4.4a2.8,2.8,0,0,1-1.8.3A4.2,4.2,0,0,1,.2,19.1,7.7,7.7,0,0,1,0,17.6a2.8,2.8,0,0,1,.6-2,3.2,3.2,0,0,1,2.1-.8H4A5,5,0,0,1,6.8,16Zm7.3-4.8a1.8,1.8,0,0,0,.7-.5l.7-.4a3.5,3.5,0,0,0,1.1-1,3.2,3.2,0,0,0,.3-1.4,1.4,1.4,0,0,0-.2-.6,3.4,3.4,0,0,0-.3-2.4,3.2,3.2,0,0,0-2.1-1.5H13.1a4.7,4.7,0,0,0-1.6.4,2,2,0,0,0-.9.9l-.4.6v.4a6.1,6.1,0,0,0-.5,1.2,4.3,4.3,0,0,0,0,1.6,3.5,3.5,0,0,0,.5,2l.7.6a3.3,3.3,0,0,0,1.7.7A3,3,0,0,0,14.1,11.2ZM22.7,7l.6.2h.3A2.3,2.3,0,0,0,25,6.8l.4-.3.6-.3a7.5,7.5,0,0,0,1.5-.9,4.2,4.2,0,0,0,.8-1.2,1.9,1.9,0,0,0,.1-1.5A2.6,2.6,0,0,0,27.5,1,3.5,3.5,0,0,0,23.6.3a3.8,3.8,0,0,0-2,1.5,4.8,4.8,0,0,0-.7,2,3.6,3.6,0,0,0,.9,2.6ZM31,24.1a13.5,13.5,0,0,0-2.2-4.7,36.6,36.6,0,0,0-3.2-3.9,5.3,5.3,0,0,0-5-1.9,10.5,10.5,0,0,0-4.5,2.2A5.6,5.6,0,0,0,13.5,20a15.1,15.1,0,0,0,1.2,6.3c.8,2,1.7,4,2.6,5.9a1.6,1.6,0,0,0,1.5.8,1.7,1.7,0,0,0,1.9.9,17.1,17.1,0,0,0,8.7-4.8,8.2,8.2,0,0,0,1.7-2C31.6,26.3,31.3,25,31,24.1Z\" fill=\"#ef97b0\"></path>\r\n                            </symbol>\r\n                        </defs>\r\n                        <g id=\"head\">\r\n                            <g id=\"head__outline\">\r\n                            <path d=\"M303.2,186.3c4-7,14.8-20.2,20-26,17-19,34.6-34.9,43-41l12-8s16.6-32,21-33c9-2,33,22,33,22s20-9,79,7c41,11.1,47,14,57,22,7.5,6,18,16,18,16s33.7-19.5,41-15-2,66-2,66,5.9,12.9,11,22c9.1,16.2,13.6,20.2,19,31,3.6,7.2,8.4,28.5,10.5,43.5l-385-62Z\" fill=\"#fff\"></path>\r\n                            <path d=\"M302.9,186.9c-1.2,3-5.9,12.6-9,18.8l-12.5,25.5-.6-1.2c32.2,4.8,64.4,9.2,96.6,13.6s64.4,8.9,96.5,13.7,64.3,9.7,96.4,14.9,64.1,10.5,96.2,15.8l-5.6,5.5c-1.2-8.5-2.8-17.1-4.8-25.6-1-4.1-2.1-8.4-3.4-12.3l-.5-1.4-.5-1.4-.6-1.3-.7-1.3a59.5,59.5,0,0,0-3.1-5.5c-2.2-3.6-4.7-7.2-7.1-11s-4.8-7.6-7-11.5c-4.5-7.9-8.3-15.9-12.1-24a4,4,0,0,1-.3-2.6h0c1.4-9.1,2.7-18.2,3.7-27.4.5-4.5.9-9.1,1.2-13.7s.4-9.1.2-13.4a26.4,26.4,0,0,0-.8-6,8.1,8.1,0,0,0-.3-1.1c-.1-.3-.2-.4-.1-.3h.3c0,.1.1.1,0,.1h-.6a11.9,11.9,0,0,0-2.5.2,16.3,16.3,0,0,0-3,.7,56.7,56.7,0,0,0-6.2,2.1,212.6,212.6,0,0,0-24.5,11.9h-.1a3.9,3.9,0,0,1-4.7-.6c-4.9-4.7-10-9.4-15.1-13.8a86.6,86.6,0,0,0-7.9-6,46.1,46.1,0,0,0-8.5-4.6c-6-2.6-12.6-4.6-19.2-6.7l-19.8-5.7a324.9,324.9,0,0,0-40-8.9,196.8,196.8,0,0,0-20.2-1.8c-1.7,0-3.4-.1-5.1,0h-2.5l-2.5.2-2.5.2-2.4.4-2.4.5-1.1.3h-.5l-.4.2H433a2.5,2.5,0,0,1-2.6-.7c-4.6-4.6-9.5-9.1-14.5-13.2a82.7,82.7,0,0,0-7.9-5.7L403.9,81a10.8,10.8,0,0,0-4-.9c-.1,0-.3,0-.3.1h0l-.7.5-1.5,1.7c-1,1.2-2,2.6-2.9,3.9s-3.6,5.5-5.3,8.3c-3.5,5.7-6.8,11.4-9.9,17.3h0l-.4.4-10.2,6.6a53.6,53.6,0,0,0-4.9,3.4l-4.6,3.8c-6.2,5.1-12.1,10.6-17.9,16.2s-11.3,11.4-16.7,17.4c-2.7,3-5.3,6.1-7.8,9.2s-5,6.3-7.4,9.5c-4.2,5.6-7,10-5.7,7.1a34.1,34.1,0,0,1,2.1-3.8l3.8-5.6c2.9-4,6.3-8.3,8.5-10.9s4.4-5.2,6.7-7.7l6.9-7.4c4.7-4.9,9.4-9.7,14.3-14.3s9.8-9.3,15-13.7l4-3.2,4.2-2.9,8.3-5.7-.4.4c3-5.9,6.1-11.8,9.4-17.7,1.6-2.9,3.3-5.8,5.1-8.6l2.9-4.3,1.8-2a7.5,7.5,0,0,1,1.3-1.1c.1-.2.6-.4,1-.5l.9-.2h1.7l1.4.2,2.7.8c1.7.7,3.3,1.5,4.8,2.3a84,84,0,0,1,8.5,5.7A175.7,175.7,0,0,1,434,98.5l-2.9-.6.8-.3.7-.2L434,97l2.7-.7,2.7-.5a23,23,0,0,1,2.6-.3l2.7-.3,2.7-.2h5.3a182.1,182.1,0,0,1,21,1.3,332.5,332.5,0,0,1,41.1,8.4l20,5.5c6.7,2,13.4,4,20.1,6.7a65.3,65.3,0,0,1,9.8,5.1c3.1,2.1,5.9,4.3,8.6,6.5,5.4,4.5,10.6,9.2,15.7,14l-4.8-.6c4.1-2.4,8.2-4.6,12.4-6.7s8.6-4.2,13-6c2.3-.9,4.6-1.7,7-2.4a23.4,23.4,0,0,1,3.8-.9,20,20,0,0,1,4.4-.4h1.3l1.5.4a5.1,5.1,0,0,1,1.7.7l.9.7.8.7a8.3,8.3,0,0,1,1.6,2.6,12.7,12.7,0,0,1,.8,2.3,44.6,44.6,0,0,1,1.1,7.7c.2,5,.1,9.7-.1,14.4s-.7,9.5-1.2,14.1c-.9,9.4-2.1,18.6-3.6,27.9l-.3-2.6c3.7,7.9,7.5,15.8,11.8,23.3,2.1,3.7,4.4,7.4,6.8,11s4.9,7.2,7.3,11.1c1.3,2,2.4,4,3.5,6.1a10.9,10.9,0,0,0,.8,1.5l.8,1.8.7,1.7.6,1.7c1.5,4.4,2.6,8.7,3.7,13.1a262,262,0,0,1,5.2,26.4,4.9,4.9,0,0,1-4.1,5.6h-1.5c-32.1-5-64.2-9.9-96.3-15.1s-64.1-10.6-96.1-16.1-64-11.4-96-17.4-63.9-11.9-95.9-17.4h-.1a.8.8,0,0,1-.6-.9v-.2l16.6-32.1C299.8,192.2,304.1,183.9,302.9,186.9Z\"></path>\r\n                            </g>\r\n                            <g id=\"head__face\">\r\n                            <g id=\"eyes\">\r\n                                <use width=\"19.2\" height=\"18.7\" transform=\"translate(474.8 195.2)\" xlinkHref=\"#eye\"></use>\r\n                                <use width=\"19.2\" height=\"18.7\" transform=\"matrix(-0.51, -0.85, 0.82, -0.5, 370.39, 192.59)\" xlinkHref=\"#eye\"></use>\r\n                            </g>\r\n                            <g id=\"mouth\">\r\n                                <path d=\"M399.2,186.3c.9,3.6,2.6,7.8,6,9,6.4,2.3,19-6,19-6s4.1,12.4,10,15,10.7-1.7,16-6\" fill=\"#fff\"></path>\r\n                                <path d=\"M450.2,198.3c.6,1.2.2,1.9-.2,2.2a36.7,36.7,0,0,1-7.6,4.9,14.9,14.9,0,0,1-4.8,1.4h-1.4l-1.3-.2-1.4-.4-1.3-.6a21.6,21.6,0,0,1-6.4-7.2,52.8,52.8,0,0,1-4-8.3l3.8,1.3a62.3,62.3,0,0,1-7.1,4.1,32.1,32.1,0,0,1-7.9,2.8,13.2,13.2,0,0,1-4.9.2l-1.4-.3a7.5,7.5,0,0,1-1.3-.6,7.9,7.9,0,0,1-2.3-1.6,16.8,16.8,0,0,1-2.9-4,24.1,24.1,0,0,1-1.6-4.2c-.1-.5,1.6-1.3,3-1.4s3.5.2,3.6.6a10.3,10.3,0,0,0,2.6,4.9l.7.5h2.4l1.5-.2a28.4,28.4,0,0,0,6.5-2c2.1-1,4.3-2.1,6.3-3.3h.1a2.5,2.5,0,0,1,3.4.9l.3.5a43.1,43.1,0,0,0,3.2,7.7,19.8,19.8,0,0,0,2.2,3.4,8.1,8.1,0,0,0,2.6,2.6,5,5,0,0,0,3,.7,10.8,10.8,0,0,0,3.7-1,33.4,33.4,0,0,0,7.2-4.3C448.8,197.4,449.5,197.2,450.2,198.3Z\"></path>\r\n                            </g>\r\n                            </g>\r\n                        </g>\r\n                        <g id=\"table\">\r\n                            <path d=\"M65.7,181.8l714,124c0,74-2,54-2,128l-673-161Z\" fill=\"#fff\"></path>\r\n                            <path d=\"M786.7,304.2c-2.7,1.2-10.8,0-16.1-.9L31.1,176.4c-5.2-.9-8.9-3.8-6.2-5s14.3-1.4,19.5-.5L777.1,300.6C782.3,301.6,789.4,303.1,786.7,304.2Z\"></path>\r\n                        </g>\r\n                        <g id=\"laptop\">\r\n                            <g id=\"laptop__base\">\r\n                            <polygon points=\"641.9 304.1 454.7 348.2 103.8 271.3 254.6 230.3 641.9 304.1\" fill=\"#f2f2f2\"></polygon>\r\n                            <path d=\"M641.9,304.1c1.5-.1-2.3,1.5-10.3,3.6-28.9,7.5-58.1,15.2-87.7,22.6s-59.1,14.5-88.4,21.3l-.8.2-.8-.2-349.5-78-1.1-.2-8.7-1.9,8.6-2.3,150.6-41.5.6-.2h.7c62.5,11.7,125.5,23.6,188.4,35.9s125.6,25.1,188,37.6c8,1.6,11.9,3,10.4,3a185.6,185.6,0,0,1-18.4-2.6c-61.9-11.2-123.6-22.2-185-33.5s-122.7-23.1-184.4-35h1.2L104.4,273.4h-.1v-4.3l351.2,75.7h-1.5c28.3-6.7,56.3-13.3,84.3-19.5s56.5-12,85.2-18.1C631.3,305.6,640.4,304.1,641.9,304.1Z\" fill=\"#231f20\"></path>\r\n                            </g>\r\n                            <g id=\"laptop__keyboard\">\r\n                            <polygon points=\"371.1 274.8 256.8 253.5 257 252.7 266.2 251.1 382.4 271.5 382.3 272.3 371.1 274.8\" fill=\"#3e3e54\"></polygon>\r\n                            <polygon points=\"237.4 265.6 221.3 262.4 221.4 261.7 230.2 260.2 246.8 262.6 246.6 263.4 237.4 265.6\" fill=\"#3e3e54\"></polygon>\r\n                            <polygon points=\"474.6 312.9 249.9 268.1 250.1 267.3 259.2 265.8 487.7 309.6 487.5 310.5 474.6 312.9\" fill=\"#3e3e54\"></polygon>\r\n                            <polygon points=\"411.8 309.4 204.2 266.7 204.4 266 212.9 264.5 423.9 306.3 423.7 307.2 411.8 309.4\" fill=\"#3e3e54\"></polygon>\r\n                            <polygon points=\"450 317.3 428.5 312.9 428.8 312 440.7 310.6 462.7 314.1 462.5 315 450 317.3\" fill=\"#3e3e54\"></polygon>\r\n                            <polygon points=\"201.6 273.9 187.5 270.9 187.7 270.2 196 268.7 210.4 271 210.3 271.7 201.6 273.9\" fill=\"#3e3e54\"></polygon>\r\n                            <polygon points=\"222.6 278.3 208.1 275.3 208.3 274.5 216.9 273.1 231.8 275.4 231.6 276.2 222.6 278.3\" fill=\"#3e3e54\"></polygon>\r\n                            <polygon points=\"362.9 308.1 231.5 280.2 231.7 279.5 240.7 278.1 374.2 305.1 374 305.9 362.9 308.1\" fill=\"#3e3e54\"></polygon>\r\n                            <polygon points=\"444.3 288.4 385.2 277.4 385.4 276.5 396.6 274.9 456.9 285.1 456.7 285.9 444.3 288.4\" fill=\"#3e3e54\"></polygon>\r\n                            <polygon points=\"526.1 303.6 460.1 291.3 460.3 290.4 472.8 288.9 540.1 300.2 539.9 301.1 526.1 303.6\" fill=\"#3e3e54\"></polygon>\r\n                            <polygon points=\"426.2 321.6 376.1 310.9 376.3 310.1 387.4 308.7 438.5 318.5 438.3 319.4 426.2 321.6\" fill=\"#3e3e54\"></polygon>\r\n                            <g>\r\n                                <polygon points=\"410.6 286.5 399.1 288 398.9 288.8 499.9 308.3 513.3 305.9 513.5 305 410.6 286.5\" fill=\"#3e3e54\"></polygon>\r\n                                <polygon points=\"395.7 283.7 395.9 282.8 248.2 255.7 239.2 257.3 239 258 384.3 286 395.7 283.7\" fill=\"#3e3e54\"></polygon>\r\n                            </g>\r\n                            <polygon points=\"371.3 273.9 256.9 252.7 266.4 250.3 382.4 271.5 371.3 273.9\" stroke=\"#000\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.2\"></polygon>\r\n                            <polygon points=\"237.6 264.9 221.4 261.7 230.4 259.4 246.8 262.6 237.6 264.9\" stroke=\"#000\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.2\"></polygon>\r\n                            <polygon points=\"474.8 312 250 267.3 259.4 265.1 487.7 309.6 474.8 312\" stroke=\"#000\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.2\"></polygon>\r\n                            <polygon points=\"412 308.5 204.4 266 213.1 263.8 423.9 306.3 412 308.5\" stroke=\"#000\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.2\"></polygon>\r\n                            <polygon points=\"450.2 316.4 428.8 312 440.9 309.7 462.8 314.1 450.2 316.4\" stroke=\"#000\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.2\"></polygon>\r\n                            <polygon points=\"201.7 273.1 187.7 270.2 196.2 268 210.4 271 201.7 273.1\" stroke=\"#000\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.2\"></polygon>\r\n                            <polygon points=\"222.8 277.6 208.3 274.5 217.1 272.4 231.8 275.4 222.8 277.6\" stroke=\"#000\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.2\"></polygon>\r\n                            <polygon points=\"363.1 307.3 231.7 279.5 240.9 277.3 374.2 305.1 363.1 307.3\" stroke=\"#000\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.2\"></polygon>\r\n                            <polygon points=\"444.6 287.5 385.4 276.5 396.8 274.1 456.9 285 444.6 287.5\" stroke=\"#000\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.2\"></polygon>\r\n                            <polygon points=\"526.3 302.7 460.3 290.4 473 288 540.1 300.2 526.3 302.7\" stroke=\"#000\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.2\"></polygon>\r\n                            <polygon points=\"426.4 320.7 376.3 310.1 387.6 307.9 438.5 318.5 426.4 320.7\" stroke=\"#000\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.2\"></polygon>\r\n                            <g>\r\n                                <polygon points=\"410.7 285.6 399.1 288 500.1 307.4 513.5 305 410.7 285.6\" stroke=\"#000\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.2\"></polygon>\r\n                                <polygon points=\"395.9 282.8 248.4 255 239.2 257.3 384.5 285.2 395.9 282.8\" stroke=\"#000\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1.2\"></polygon>\r\n                            </g>\r\n                            </g>\r\n                            <g id=\"paw-right\">\r\n                            <g id=\"paw-right--down\">\r\n                                <path d=\"M293.2,191.3l10-7s-18.4,11.1-24,20-13,20.4-9,31c4.7,12.4,20.5,15.7,22,16,20,3.8,47.8-24.3,47.8-24.3s1.9-3.3,2.2-3.7\" fill=\"#fff\"></path>\r\n                                <path d=\"M342.1,223.4c.9,1.2.2,2.8-.3,3.7l-.4.7-.3.3a118.1,118.1,0,0,1-14.2,12.3,83.2,83.2,0,0,1-16.2,9.8,43.9,43.9,0,0,1-9.3,3,26.3,26.3,0,0,1-10.1.2,44.5,44.5,0,0,1-9.3-3.2,34.2,34.2,0,0,1-8.3-5.5,23,23,0,0,1-5.8-8.5,21.3,21.3,0,0,1-1.3-10.3,34.9,34.9,0,0,1,2.7-9.7,76.1,76.1,0,0,1,4.5-8.5l2.4-4,.6-1,.8-1.1a15.6,15.6,0,0,1,1.6-2,49.9,49.9,0,0,1,7-6.8,136.1,136.1,0,0,1,15.3-11.2,3.1,3.1,0,0,1,4.4,1,3,3,0,0,1-.8,4.2H305l-8.6,6.2c-.9.6-2.7-.5-3.1-1.9s.5-4.4,1.5-5l6.6-4.5,3.5,5.3A131.9,131.9,0,0,0,290,197.4a52.7,52.7,0,0,0-6.4,6,6.5,6.5,0,0,0-1.3,1.6l-.6.8-.7,1-2.4,3.8c-1.6,2.6-3.1,5.2-4.4,7.8a27.7,27.7,0,0,0-2.4,8.1,15.6,15.6,0,0,0,.8,8,17.4,17.4,0,0,0,4.4,6.7,27.2,27.2,0,0,0,7.1,4.9,39.5,39.5,0,0,0,8.1,3,21.6,21.6,0,0,0,8.4,0,37.8,37.8,0,0,0,8.5-2.6,84.9,84.9,0,0,0,15.7-9,142.4,142.4,0,0,0,14.1-11.6l-.3.3,1.1-1.8C340.3,223.4,341.3,222.2,342.1,223.4Z\"></path>\r\n                            </g>\r\n                            <g id=\"paw-right--up\">\r\n                                <g>\r\n                                <path d=\"M282.2,215.2c-1.6-1.6-12.8-17.9-14-34.3-.1-2.5,1.7-16,12.9-22.4s22.3-1.9,26.2.4c12.2,7.3,21.2,19.1,22.8,22.4\" fill=\"#fff\"></path>\r\n                                <path d=\"M330,181.2a2.4,2.4,0,0,1-2.6-1.3,71.4,71.4,0,0,0-9.8-10.8,64,64,0,0,0-11.7-8.6,26.3,26.3,0,0,0-6.5-2.3,26.9,26.9,0,0,0-6.9-.6,24.9,24.9,0,0,0-6.7,1.3,20.8,20.8,0,0,0-5.8,3.3,23.1,23.1,0,0,0-7.6,11,32.5,32.5,0,0,0-1.4,6.6,6.6,6.6,0,0,0,.1,1.4l.2,1.8c.1,1.2.4,2.3.6,3.5a65,65,0,0,0,4.8,13.4c1,2.2,2.2,4.3,3.4,6.4a43.1,43.1,0,0,0,3.9,5.9.6.6,0,0,1,0,.6c0,.2-.2.4-.4.7a5.7,5.7,0,0,1-1.5,1.6c-1.3.6-4.1.1-4.6-.6a89.5,89.5,0,0,1-7.2-13.7,63.7,63.7,0,0,1-4.3-14.9,25.7,25.7,0,0,1-.5-4c0-.3-.1-.6-.1-1v-1.2a12.5,12.5,0,0,1,.2-2.1,35.2,35.2,0,0,1,2.4-7.8,28.6,28.6,0,0,1,4.1-6.9,24.6,24.6,0,0,1,6.1-5.5,26.2,26.2,0,0,1,15.5-4.2,28.9,28.9,0,0,1,7.8,1.2l3.8,1.3,1.8.9,1.8,1a78.2,78.2,0,0,1,11.9,9.6,80.2,80.2,0,0,1,9.7,11.8C331.1,179.7,331.4,181,330,181.2Z\"></path>\r\n                                </g>\r\n                                <use width=\"31.4\" height=\"33.93\" transform=\"translate(273.2 166.1) rotate(-5.6)\" xlinkHref=\"#paw-pads\"></use>\r\n                            </g>\r\n                            </g>\r\n                            <g id=\"laptop__terminal\">\r\n                            <path d=\"M316.9,238.7,153.5,205.2a5.1,5.1,0,0,1-4-3.5L109.8,75.4c-1-3.3,1.9-6.6,5.6-6.3L277.9,84.5a5.2,5.2,0,0,1,4.6,3.7l40.7,144.4C324.2,236.2,320.8,239.5,316.9,238.7Z\"></path>\r\n                            <path d=\"M317.3,238.7a7.9,7.9,0,0,0,2.2-.7,5,5,0,0,0,2.2-1.9,3.7,3.7,0,0,0,.6-2.9l-.3-.8-.2-.9a15.4,15.4,0,0,1-.5-1.7L300,154.6l-10.7-37.5L284,98.3l-2.6-9.4a7.9,7.9,0,0,0-.4-.9,4.3,4.3,0,0,0-.4-.7,3.3,3.3,0,0,0-1.5-1.1l-.9-.3h-1.1l-2.4-.2L119.2,71.2l-2.4-.3h-2.2a3.3,3.3,0,0,0-2.8,1.6,2.4,2.4,0,0,0-.5,1.4v.8c.1.1.1.2.1.4l.2.6,1.5,4.6L119,98.8l11.8,37.3,11.7,37.2,5.9,18.6,2.9,9.3a3.4,3.4,0,0,0,2.2,2h1l1.2.3,2.4.4,153,31.1c4.3.9,7.4,2.9,5.2,3.3s-11.7-.1-16-1l-75.8-15.7L186.6,214l-19-3.9-9.5-2-4.7-1h-.7l-.8-.3a6.1,6.1,0,0,1-1.4-.7,7.6,7.6,0,0,1-2.3-2.4l-.4-.8a1.9,1.9,0,0,1-.2-.7l-.4-1.2-.7-2.3-1.4-4.6-2.9-9.2-5.8-18.5-11.5-36.9-11.5-37-2.9-9.2L109,78.5l-.7-2.3v-.6c0-.3-.1-.6-.1-.8a4.8,4.8,0,0,1,0-1.7,6.8,6.8,0,0,1,3.8-5,10.1,10.1,0,0,1,3-.7h2.6l9.6,1L204.1,76l38.5,3.7,19.3,1.9,9.6.9,4.8.5h2.6a6.6,6.6,0,0,1,2.7,1.2,7.2,7.2,0,0,1,1.9,2.4,12.1,12.1,0,0,1,.5,1.4l.3,1.1,1.3,4.7,2.6,9.3,5.2,18.6,10.4,37.3,10.4,37.3,5.3,18.6,2.6,9.4,1.3,4.6.6,2.4a7,7,0,0,1,.4,2.7,5.7,5.7,0,0,1-1.8,3.7,5.9,5.9,0,0,1-3.4,1.6,3.5,3.5,0,0,1-2.1-.4C316.7,239,316.8,238.9,317.3,238.7Z\"></path>\r\n                            </g>\r\n                            <g id=\"laptop__terminal_code_scene\"> \r\n                            <g id=\"laptop__code\">\r\n                                <g stroke=\"#3DE0E8\" strokeWidth=\"6\" transform=\"matrix(-1 0 0 1 278 103)\">\r\n                                <g id=\"f3\" transform=\"translate(0 76)\">\r\n                                    <path className=\"typing-animation\" id=\"f3-l9\" d=\"M8,25L8,25\" strokeDasharray=\"60,10\"></path>\r\n                                    <path className=\"typing-animation\" id=\"f3-l8\" d=\"M8,13L8,13\" strokeDasharray=\"50,10\"></path>\r\n                                    <path className=\"typing-animation\" id=\"f3-l7\" d=\"M0,1L0,1\" strokeDasharray=\"25,10\"></path>\r\n                                </g>\r\n                                <g id=\"f2\" transform=\"translate(0 38)\">\r\n                                    <path className=\"typing-animation\" id=\"f2-l6\" d=\"M8,25L8,25\" strokeDasharray=\"40,10\"></path>\r\n                                    <path className=\"typing-animation\" id=\"f2-l5\" d=\"M8,13L8,13\" strokeDasharray=\"60,10\"></path>\r\n                                    <path className=\"typing-animation\" id=\"f2-l4\" d=\"M0,1L0,1\" strokeDasharray=\"30,10\"></path>\r\n                                </g>\r\n                                <g id=\"f1\">\r\n                                    <path className=\"typing-animation\" id=\"f1-l3\" d=\"M8,25L8,25\" strokeDasharray=\"60,10\"></path>\r\n                                    <path className=\"typing-animation\" id=\"f1-l2\" d=\"M8,13L8,13\" strokeDasharray=\"60,10\"></path>\r\n                                    <path className=\"typing-animation\" id=\"f1-l1\" d=\"M0,1L0,1\" strokeDasharray=\"60,10\"></path>\r\n                                </g>\r\n                                </g>\r\n                            </g>\r\n                            </g>\r\n                            <g id=\"laptop__cover\" style={{mixBlendMode: 'hardLight'}}>\r\n                            <polygon points=\"440.7 347.2 90.3 275.6 4.7 3.8 353 36.7 440.7 347.2\" fill=\"#f2f2f2\"></polygon>\r\n                            <path d=\"M440.4,346.4c-2.5-5.3-6.5-18.8-9-27.4L390.7,178c-13.6-46.8-26.9-93.7-40.3-140.6l2.3,2L4.4,7.1,7.9,2.8,94,274.5l-2.9-2.6q83.7,16.8,166.8,34.2t166.8,35.4c8.8,1.9,17.5,5.1,14.7,5.5s-6.3-.2-12-.9-12.3-1.5-16.8-2.3Q330.5,328.1,250,312.1c-53.5-10.8-107.1-21.7-160.4-32.7l-2.3-.5-.6-2.1L1.5,4.8,0,0,5,.5,353.3,34l1.8.2.5,1.8q20.7,73.8,41.2,147.8l40.6,147.5C439.8,340.1,442.9,351.7,440.4,346.4Z\"></path>\r\n                            </g>\r\n                        </g>\r\n                        <g id=\"paw-left\">\r\n                            <g id=\"paw-left--up\">\r\n                            <g>\r\n                                <path d=\"M545.4,261.9c-7.1-13-12.9-31.1-13.3-37.6-.6-9,0-15.6,5.2-22.2s15-9.8,22.7-8.8a26.7,26.7,0,0,1,17.3,9.4c5.3,5.8,9.4,12.9,11.6,16.6\" fill=\"#fff\"></path>\r\n                                <path d=\"M588.9,219.2c-1.4.4-2.3-.7-2.8-1.4a93.9,93.9,0,0,0-8.9-12.5c-3.3-3.9-7.1-7-11.7-8.6a24.2,24.2,0,0,0-7.1-1.4,24.5,24.5,0,0,0-7.1.7,27,27,0,0,0-6.6,2.7,21,21,0,0,0-5.2,4.6,20.6,20.6,0,0,0-3.5,6.1,22.2,22.2,0,0,0-1.3,6.9,47.3,47.3,0,0,0,.1,7.5,52.2,52.2,0,0,0,1.4,7.1c1.4,4.8,3.1,9.7,5,14.4a147.7,147.7,0,0,0,6.5,13.9c.4.7-1,2.3-2.4,2.6s-4-.6-4.4-1.4c-2.3-4.8-4.3-9.7-6.1-14.6a128.8,128.8,0,0,1-4.6-15.3c-.3-1.3-.5-2.6-.7-4a16.4,16.4,0,0,1-.2-2.2v-2a57,57,0,0,1,.4-8.2,27.2,27.2,0,0,1,2.3-8.2c.7-1.3,1.4-2.5,2.2-3.7l1.3-1.7,1.4-1.6a28.8,28.8,0,0,1,7-5,27.6,27.6,0,0,1,8-2.5,25.6,25.6,0,0,1,8.3-.2,27.4,27.4,0,0,1,15.1,6.7,50.6,50.6,0,0,1,5.5,5.9,111.3,111.3,0,0,1,8.7,13.2C589.8,217.7,590.3,218.9,588.9,219.2Z\"></path>\r\n                            </g>\r\n                            <use width=\"31.4\" height=\"33.93\" transform=\"matrix(0.99, -0.03, 0.04, 1, 539.85, 203.52)\" xlinkHref=\"#paw-pads\"></use>\r\n                            </g>\r\n                            <g id=\"paw-left--down\">\r\n                            <path d=\"M538.2,239.3c-3.2,1.6-33,10.8-37,28-.4,1.8-2.1,18.9,7,26,5.5,4.3,12.7,2.8,25,0,10.3-2.3,19-5.8,40-16,9.1-4.4,16.6-8.2,22-11\" fill=\"#fff\"></path>\r\n                            <path d=\"M595.1,266.4c.1,1.4-1.4,2.4-2.4,2.9l-18.3,9.4c-6.2,3.1-12.3,6.1-18.6,9a120.8,120.8,0,0,1-19.6,7.2l-5.1,1.2-5.1,1.1a43.4,43.4,0,0,1-5.2.9,33.8,33.8,0,0,1-5.6.3,17.8,17.8,0,0,1-5.8-1.5,6.1,6.1,0,0,1-1.4-.7l-1.3-.9-2.2-2a23.6,23.6,0,0,1-5.2-10.2,44.5,44.5,0,0,1-1.3-10.9c0-.9.1-1.8.1-2.7a6.6,6.6,0,0,0,.1-1.4v-.7c.1-.3.1-.7.2-.9a21.6,21.6,0,0,1,2.1-5.5,33.4,33.4,0,0,1,7.1-8.7,67.1,67.1,0,0,1,8.7-6.4,121.7,121.7,0,0,1,19-9,1.5,1.5,0,0,1,1.7.6,3.4,3.4,0,0,1,.9,1.9c.1,1.5-1.6,4.2-2.6,4.6a91.1,91.1,0,0,0-17.8,8.5,40.1,40.1,0,0,0-7.6,5.8,22.8,22.8,0,0,0-5.2,7.3l-.4,1-.3,1a1.7,1.7,0,0,0-.2.5v.4c-.1.4-.1.8-.2,1.2s-.1,3.1-.1,4.7a35.4,35.4,0,0,0,1.4,9.3,15.6,15.6,0,0,0,4.5,7.3c2,1.9,4.7,2.6,7.8,2.5a55.9,55.9,0,0,0,9.7-1.2l4.9-1.1,4.9-1.1a121,121,0,0,0,18.8-6.8c12.4-5.3,24.6-11.5,36.8-17.4C593.4,265.4,595,264.9,595.1,266.4Z\"></path>\r\n                            </g>\r\n                        </g>\r\n                    </svg>\r\n                </div>\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(Cat);\r\n","import React, {useContext, useState, useMemo, useRef, useCallback} from 'react';\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\nimport {AuthLoginIdPw, AuthLoginTokenSelect} from \"../../../utils/nanoit/auth\";\r\nimport Cat from '../Cat';\r\nimport sha256 from 'sha256';\r\nimport { useForm } from \"react-hook-form\"; // https://react-hook-form.com/\r\n\r\nfunction Login() {\r\n    const {state, actions} = useContext(StoreContext)\r\n    \r\n    const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n    const onSubmit = data => {\r\n        if( errors.email && errors.password ){\r\n            actions.viewActions.getToast('아이디나 비밀번호가 틀렸어요')\r\n            return;\r\n        }else{\r\n            // actions.viewActions.getToast('로그인 성공 !')\r\n            actions.generalActions.WebsocketSendData(AuthLoginIdPw(data.email, data.password))\r\n            // actions.generalActions.WebsocketSendData(AuthLoginTokenSelect())\r\n\r\n            // sha256 변환 확인\r\n            // console.log(sha256(password))\r\n        }\r\n    }\r\n    // console.log(watch('email'))\r\n\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"box\">\r\n                <Cat />\r\n                <div className=\"info\">\r\n                    <h2>로그인</h2>\r\n                </div>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <input autoComplete=\"username\" type=\"email\"  placeholder=\"이메일\" className=\"input_common\" {...register('email', {required:true})} />\r\n                    <input autoComplete=\"current-password\" type=\"password\" placeholder=\"비밀번호\" className=\"input_common\" {...register('password', {required:true})} />\r\n                    <button type=\"submit\" value=\"submit\">로그인</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(Login);\r\n","import React, { useCallback, useContext } from 'react';\r\nimport ReplyIcon from '@material-ui/icons/Reply';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {StoreContext} from \"../../../context/store/storeContext\";\r\nimport EmailIcon from '@material-ui/icons/Email';\r\n\r\n\r\nfunction Notify() {\r\n    const {state, actions} = useContext(StoreContext);\r\n    const replies = state.generalStates.REPLY;\r\n    const mentions = state.generalStates.MENTION;\r\n\r\n\r\n    /*******************************************************\r\n     * Functions\r\n     *******************************************************/\r\n    const goToTopicMessage = useCallback((reply) => {\r\n        // console.log(reply)\r\n        actions.viewActions.selecTopic(reply.topic_id);\r\n    },[]);\r\n\r\n    /*******************************************************\r\n     * Component\r\n     *******************************************************/\r\n    const MsgReply = () =>\r\n        !replies.length\r\n        ? <p>새로운 답장이 없어요</p>\r\n        : replies.map((reply, i) => \r\n            <a key={i} href={`#reply_${reply.topic_id}_${reply.sequence_id}`} className=\"msgbox\" onClick={() => goToTopicMessage(reply)}>\r\n                <div className=\"left\">\r\n                    <ReplyIcon />\r\n                    <p>답장</p>\r\n                </div>\r\n                <div className=\"right\">\r\n                    <p>{reply.topic_id}번방</p>\r\n                    <span>{reply.from_user_name}님이 답장 메시지를 보냈어요.</span>\r\n                </div>\r\n                {/* <CloseIcon className=\"icon_close\" /> */}\r\n            </a>\r\n        )\r\n\r\n    const MsgMention = () =>\r\n        !mentions.length\r\n        ? <p>새로운 멘션이 없어요</p>\r\n        : mentions.map((mention, i) => \r\n            <button className=\"msgbox\">\r\n                <div className=\"left\">\r\n                    <SendIcon />\r\n                    <p>멘션</p>\r\n                </div>\r\n                <div className=\"right\">\r\n                    <p>{mention.topic_id}번방</p>\r\n                    <span>{mention.from_user_name}님이 멘션 메시지를 보냈어요.</span>\r\n                </div>\r\n                {/* <CloseIcon className=\"icon_close\" /> */}\r\n            </button>\r\n        )\r\n\r\n    // 답장, 멘션 새롭게 변경된 것 체크해서 bell_newmsg 보이게 설정\r\n    const BtnViewNotify = () => \r\n        <button className=\"btnViewNotify\"\r\n            onClick={() => actions.viewActions.isShowPopupNotify(true)}\r\n        >\r\n            <EmailIcon />\r\n            {\r\n                (replies.length || mentions.length ) \r\n                ? <span className=\"bell_newmsg\"><span className=\"dot\"></span>새로운 알림</span>\r\n                : ''\r\n            }\r\n        </button>\r\n\r\n\r\n    return (\r\n        <>\r\n        {\r\n            !state.viewStates.isShowNotify && \r\n            <BtnViewNotify />\r\n        }\r\n\r\n        {\r\n            !!state.viewStates.isShowNotify && \r\n            <div className=\"Notify\">\r\n                <h2>\r\n                    알림\r\n                    <CloseIcon className=\"icon_close\" onClick={() => actions.viewActions.isShowPopupNotify(false)} />\r\n                </h2>\r\n                <div className=\"notify_reply\">\r\n                    <h3>답장</h3>\r\n                    <MsgReply />\r\n                </div>\r\n                <div className=\"notify_mention\">\r\n                    <h3>멘션</h3>\r\n                    <MsgMention />\r\n                </div>\r\n            </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(Notify);","import React, { useState, useContext, useEffect } from 'react';\r\n\r\nimport '../../scss/style.scss';\r\n\r\nimport Header from './layout/Header';\r\nimport Wrapper from './layout/Wrapper';\r\nimport Contents from './layout/Contents';\r\nimport Navigation from './layout/Navigation';\r\nimport List from './list/List';\r\nimport Chat from './chat/Chat';\r\nimport Signup from './member/Signup';\r\nimport Login from './member/Login';\r\nimport { StoreContext } from '../../context/store/storeContext';\r\nimport axios from 'axios';\r\nimport { AuthLogoutNormal } from '../../utils/nanoit/auth';\r\n\r\nimport { MetaRequestTopicMessage, MetaRequestUserTopicId } from '../../utils/nanoit/meta';\r\nimport Notify from './notify/Notify';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { showToast } from '../../utils/Toastify';\r\nimport { deviceDivider } from '../../utils/deviceDivider';\r\nimport { ProfileDownload } from '../../utils/fileUtil';\r\nimport { getLocalUserTopic } from '../../context/localStorageActions';\r\n\r\nfunction ViewApp() {\r\n    const {state, actions} = useContext(StoreContext);\r\n\r\n    const [isShowNavi, setIsShowNavi] = useState(false);\r\n    //const [hideLogin, setHideLogin] = useState(false);\r\n\r\n    /* // 각 메시지 클릭시 뜨는 팝업창 정보\r\n    useEffect(() => {\r\n        console.log(state.viewStates.popupMessageItems);\r\n    }, [state.viewStates.popupMessageItems]);\r\n    */\r\n\r\n    // 사용자 접속 기기 체크\r\n    useEffect(() => {\r\n        deviceDivider();\r\n    }, []);\r\n\r\n    /**\r\n     * @summary Notification API (HTML5) window 창 하단 알람\r\n     * 출처: https://dororongju.tistory.com/125 [웹 개발 메모장]\r\n     */\r\n    useEffect(() => {\r\n        // Notification.requestPermission();\r\n        // new Notification(\"타이틀\", {body:'메세지 내용'});\r\n\r\n        //알림 권한 요청\r\n        /* function getNotificationPermission() {\r\n            // 브라우저 지원 여부 체크\r\n            if (!(\"Notification\" in window)) {\r\n                alert(\"데스크톱 알림을 지원하지 않는 브라우저입니다.\");\r\n            }\r\n            // 데스크탑 알림 권한 요청\r\n            Notification.requestPermission(function (result) {\r\n                // 권한 거절\r\n                if(result == 'denied') {\r\n                    alert('알림을 차단하셨습니다.\\n브라우저의 사이트 설정에서 변경하실 수 있습니다.');\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n        getNotificationPermission();\r\n\r\n        // new Notification(\"타이틀\", {body:'메세지내용'});\r\n\r\n        // 알림 띄우기\r\n        function notify(msg) {\r\n            var options = {\r\n                body: msg\r\n            }\r\n            \r\n            // 데스크탑 알림 요청\r\n            var notification = new Notification(\"채팅 테스트\", options);\r\n            \r\n            // 3초뒤 알람 닫기\r\n            setTimeout(function(){\r\n                notification.close();\r\n            }, 3000);\r\n        }\r\n        notify('나노아이티 메시지 !!'); */\r\n    }, []);\r\n\r\n    /*********************************************************************\r\n     * 자동 로그인 시도 ( 로컬스토리지에 token있을 경우 )\r\n     *********************************************************************/\r\n    useEffect(() => {\r\n        const localstorage_loginkey = localStorage.getItem('chattingLoginKey');\r\n        if( !localstorage_loginkey ){\r\n            return\r\n        }else{\r\n            if (state.generalStates.WEBSOCKET_STATUS === 'Open') {\r\n                // localStorage.removeItem('chattingLoginKey'); // 서버가 리셋되면 로컬스토리지에 이미 있는 토큰과 일치하지않아 로그인이 실패되므로, 강제로 지워줌\r\n\r\n                // console.log('자동 로그인 시도');\r\n                // actions.generalActions.WebsocketSendData(AuthLoginToken(localstorage_loginkey));\r\n            }\r\n        }\r\n    }, [state.generalStates.WEBSOCKET_STATUS]);\r\n\r\n\r\n    /**********************************************************************\r\n     * @summary 회원가입 시 사용자 프로필 이미지 업로드\r\n     * @description\r\n     * * 1. 회원가입 UI가 열려있고,\r\n     * * 2. 세션 토큰과 세션 유저 정보가 있다면, 프로필 이미지 등록 시도\r\n     *********************************************************************/\r\n\r\n    useEffect(() => {\r\n/*\r\n        console.log(\r\n            state.viewStates.hideSignup,\r\n            state.generalStates.SESSION_USER_INFO,\r\n            state.generalStates.SESSION_JWT_TOKEN\r\n        )\r\n*/\r\n        if( state.viewStates.hideSignup === true\r\n            && state.generalStates.SESSION_USER_INFO.id !== null\r\n            && state.generalStates.SESSION_JWT_TOKEN !== null\r\n        ) {\r\n            // 사용자 프로필 이미지 업로드\r\n            if( !state.viewStates.profileImg ) return;\r\n            console.log('사용자 프로필 이미지 업로드 시도')\r\n\r\n            let formData = new FormData();\r\n            formData.append(\"file\", state.viewStates.profileImg);\r\n            \r\n            axios({\r\n                method:'POST',\r\n                url:state.generalStates.DEFAULT_CHAT_SERVER_URL + '/api/v1/upload/profile?user_id=' + state.generalStates.SESSION_USER_INFO.id,\r\n                headers:{\r\n                    'Authorization': 'Bearer ' + state.generalStates.SESSION_JWT_TOKEN\r\n                },\r\n                data:formData\r\n            })\r\n            .then(res => {\r\n                /**\r\n                 * @summary 사용자 프로필 이미지 업로드 성공시 동작\r\n                 * @description \r\n                 * 1. file_id를 store에 저장\r\n                 * 2. 저장된 file_id를 기준으로 전체회원목록의 프로필이미지 다운로드\r\n                 */\r\n                actions.generalActions.UpdateProfile(\r\n                    state.generalStates.SESSION_USER_INFO.id,\r\n                    res.data.file.response.file.id\r\n                )\r\n                console.log('사용자 프로필 이미지 업로드 완료')\r\n            })\r\n            .catch(e => {\r\n                console.log('오류 : 사용자 프로필 이미지 업로드')\r\n\r\n                /**\r\n                 * @summary 사용자 프로필 이미지 업로드 실패시 동작\r\n                 * @description\r\n                 * 1. 로그아웃\r\n                 * 2. 회원가입 탈퇴\r\n                 */\r\n                // 1. 로그아웃\r\n                actions.generalActions.WebsocketSendData(AuthLogoutNormal())\r\n                actions.viewActions.isHideLogin(false);\r\n                // 자동 로그인용 key 삭제\r\n                localStorage.removeItem('chattingLoginKey')\r\n\r\n                // 2. 회원가입 탈퇴 (추후 서버단에 요청)\r\n                // actions.generalActions.WebsocketSendData( )\r\n            })\r\n        }\r\n    }, [\r\n        state.viewStates.hideSignup,\r\n        state.generalStates.SESSION_USER_INFO,\r\n        state.generalStates.SESSION_JWT_TOKEN\r\n    ]);\r\n\r\n\r\n    /***********************************************************************\r\n     * @summary 회원가입한 회원이 채팅방에 바로 들어왔을 경우\r\n     * @description \r\n     * * 1. 회원가입 시 전체회원과는 별도로 혼자 file_id 기준으로 프로필이미지 다운해서 가져옴.\r\n     * * 2. 회원가입한 유저를 채팅방 내 목록에 추가 ( TOPIC_MY.users += 신규회원 )\r\n     **********************************************************************/\r\n    useEffect(() => {\r\n        // console.log('신규회원 정보 갱신')\r\n\r\n        const newUserIndex = (state.generalStates.FRIENDS_ALL.length)-1;\r\n        const newUser = state.generalStates.FRIENDS_ALL[newUserIndex];\r\n\r\n        if( !newUser ) return;\r\n\r\n        const callbackGetImg = (img) => {\r\n            actions.generalActions.addProfileImg(\r\n                newUser.profile.file_id, \r\n                newUser.id, \r\n                img\r\n            )\r\n        }\r\n        ProfileDownload(\r\n            newUser.profile.file_id, \r\n            state.generalStates.DEFAULT_CHAT_SERVER_URL, \r\n            state.generalStates.SESSION_JWT_TOKEN,\r\n            callbackGetImg\r\n        );\r\n\r\n        const topic = state.generalStates.TOPICS_MY.find(t => t.id === state.viewStates.selectopicid);\r\n\r\n        // 신규회원일 경우 undefined로 추가되므로...\r\n        if( topic !== undefined && topic.users[topic.users.length-1] === undefined ){\r\n            actions.generalActions.InsertNewUserById(topic.id, newUser, topic.users.length-1);\r\n        }\r\n    }, [state.generalStates.FRIENDS_ALL.length]); // 신규회원 추가시 동작\r\n\r\n    /*************************************************************************\r\n     * 다른 채팅방으로 이동 \r\n     ************************************************************************/\r\n    useEffect(() => {\r\n        if( !!state.viewStates.selectopicid ){\r\n            actions.viewActions.isShowChatboxLoading(false);\r\n            setTimeout(function(){\r\n                actions.viewActions.isShowChatboxLoading(true);\r\n            },10);\r\n\r\n            actions.generalActions.WebsocketSendData(MetaRequestUserTopicId(state.viewStates.selectopicid)); // 채팅방내 사용자 호출\r\n\r\n            /**\r\n             * 1. 로컬 스토리지에 방이 있고,\r\n             * 2. 그 방안에 messages가 있다면, 마지막 sequence_id의 다음 메시지가 있는지 서버에 요청\r\n             */\r\n            const GET_LOCAL_USER_TOPIC = getLocalUserTopic(\r\n                state.generalStates.SESSION_USER_INFO.id,\r\n                state.viewStates.selectopicid\r\n            );\r\n\r\n            if( !GET_LOCAL_USER_TOPIC.messages ){\r\n                actions.generalActions.WebsocketSendData(MetaRequestTopicMessage(state.viewStates.selectopicid));\r\n                console.log('서버에 메시지 요청');\r\n            }else{\r\n                // actions.generalActions.WebsocketSendData(MetaRequestTopicMessage(state.viewStates.selectopicid)); // 추후 페이징으로 변경해야함.\r\n                actions.generalActions.InsertMessagesById(GET_LOCAL_USER_TOPIC)\r\n                console.log('로컬에 메시지 요청');\r\n            }\r\n        }\r\n    }, [state.viewStates.selectopicid]);\r\n\r\n\r\n    // 수신자용 reply, mention 작업\r\n    useEffect(() => {\r\n        // const GET_LOCAL_NANOIT = getLocalItem('NANOIT');\r\n        // const user = GET_LOCAL_NANOIT?.CHAT?.USERS.find(u => u.id === state.generalStates.SESSION_USER_INFO.id);\r\n        // const topic = user?.TOPICS_MY?.find(t => t.id === state.viewStates.selectopicid);\r\n        const myId = state.generalStates.SESSION_USER_INFO.id;\r\n        let replySet = new Set();\r\n        let mentionSet = new Set();\r\n\r\n        /* if( !topic?.messages ){\r\n            // console.log('로컬에 메시지가 없음');\r\n        }else{\r\n            // console.log('로컬에 메시지 있음');\r\n            topic?.messages?.map((msg, i) => {\r\n                if (msg.custom?.notify.reply &&  // 답장 체크 \r\n                    msg.custom?.notify.reply.to_user_id === myId){\r\n                    // console.log('나에게 답장한 것만 가져오기');\r\n                    replySet.add(msg);\r\n                }\r\n                if( msg.custom?.notify.mention && // 멘션 체크\r\n                    msg.custom?.notify.mention.to_users_id.find(u => u.id === myId)){ \r\n                    // console.log('나의 멘션만 가져오기');\r\n                    mentionSet.add(msg)\r\n                }else{\r\n                    console.log('멘션없음')\r\n                }\r\n            })\r\n        } */\r\n\r\n\r\n        if( replySet.size > 0 ){\r\n            const replies = [...replySet];\r\n            actions.viewActions.setReplyInfo(replies);\r\n        }else if( mentionSet.size > 0 ){\r\n            const mentions = [...mentionSet];\r\n            actions.viewActions.setMentionInfo(mentions);\r\n        }\r\n    }, [state.viewStates.selectopicid, state.generalStates.TOPICS_MY]);\r\n\r\n\r\n    // 토스트 팝업 출력\r\n    useEffect(() => {\r\n        showToast(state.viewStates.getToastMsg);\r\n        actions.viewActions.getToast(null);\r\n    }, [state.viewStates.getToastMsg!=null]);\r\n\r\n\r\n    return (\r\n        <div className=\"ViewApp\">\r\n            <Wrapper>\r\n                {   // 로그인X, 회원가입X  경우 show\r\n                    ( !state.viewStates.hideSignup && !state.viewStates.hideLogin ) && <Signup />\r\n                }\r\n\r\n                {!state.viewStates.hideLogin && <Login />}\r\n\r\n                <Header isShowNavi={isShowNavi} setIsShowNavi={setIsShowNavi} />\r\n                <Navigation isShowNavi={isShowNavi} setIsShowNavi={setIsShowNavi} />\r\n                <Contents>\r\n                    <List />\r\n                    <Chat />\r\n                </Contents>\r\n\r\n                {   // 알림 팝업창\r\n                    ( !!state.viewStates.hideSignup && !!state.viewStates.hideLogin ) && <Notify />\r\n                }\r\n\r\n            <ToastContainer />\r\n            </Wrapper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(ViewApp);\r\n","import UID from 'uniquebrowserid';\r\n\r\n/**\r\n * @name deviceDivider\r\n * @summary 사용자의 접속 기기 체크\r\n * @description 필요정보\r\n *  1. 디바이스 기기 (MOBILE / PC)\r\n *  2. 에이전트 정보 \r\n *  3. 유니크 브라우저 아이디 (https://www.npmjs.com/package/uniquebrowserid)\r\n */\r\nexport const deviceDivider = () => {\r\n    const userAgent = window.navigator.userAgent;\r\n    const isMobile = detectDevice(userAgent);\r\n    const browserid = new UID().completeID();\r\n    \r\n    function detectDevice(agent){\r\n        const mobileRegex = [\r\n            /iPhone/i,\r\n            /iPad/i,\r\n            /iPod/i,\r\n            /Android/i,\r\n            /BlackBerry/i,\r\n            /Windows Phone/i\r\n        ]\r\n        return mobileRegex.some(mobile => agent.match(mobile))\r\n    }\r\n\r\n    if (isMobile) {\r\n        console.log(`사용자접속정보 => (1) DEVICE: MOBILE, (2) AGENT: ${userAgent}, (3) browserId: ${browserid} `)\r\n    }else {\r\n        console.log(`사용자접속정보 => (1) DEVICE: PC, (2) AGENT: ${userAgent}, (3) browserId: ${browserid} `)\r\n    }\r\n}","/**\r\n * @name react-toastify\r\n * @summary toast popup\r\n * @link https://github.com/fkhadra/react-toastify\r\n * @description 사용법\r\n * 1. <ToastContainer /> 를 APP 상단에 뿌림.\r\n * 2. toast('메시지')함수를 불러와 출력하면 끝.\r\n */\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\nexport const showToast = (msg) => {\r\n    toast(msg, {\r\n        position: \"top-center\",\r\n        autoClose: 2000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n    });\r\n}\r\n","import React from 'react';\r\n// import {makeStyles} from \"@material-ui/core/styles\";\r\n// import Drawer from \"./components/root/main/bar\"\r\nimport {InitializeWebsocket} from \"./ws\";\r\nimport ViewApp from \"./components/view/ViewApp\";\r\n\r\nexport const WebsocketContext = React.createContext({\r\n    handleWebsocketClose: () => {}\r\n})\r\n\r\nfunction App() {\r\n\r\n    const {handleWebsocketClose} = InitializeWebsocket()\r\n    const value = React.useMemo(() => ({handleWebsocketClose}), [handleWebsocketClose])\r\n\r\n    return (\r\n        <WebsocketContext.Provider value={value}>\r\n            {/* <div className={classes.AppRoot}>\r\n                <Drawer/>\r\n            </div> */}\r\n            <ViewApp />\r\n        </WebsocketContext.Provider>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {StoreContext} from \"../context/store/storeContext\";\r\nimport useWebSocket, {ReadyState} from \"react-use-websocket\";\r\nimport {TYPE_LOGGING_STATUS} from \"../context/globals\";\r\n\r\nexport const InitializeWebsocket = () => {\r\n    const {state, actions} = React.useContext(StoreContext)\r\n\r\n    const {sendMessage, lastMessage, readyState, getWebSocket} = useWebSocket(state.generalStates.DEFAULT_WEBSOCKET_SERVER_URL, {\r\n        shouldReconnect: (closeEvent) => true,\r\n        reconnectAttempts: 10,\r\n        reconnectInterval: 3000,\r\n    });\r\n\r\n    const connectionStatus = {\r\n        [ReadyState.CONNECTING]: 'Connecting',\r\n        [ReadyState.OPEN]: 'Open',\r\n        [ReadyState.CLOSING]: 'Closing',\r\n        [ReadyState.CLOSED]: 'Closed',\r\n        [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\r\n    }[readyState];\r\n\r\n    useEffect(() => {\r\n        if (lastMessage !== null) {\r\n            actions.generalActions.WebsocketReceiveData(lastMessage.data)\r\n        }\r\n    }, [lastMessage])\r\n\r\n    useEffect(() => {\r\n        if (connectionStatus === 'Open') {\r\n            console.log('opened');\r\n        } else if (connectionStatus === 'Connecting') {\r\n            console.log('connecting...');\r\n        } else if (connectionStatus === 'Closing') {\r\n            console.log('closing...');\r\n        } else if (connectionStatus === 'Closed') {\r\n            console.log('closed');\r\n            actions.viewActions.getToast('서버연결이 끊겼어요...ㅜㅜ  (websocket closed)');\r\n        } else {\r\n            console.log('uninstantiated');\r\n        }\r\n    }, [connectionStatus])\r\n\r\n    useEffect(() => {\r\n        if (connectionStatus === 'Open') {\r\n            actions.generalActions.WebsocketUpdateWriter(sendMessage)\r\n        } else {\r\n            actions.generalActions.ResetAllStates()\r\n            // actions.generalActions.TOPIC_DELETE_ALL(false)\r\n            // actions.generalActions.DELETE(false)\r\n            // actions.generalActions.SESSION_UPDATE_LOGIN(false)\r\n            // actions.generalActions.WebsocketUpdateWriter(undefined)\r\n        }\r\n\r\n        actions.generalActions.WebsocketUpdateStatus(connectionStatus)\r\n        actions.generalActions.Logger(TYPE_LOGGING_STATUS, \"[WEBSOCKET] STATUS CHANGED = \" + connectionStatus)\r\n    }, [connectionStatus])\r\n\r\n    const handleWebsocketClose = useCallback(() => {\r\n        getWebSocket().close()\r\n    }, []);\r\n\r\n    return {sendMessage, lastMessage, readyState, getWebSocket, handleWebsocketClose}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\nimport {StoreProvider} from \"./context/store/storeContext\";\r\nimport ReactCatcher from 'react-catcher';\r\nimport { sendMessageToSlack } from './utils/errorlog';\r\n\r\nReactDOM.render(\r\n    /**\r\n     * componentDidCatch 로 에러 잡아내기\r\n     * @name ReactCatcher: https://github.com/ibrahim-13/react-catch\r\n     * @name componentDidCatch: https://react.vlpt.us/basic/26-componentDidCatch-and-sentry.html\r\n     * \r\n     * 에러에 대응해 해야할 작업\r\n     * 1. 에러났을경우 slack에 message전달 - 성공\r\n     * 2. 각 에러 별로 대응할 컴포넌트 작업\r\n     */\r\n    <ReactCatcher\r\n        fallback={<h1> 에러가 발생했어요... 에러없는 서비스로 잘 만들어볼게요 :( </h1>}\r\n        errorHandler={(error, errorInfo) => {\r\n            const error_message = `error: ${error}`;\r\n            console.log(error_message)\r\n            // errorInfo: ${JSON.stringify(errorInfo)}\r\n            // sendMessageToSlack(error_message);\r\n        }}\r\n    >\r\n        <StoreProvider>\r\n            <App/>\r\n        </StoreProvider>\r\n    </ReactCatcher>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}